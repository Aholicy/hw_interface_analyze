代码块类型: Method Declaration
位置: 35:32
Spell: ApplyQuickFix
包含日志: 否
代码:
int32_t QuickFixManagerClient::ApplyQuickFix(const std::vector<std::string> &quickFixFiles, bool isDebug)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

    auto quickFixMgr = GetQuickFixMgrProxy();
    if (quickFixMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");
        return QUICK_FIX_CONNECT_FAILED;
    }

    auto bundleQuickFixMgr = QuickFixUtil::GetBundleQuickFixMgrProxy();
    if (bundleQuickFixMgr == nullptr) {
        return QUICK_FIX_CONNECT_FAILED;
    }

    TAG_LOGD(AAFwkTag::QUICKFIX, "hqf file number need to apply: %{public}zu", quickFixFiles.size());
    std::vector<std::string> destFiles;
    auto copyRet = bundleQuickFixMgr->CopyFiles(quickFixFiles, destFiles);
    if (copyRet != 0) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Copy files failed.");
        return (copyRet == ERR_BUNDLEMANAGER_QUICK_FIX_PERMISSION_DENIED) ? QUICK_FIX_VERIFY_PERMISSION_FAILED :
            QUICK_FIX_COPY_FILES_FAILED;
    }

    return quickFixMgr->ApplyQuickFix(destFiles, isDebug);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 38:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 41:5
Spell: 
包含日志: 否
代码:
    if (quickFixMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");
        return QUICK_FIX_CONNECT_FAILED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 42:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 47:5
Spell: 
包含日志: 否
代码:
    if (bundleQuickFixMgr == nullptr) {
        return QUICK_FIX_CONNECT_FAILED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 51:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::QUICKFIX, "hqf file number need to apply: %{public}zu", quickFixFiles.size());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 54:5
Spell: 
包含日志: 否
代码:
    if (copyRet != 0) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Copy files failed.");
        return (copyRet == ERR_BUNDLEMANAGER_QUICK_FIX_PERMISSION_DENIED) ? QUICK_FIX_VERIFY_PERMISSION_FAILED :
            QUICK_FIX_COPY_FILES_FAILED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 55:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Copy files failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 63:32
Spell: GetApplyedQuickFixInfo
包含日志: 否
代码:
int32_t QuickFixManagerClient::GetApplyedQuickFixInfo(const std::string &bundleName,
    ApplicationQuickFixInfo &quickFixInfo)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

    auto quickFixMgr = GetQuickFixMgrProxy();
    if (quickFixMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");
        return QUICK_FIX_CONNECT_FAILED;
    }

    return quickFixMgr->GetApplyedQuickFixInfo(bundleName, quickFixInfo);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 70:5
Spell: 
包含日志: 否
代码:
    if (quickFixMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");
        return QUICK_FIX_CONNECT_FAILED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 71:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 78:47
Spell: GetQuickFixMgrProxy
包含日志: 否
代码:
sptr<IQuickFixManager> QuickFixManagerClient::GetQuickFixMgrProxy()
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");
    auto quickFixMgr = GetQuickFixMgr();
    if (quickFixMgr != nullptr) {
        TAG_LOGD(AAFwkTag::QUICKFIX, "Quick fix manager has been started");
        return quickFixMgr;
    }

    if (!LoadQuickFixMgrService()) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Load quick fix manager service failed");
        return nullptr;
    }

    quickFixMgr = GetQuickFixMgr();
    if (quickFixMgr == nullptr || quickFixMgr->AsObject() == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Failed to get quick fix manager");
        return nullptr;
    }

    auto self = weak_from_this();
    const auto &onClearProxyCallback = [self](const wptr<IRemoteObject> &remote) {
        auto impl = self.lock();
        if (impl && impl->quickFixMgr_ == remote) {
            impl->ClearProxy();
        }
    };

    sptr<QfmsDeathRecipient> recipient(new (std::nothrow) QfmsDeathRecipient(onClearProxyCallback));
    quickFixMgr->AsObject()->AddDeathRecipient(recipient);

    return quickFixMgr;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 81:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 83:5
Spell: 
包含日志: 否
代码:
    if (quickFixMgr != nullptr) {
        TAG_LOGD(AAFwkTag::QUICKFIX, "Quick fix manager has been started");
        return quickFixMgr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 84:9
Spell: 
包含日志: 否
代码:
        TAG_LOGD(AAFwkTag::QUICKFIX, "Quick fix manager has been started");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 88:5
Spell: 
包含日志: 否
代码:
    if (!LoadQuickFixMgrService()) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Load quick fix manager service failed");
        return nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 89:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Load quick fix manager service failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 94:5
Spell: 
包含日志: 否
代码:
    if (quickFixMgr == nullptr || quickFixMgr->AsObject() == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Failed to get quick fix manager");
        return nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 95:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Failed to get quick fix manager");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 102:9
Spell: 
包含日志: 否
代码:
        if (impl && impl->quickFixMgr_ == remote) {
            impl->ClearProxy();
        }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 113:32
Spell: RevokeQuickFix
包含日志: 否
代码:
int32_t QuickFixManagerClient::RevokeQuickFix(const std::string &bundleName)
{
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

    auto quickFixMgr = GetQuickFixMgrProxy();
    if (quickFixMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");
        return QUICK_FIX_CONNECT_FAILED;
    }

    auto retval = quickFixMgr->RevokeQuickFix(bundleName);
    TAG_LOGD(AAFwkTag::QUICKFIX, "Function call end, retval is %{public}d", retval);
    return retval;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 115:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 118:5
Spell: 
包含日志: 否
代码:
    if (quickFixMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");
        return QUICK_FIX_CONNECT_FAILED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 119:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Get quick fix manager service failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 124:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::QUICKFIX, "Function call end, retval is %{public}d", retval);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 128:29
Spell: ClearProxy
包含日志: 否
代码:
void QuickFixManagerClient::ClearProxy()
{
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");
    std::lock_guard<std::mutex> lock(mutex_);
    quickFixMgr_ = nullptr;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 130:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::QUICKFIX, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 135:49
Spell: OnRemoteDied
包含日志: 否
代码:
void QuickFixManagerClient::QfmsDeathRecipient::OnRemoteDied([[maybe_unused]] const wptr<IRemoteObject> &remote)
{
    if (proxy_ != nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "quick fix manager service died");
        proxy_(remote);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 137:5
Spell: 
包含日志: 否
代码:
    if (proxy_ != nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "quick fix manager service died");
        proxy_(remote);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 138:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "quick fix manager service died");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 143:29
Spell: LoadQuickFixMgrService
包含日志: 否
代码:
bool QuickFixManagerClient::LoadQuickFixMgrService()
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    {
        std::unique_lock<std::mutex> lock(loadSaMutex_);
        loadSaFinished_ = false;
    }

    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, "GetSystemAbilityManager");
    auto systemAbilityMgr = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
    if (systemAbilityMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Failed to get SystemAbilityManager");
        return false;
    }

    sptr<QuickFixLoadCallback> loadCallback = new (std::nothrow) QuickFixLoadCallback();
    if (loadCallback == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Create load callback failed");
        return false;
    }

    auto ret = systemAbilityMgr->LoadSystemAbility(QUICK_FIX_MGR_SERVICE_ID, loadCallback);
    if (ret != 0) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Load system ability %{public}d failed with %{public}d", QUICK_FIX_MGR_SERVICE_ID,
            ret);
        return false;
    }

    {
        std::unique_lock<std::mutex> lock(loadSaMutex_);
        auto waitStatus = loadSaCondation_.wait_for(lock, std::chrono::milliseconds(LOAD_SA_TIMEOUT_MS),
            [this]() {
                return loadSaFinished_;
            });
        if (!waitStatus) {
            TAG_LOGE(AAFwkTag::QUICKFIX, "Wait for load sa timeout");
            return false;
        }
    }

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 153:5
Spell: 
包含日志: 否
代码:
    if (systemAbilityMgr == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Failed to get SystemAbilityManager");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 154:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Failed to get SystemAbilityManager");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 159:5
Spell: 
包含日志: 否
代码:
    if (loadCallback == nullptr) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Create load callback failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 160:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Create load callback failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 165:5
Spell: 
包含日志: 否
代码:
    if (ret != 0) {
        TAG_LOGE(AAFwkTag::QUICKFIX, "Load system ability %{public}d failed with %{public}d", QUICK_FIX_MGR_SERVICE_ID,
            ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 166:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::QUICKFIX, "Load system ability %{public}d failed with %{public}d", QUICK_FIX_MGR_SERVICE_ID,
            ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 177:9
Spell: 
包含日志: 否
代码:
        if (!waitStatus) {
            TAG_LOGE(AAFwkTag::QUICKFIX, "Wait for load sa timeout");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 178:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::QUICKFIX, "Wait for load sa timeout");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 186:29
Spell: SetQuickFixMgr
包含日志: 否
代码:
void QuickFixManagerClient::SetQuickFixMgr(const sptr<IRemoteObject> &remoteObject)
{
    std::lock_guard<std::mutex> lock(mutex_);
    quickFixMgr_ = iface_cast<IQuickFixManager>(remoteObject);
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 192:47
Spell: GetQuickFixMgr
包含日志: 否
代码:
sptr<IQuickFixManager> QuickFixManagerClient::GetQuickFixMgr()
{
    std::lock_guard<std::mutex> lock(mutex_);
    return quickFixMgr_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 198:29
Spell: OnLoadSystemAbilitySuccess
包含日志: 否
代码:
void QuickFixManagerClient::OnLoadSystemAbilitySuccess(const sptr<IRemoteObject> &remoteObject)
{
    SetQuickFixMgr(remoteObject);
    std::unique_lock<std::mutex> lock(loadSaMutex_);
    loadSaFinished_ = true;
    loadSaCondation_.notify_one();
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 206:29
Spell: OnLoadSystemAbilityFail
包含日志: 否
代码:
void QuickFixManagerClient::OnLoadSystemAbilityFail()
{
    SetQuickFixMgr(nullptr);
    std::unique_lock<std::mutex> lock(loadSaMutex_);
    loadSaFinished_ = true;
    loadSaCondation_.notify_one();
}

--------------------------------------------------------------------------------
