代码块类型: Method Declaration
位置: 31:57
Spell: GetInstance
包含日志: 否
代码:
UriPermissionManagerClient& UriPermissionManagerClient::GetInstance()
{
    static UriPermissionManagerClient instance;
    return instance;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 37:33
Spell: GrantUriPermission
包含日志: 否
代码:
int UriPermissionManagerClient::GrantUriPermission(const Uri &uri, unsigned int flag,
    const std::string targetBundleName, int32_t appIndex, uint32_t initiatorTokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "targetBundleName:%{public}s", targetBundleName.c_str());
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->GrantUriPermission(uri, flag, targetBundleName, appIndex, initiatorTokenId);
    }
    return INNER_ERR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 40:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "targetBundleName:%{public}s", targetBundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 42:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->GrantUriPermission(uri, flag, targetBundleName, appIndex, initiatorTokenId);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 48:33
Spell: GrantUriPermission
包含日志: 否
代码:
int UriPermissionManagerClient::GrantUriPermission(const std::vector<Uri> &uriVec, unsigned int flag,
    const std::string targetBundleName, int32_t appIndex, uint32_t initiatorTokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "targetBundleName:%{public}s, uriVecSize:%{public}zu", targetBundleName.c_str(),
        uriVec.size());
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->GrantUriPermission(uriVec, flag, targetBundleName, appIndex, initiatorTokenId);
    }
    return INNER_ERR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 51:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "targetBundleName:%{public}s, uriVecSize:%{public}zu", targetBundleName.c_str(),
        uriVec.size());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 53:5
Spell: 
包含日志: 否
代码:
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 54:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 58:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->GrantUriPermission(uriVec, flag, targetBundleName, appIndex, initiatorTokenId);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 64:37
Spell: GrantUriPermissionPrivileged
包含日志: 否
代码:
int32_t UriPermissionManagerClient::GrantUriPermissionPrivileged(const std::vector<Uri> &uriVec, uint32_t flag,
    const std::string &targetBundleName, int32_t appIndex, uint32_t initiatorTokenId, int32_t hideSensitiveType)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "targetBundleName:%{public}s, uriVecSize:%{public}zu",
        targetBundleName.c_str(), uriVec.size());
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->GrantUriPermissionPrivileged(uriVec, flag, targetBundleName, appIndex,
            initiatorTokenId, hideSensitiveType);
    }
    return INNER_ERR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "targetBundleName:%{public}s, uriVecSize:%{public}zu",
        targetBundleName.c_str(), uriVec.size());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 69:5
Spell: 
包含日志: 否
代码:
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 70:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 74:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->GrantUriPermissionPrivileged(uriVec, flag, targetBundleName, appIndex,
            initiatorTokenId, hideSensitiveType);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 81:33
Spell: RevokeAllUriPermissions
包含日志: 否
代码:
int UriPermissionManagerClient::RevokeAllUriPermissions(const uint32_t tokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->RevokeAllUriPermissions(tokenId);
    }
    return INNER_ERR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 83:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 85:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->RevokeAllUriPermissions(tokenId);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 91:33
Spell: RevokeUriPermissionManually
包含日志: 否
代码:
int UriPermissionManagerClient::RevokeUriPermissionManually(const Uri &uri, const std::string bundleName,
    int32_t appIndex)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->RevokeUriPermissionManually(uri, bundleName, appIndex);
    }
    return INNER_ERR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 94:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 96:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->RevokeUriPermissionManually(uri, bundleName, appIndex);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 102:34
Spell: VerifyUriPermission
包含日志: 否
代码:
bool UriPermissionManagerClient::VerifyUriPermission(const Uri& uri, uint32_t flag, uint32_t tokenId)
{
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->VerifyUriPermission(uri, flag, tokenId);
    }
    return false;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 105:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->VerifyUriPermission(uri, flag, tokenId);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 111:47
Spell: CheckUriAuthorization
包含日志: 否
代码:
std::vector<bool> UriPermissionManagerClient::CheckUriAuthorization(const std::vector<std::string> &uriVec,
    uint32_t flag, uint32_t tokenId)
{
    uint32_t size = uriVec.size();
    TAG_LOGD(AAFwkTag::URIPERMMGR, "flag:%{public}u, tokenId:%{public}u", flag, tokenId);
    std::vector<bool> errorRes(size, false);
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return errorRes;
    }
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->CheckUriAuthorization(uriVec, flag, tokenId);
    }
    return errorRes;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 115:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "flag:%{public}u, tokenId:%{public}u", flag, tokenId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 117:5
Spell: 
包含日志: 否
代码:
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return errorRes;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 118:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 122:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->CheckUriAuthorization(uriVec, flag, tokenId);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 128:57
Spell: ConnectUriPermService
包含日志: 否
代码:
sptr<IUriPermissionManager> UriPermissionManagerClient::ConnectUriPermService()
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    auto uriPermMgr = GetUriPermMgr();
    if (uriPermMgr == nullptr) {
        if (!LoadUriPermService()) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "LoadUriPermService failed");
            return nullptr;
        }
        uriPermMgr = GetUriPermMgr();
        if (uriPermMgr == nullptr || uriPermMgr->AsObject() == nullptr) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "GetUriPermMgr failed");
            return nullptr;
        }
        const auto& onClearProxyCallback = [] {
            UriPermissionManagerClient::GetInstance().ClearProxy();
        };
        sptr<UpmsDeathRecipient> recipient(new UpmsDeathRecipient(onClearProxyCallback));
        uriPermMgr->AsObject()->AddDeathRecipient(recipient);
    }
    TAG_LOGD(AAFwkTag::URIPERMMGR, "End");
    return uriPermMgr;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 130:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 132:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr == nullptr) {
        if (!LoadUriPermService()) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "LoadUriPermService failed");
            return nullptr;
        }
        uriPermMgr = GetUriPermMgr();
        if (uriPermMgr == nullptr || uriPermMgr->AsObject() == nullptr) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "GetUriPermMgr failed");
            return nullptr;
        }
        const auto& onClearProxyCallback = [] {
            UriPermissionManagerClient::GetInstance().ClearProxy();
        };
        sptr<UpmsDeathRecipient> recipient(new UpmsDeathRecipient(onClearProxyCallback));
        uriPermMgr->AsObject()->AddDeathRecipient(recipient);
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 133:9
Spell: 
包含日志: 否
代码:
        if (!LoadUriPermService()) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "LoadUriPermService failed");
            return nullptr;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 134:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::URIPERMMGR, "LoadUriPermService failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 138:9
Spell: 
包含日志: 否
代码:
        if (uriPermMgr == nullptr || uriPermMgr->AsObject() == nullptr) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "GetUriPermMgr failed");
            return nullptr;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 139:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::URIPERMMGR, "GetUriPermMgr failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 148:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "End");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 152:34
Spell: LoadUriPermService
包含日志: 否
代码:
bool UriPermissionManagerClient::LoadUriPermService()
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    auto systemAbilityMgr = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
    if (systemAbilityMgr == nullptr) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "GetSystemAbilityManager failed");
        return false;
    }

    sptr<UriPermissionLoadCallback> loadCallback = new (std::nothrow) UriPermissionLoadCallback();
    if (loadCallback == nullptr) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Create loadCallback failed");
        return false;
    }

    auto ret = systemAbilityMgr->LoadSystemAbility(URI_PERMISSION_MGR_SERVICE_ID, loadCallback);
    if (ret != 0) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "LoadSystemAbility %{public}d failed:%{public}d",
            URI_PERMISSION_MGR_SERVICE_ID, ret);
        return false;
    }

    {
        std::unique_lock<std::mutex> lock(saLoadMutex_);
        auto waitStatus = loadSaVariable_.wait_for(lock, std::chrono::milliseconds(LOAD_SA_TIMEOUT_MS),
            [this]() {
                return saLoadFinished_;
            });
        if (!waitStatus) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "Wait for load sa timeout");
            return false;
        }
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 154:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 156:5
Spell: 
包含日志: 否
代码:
    if (systemAbilityMgr == nullptr) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "GetSystemAbilityManager failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 157:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "GetSystemAbilityManager failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 162:5
Spell: 
包含日志: 否
代码:
    if (loadCallback == nullptr) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Create loadCallback failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 163:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Create loadCallback failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 168:5
Spell: 
包含日志: 否
代码:
    if (ret != 0) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "LoadSystemAbility %{public}d failed:%{public}d",
            URI_PERMISSION_MGR_SERVICE_ID, ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 169:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "LoadSystemAbility %{public}d failed:%{public}d",
            URI_PERMISSION_MGR_SERVICE_ID, ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 180:9
Spell: 
包含日志: 否
代码:
        if (!waitStatus) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "Wait for load sa timeout");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 181:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::URIPERMMGR, "Wait for load sa timeout");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 188:57
Spell: GetUriPermMgr
包含日志: 否
代码:
sptr<IUriPermissionManager> UriPermissionManagerClient::GetUriPermMgr()
{
    std::lock_guard<std::mutex> lock(mutex_);
    return uriPermMgr_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 194:34
Spell: SetUriPermMgr
包含日志: 否
代码:
void UriPermissionManagerClient::SetUriPermMgr(const sptr<IRemoteObject> &remoteObject)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    std::lock_guard<std::mutex> lock(mutex_);
    uriPermMgr_ = iface_cast<IUriPermissionManager>(remoteObject);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 196:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 201:34
Spell: OnLoadSystemAbilitySuccess
包含日志: 否
代码:
void UriPermissionManagerClient::OnLoadSystemAbilitySuccess(const sptr<IRemoteObject> &remoteObject)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    SetUriPermMgr(remoteObject);
    std::unique_lock<std::mutex> lock(saLoadMutex_);
    saLoadFinished_ = true;
    loadSaVariable_.notify_one();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 203:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 210:34
Spell: OnLoadSystemAbilityFail
包含日志: 否
代码:
void UriPermissionManagerClient::OnLoadSystemAbilityFail()
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    SetUriPermMgr(nullptr);
    std::unique_lock<std::mutex> lock(saLoadMutex_);
    saLoadFinished_ = true;
    loadSaVariable_.notify_one();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 212:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 219:34
Spell: ClearProxy
包含日志: 否
代码:
void UriPermissionManagerClient::ClearProxy()
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    {
        std::lock_guard<std::mutex> lock(mutex_);
        uriPermMgr_ = nullptr;
    }
    std::unique_lock<std::mutex> lock(saLoadMutex_);
    saLoadFinished_ = false;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 221:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 230:54
Spell: OnRemoteDied
包含日志: 否
代码:
void UriPermissionManagerClient::UpmsDeathRecipient::OnRemoteDied([[maybe_unused]] const wptr<IRemoteObject>& remote)
{
    TAG_LOGE(AAFwkTag::URIPERMMGR, "call");
    proxy_();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 232:5
Spell: 
包含日志: 否
代码:
    TAG_LOGE(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 236:37
Spell: ClearPermissionTokenByMap
包含日志: 否
代码:
int32_t UriPermissionManagerClient::ClearPermissionTokenByMap(const uint32_t tokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    auto uriPermMgr = ConnectUriPermService();
    if (uriPermMgr) {
        return uriPermMgr->ClearPermissionTokenByMap(tokenId);
    }
    return INNER_ERR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 238:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 240:5
Spell: 
包含日志: 否
代码:
    if (uriPermMgr) {
        return uriPermMgr->ClearPermissionTokenByMap(tokenId);
    }

--------------------------------------------------------------------------------
