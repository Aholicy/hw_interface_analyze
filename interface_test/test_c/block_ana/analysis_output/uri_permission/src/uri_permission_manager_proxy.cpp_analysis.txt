代码块类型: Method Declaration
位置: 31:32
Spell: GrantUriPermission
包含日志: 否
代码:
int UriPermissionManagerProxy::GrantUriPermission(const Uri &uri, unsigned int flag,
    const std::string targetBundleName, int32_t appIndex, uint32_t initiatorTokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }
    if (!data.WriteParcelable(&uri)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return INNER_ERR;
    }
    if (!data.WriteString(targetBundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");
        return INNER_ERR;
    }
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(initiatorTokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");
        return INNER_ERR;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_GRANT_URI_PERMISSION, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);
        return INNER_ERR;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 34:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 36:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 37:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 40:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteParcelable(&uri)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 41:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 44:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 45:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 48:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(targetBundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 49:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 52:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 53:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 56:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(initiatorTokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 57:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 63:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 64:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 70:32
Spell: GrantUriPermission
包含日志: 否
代码:
int UriPermissionManagerProxy::GrantUriPermission(const std::vector<Uri> &uriVec, unsigned int flag,
    const std::string targetBundleName, int32_t appIndex, uint32_t initiatorTokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(uriVec.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return INNER_ERR;
    }
    for (const auto &uri : uriVec) {
        if (!data.WriteParcelable(&uri)) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
            return INNER_ERR;
        }
    }
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return INNER_ERR;
    }
    if (!data.WriteString(targetBundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");
        return INNER_ERR;
    }
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(initiatorTokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");
        return INNER_ERR;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_BATCH_GRANT_URI_PERMISSION, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);
        return INNER_ERR;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 73:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 74:5
Spell: 
包含日志: 否
代码:
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 75:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 79:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 80:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 83:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(uriVec.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 84:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 93:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 94:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 97:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(targetBundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 98:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 101:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 102:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 105:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(initiatorTokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 106:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 112:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 113:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 119:36
Spell: GrantUriPermissionPrivileged
包含日志: 否
代码:
int32_t UriPermissionManagerProxy::GrantUriPermissionPrivileged(const std::vector<Uri> &uriVec, uint32_t flag,
    const std::string &targetBundleName, int32_t appIndex, uint32_t initiatorTokenId, int32_t hideSensitiveType)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(uriVec.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return INNER_ERR;
    }
    for (const auto &uri : uriVec) {
        if (!data.WriteParcelable(&uri)) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
            return INNER_ERR;
        }
    }
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return INNER_ERR;
    }
    if (!data.WriteString(targetBundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");
        return INNER_ERR;
    }
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(initiatorTokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");
        return INNER_ERR;
    }
    if (!data.WriteInt32(hideSensitiveType)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write hideSensitiveType failed");
        return INNER_ERR;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_GRANT_URI_PERMISSION_PRIVILEGED, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);
        return INNER_ERR;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 122:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 123:5
Spell: 
包含日志: 否
代码:
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 124:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 128:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 129:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 132:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(uriVec.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 133:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 142:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 143:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 146:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(targetBundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 147:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write targetBundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 150:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 151:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 154:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(initiatorTokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 155:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write initiatorTokenId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 158:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(hideSensitiveType)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write hideSensitiveType failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 159:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write hideSensitiveType failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 165:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 166:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed, error:%{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 172:32
Spell: RevokeAllUriPermissions
包含日志: 否
代码:
int UriPermissionManagerProxy::RevokeAllUriPermissions(const uint32_t tokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write AccessTokenID failed");
        return INNER_ERR;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_REVOKE_ALL_URI_PERMISSION, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return INNER_ERR;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 174:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 176:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 177:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 180:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write AccessTokenID failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 181:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write AccessTokenID failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 187:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 188:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 194:32
Spell: RevokeUriPermissionManually
包含日志: 否
代码:
int UriPermissionManagerProxy::RevokeUriPermissionManually(const Uri &uri, const std::string bundleName,
    int32_t appIndex)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }
    if (!data.WriteParcelable(&uri)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
        return INNER_ERR;
    }
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write bundleName failed");
        return INNER_ERR;
    }
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_REVOKE_URI_PERMISSION_MANUALLY, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return INNER_ERR;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 197:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 199:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 200:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 203:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteParcelable(&uri)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 204:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 207:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write bundleName failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 208:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write bundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 211:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 212:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 218:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 219:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 225:33
Spell: VerifyUriPermission
包含日志: 否
代码:
bool UriPermissionManagerProxy::VerifyUriPermission(const Uri& uri, uint32_t flag, uint32_t tokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return false;
    }
    if (!data.WriteParcelable(&uri)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
        return false;
    }
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return false;
    }
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write tokenId failed");
        return false;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_VERIFY_URI_PERMISSION, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return false;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 227:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 229:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 230:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 233:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteParcelable(&uri)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 234:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 237:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 238:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 241:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write tokenId failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 242:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write tokenId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 248:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 249:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 255:46
Spell: CheckUriAuthorization
包含日志: 否
代码:
std::vector<bool> UriPermissionManagerProxy::CheckUriAuthorization(const std::vector<std::string> &uriVec,
    uint32_t flag, uint32_t tokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    std::vector<bool> result(uriVec.size(), false);
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return result;
    }
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return result;
    }
    if (!data.WriteUint32(uriVec.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return result;
    }
    for (const auto &uri : uriVec) {
        if (!data.WriteString(uri)) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uri failed");
            return result;
        }
    }
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return result;
    }
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write tokenId failed");
        return result;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_CHECK_URI_AUTHORIZATION, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest error:%{public}d", error);
        return result;
    }
    auto size = reply.ReadUint32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Reply size too large");
        return result;
    }
    for (auto i = 0; i < static_cast<int32_t>(size); i++) {
        result[i] = reply.ReadBool();
    }
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 258:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 260:5
Spell: 
包含日志: 否
代码:
    if (uriVec.empty() || uriVec.size() > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 261:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 265:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 266:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 269:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(uriVec.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 270:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 279:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(flag)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 280:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write flag failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 283:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write tokenId failed");
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 284:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write tokenId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 290:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest error:%{public}d", error);
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 291:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest error:%{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 295:5
Spell: 
包含日志: 否
代码:
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Reply size too large");
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 296:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Reply size too large");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 305:36
Spell: SendTransactCmd
包含日志: 否
代码:
int32_t UriPermissionManagerProxy::SendTransactCmd(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "remoteObject null");
        return ERR_NULL_OBJECT;
    }

    int32_t ret = remote->SendRequest(code, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed. code:%{public}d, ret:%{public}d", code, ret);
        return ret;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 309:5
Spell: 
包含日志: 否
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "remoteObject null");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 310:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "remoteObject null");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 315:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed. code:%{public}d, ret:%{public}d", code, ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 316:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest failed. code:%{public}d, ret:%{public}d", code, ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 322:32
Spell: ClearPermissionTokenByMap
包含日志: 否
代码:
int UriPermissionManagerProxy::ClearPermissionTokenByMap(const uint32_t tokenId)
{
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");
    MessageParcel data;
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write AccessTokenID failed");
        return INNER_ERR;
    }
    MessageParcel reply;
    MessageOption option;
    int error = SendTransactCmd(UriPermMgrCmd::ON_CLEAR_PERMISSION_TOKEN_BY_MAP, data, reply, option);
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return INNER_ERR;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 324:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::URIPERMMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 326:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(IUriPermissionManager::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 327:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write interfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 330:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(tokenId)) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write AccessTokenID failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 331:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write AccessTokenID failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 337:5
Spell: 
包含日志: 否
代码:
    if (error != ERR_OK) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 338:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "SendRequest fail, error:%{public}d", error);

--------------------------------------------------------------------------------
