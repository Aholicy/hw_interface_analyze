代码块类型: Namespace Declaration
位置: 22:11
Spell: OHOS
包含日志: 否
代码:
namespace OHOS::AbilityRuntime::WantAgent {
WantAgentInfo::WantAgentInfo() : WantAgentInfo(nullptr)
{}

WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    WantAgentConstant::Flags flag, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    flags_.push_back(flag);
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    const std::vector<WantAgentConstant::Flags> &flags, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    if (!flags.empty()) {
        flags_.insert(flags_.end(), flags.begin(), flags.end());
    }
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

WantAgentInfo::WantAgentInfo(const std::shared_ptr<WantAgentInfo> &paramInfo)
{
    if (paramInfo != nullptr) {
        requestCode_ = paramInfo->GetRequestCode();
        operationType_ = paramInfo->GetOperationType();
        std::vector<WantAgentConstant::Flags> tempFlags = paramInfo->GetFlags();
        flags_.insert(flags_.end(), tempFlags.begin(), tempFlags.end());
        if (!paramInfo->GetWants().empty()) {
            for (auto want : paramInfo->GetWants()) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
        if (paramInfo->GetExtraInfo() != nullptr) {
            extraInfo_ = std::make_shared<WantParams>(*paramInfo->GetExtraInfo());
        }
    }
}

int WantAgentInfo::GetRequestCode() const
{
    return requestCode_;
}

WantAgentConstant::OperationType WantAgentInfo::GetOperationType() const
{
    return operationType_;
}

std::vector<WantAgentConstant::Flags> WantAgentInfo::GetFlags() const
{
    return flags_;
}

std::vector<std::shared_ptr<Want>> WantAgentInfo::GetWants() const
{
    return wants_;
}

std::shared_ptr<WantParams> WantAgentInfo::GetExtraInfo() const
{
    return extraInfo_;
}
}  // namespace OHOS::AbilityRuntime::WantAgent

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:17
Spell: AbilityRuntime
包含日志: 否
代码:
namespace OHOS::AbilityRuntime::WantAgent {
WantAgentInfo::WantAgentInfo() : WantAgentInfo(nullptr)
{}

WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    WantAgentConstant::Flags flag, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    flags_.push_back(flag);
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    const std::vector<WantAgentConstant::Flags> &flags, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    if (!flags.empty()) {
        flags_.insert(flags_.end(), flags.begin(), flags.end());
    }
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

WantAgentInfo::WantAgentInfo(const std::shared_ptr<WantAgentInfo> &paramInfo)
{
    if (paramInfo != nullptr) {
        requestCode_ = paramInfo->GetRequestCode();
        operationType_ = paramInfo->GetOperationType();
        std::vector<WantAgentConstant::Flags> tempFlags = paramInfo->GetFlags();
        flags_.insert(flags_.end(), tempFlags.begin(), tempFlags.end());
        if (!paramInfo->GetWants().empty()) {
            for (auto want : paramInfo->GetWants()) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
        if (paramInfo->GetExtraInfo() != nullptr) {
            extraInfo_ = std::make_shared<WantParams>(*paramInfo->GetExtraInfo());
        }
    }
}

int WantAgentInfo::GetRequestCode() const
{
    return requestCode_;
}

WantAgentConstant::OperationType WantAgentInfo::GetOperationType() const
{
    return operationType_;
}

std::vector<WantAgentConstant::Flags> WantAgentInfo::GetFlags() const
{
    return flags_;
}

std::vector<std::shared_ptr<Want>> WantAgentInfo::GetWants() const
{
    return wants_;
}

std::shared_ptr<WantParams> WantAgentInfo::GetExtraInfo() const
{
    return extraInfo_;
}
}  // namespace OHOS::AbilityRuntime::WantAgent

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:33
Spell: WantAgent
包含日志: 否
代码:
namespace OHOS::AbilityRuntime::WantAgent {
WantAgentInfo::WantAgentInfo() : WantAgentInfo(nullptr)
{}

WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    WantAgentConstant::Flags flag, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    flags_.push_back(flag);
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    const std::vector<WantAgentConstant::Flags> &flags, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    if (!flags.empty()) {
        flags_.insert(flags_.end(), flags.begin(), flags.end());
    }
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

WantAgentInfo::WantAgentInfo(const std::shared_ptr<WantAgentInfo> &paramInfo)
{
    if (paramInfo != nullptr) {
        requestCode_ = paramInfo->GetRequestCode();
        operationType_ = paramInfo->GetOperationType();
        std::vector<WantAgentConstant::Flags> tempFlags = paramInfo->GetFlags();
        flags_.insert(flags_.end(), tempFlags.begin(), tempFlags.end());
        if (!paramInfo->GetWants().empty()) {
            for (auto want : paramInfo->GetWants()) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
        if (paramInfo->GetExtraInfo() != nullptr) {
            extraInfo_ = std::make_shared<WantParams>(*paramInfo->GetExtraInfo());
        }
    }
}

int WantAgentInfo::GetRequestCode() const
{
    return requestCode_;
}

WantAgentConstant::OperationType WantAgentInfo::GetOperationType() const
{
    return operationType_;
}

std::vector<WantAgentConstant::Flags> WantAgentInfo::GetFlags() const
{
    return flags_;
}

std::vector<std::shared_ptr<Want>> WantAgentInfo::GetWants() const
{
    return wants_;
}

std::shared_ptr<WantParams> WantAgentInfo::GetExtraInfo() const
{
    return extraInfo_;
}
}  // namespace OHOS::AbilityRuntime::WantAgent

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 23:16
Spell: WantAgentInfo
包含日志: 否
代码:
WantAgentInfo::WantAgentInfo() : WantAgentInfo(nullptr)
{}

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 26:16
Spell: WantAgentInfo
包含日志: 否
代码:
WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    WantAgentConstant::Flags flag, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    flags_.push_back(flag);
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 33:5
Spell: 
包含日志: 否
代码:
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 40:5
Spell: 
包含日志: 否
代码:
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 45:16
Spell: WantAgentInfo
包含日志: 否
代码:
WantAgentInfo::WantAgentInfo(int requestCode, const WantAgentConstant::OperationType &operationType,
    const std::vector<WantAgentConstant::Flags> &flags, std::vector<std::shared_ptr<Want>> &wants,
    const std::shared_ptr<WantParams> &extraInfo)
{
    requestCode_ = requestCode;
    operationType_ = operationType;
    if (!flags.empty()) {
        flags_.insert(flags_.end(), flags.begin(), flags.end());
    }
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 51:5
Spell: 
包含日志: 否
代码:
    if (!flags.empty()) {
        flags_.insert(flags_.end(), flags.begin(), flags.end());
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 54:5
Spell: 
包含日志: 否
代码:
    if (!wants.empty()) {
        for (auto want : wants) {
            if (want != nullptr) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 61:5
Spell: 
包含日志: 否
代码:
    if (extraInfo != nullptr) {
        extraInfo_ = std::make_shared<WantParams>(*extraInfo);
    }

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 66:16
Spell: WantAgentInfo
包含日志: 否
代码:
WantAgentInfo::WantAgentInfo(const std::shared_ptr<WantAgentInfo> &paramInfo)
{
    if (paramInfo != nullptr) {
        requestCode_ = paramInfo->GetRequestCode();
        operationType_ = paramInfo->GetOperationType();
        std::vector<WantAgentConstant::Flags> tempFlags = paramInfo->GetFlags();
        flags_.insert(flags_.end(), tempFlags.begin(), tempFlags.end());
        if (!paramInfo->GetWants().empty()) {
            for (auto want : paramInfo->GetWants()) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
        if (paramInfo->GetExtraInfo() != nullptr) {
            extraInfo_ = std::make_shared<WantParams>(*paramInfo->GetExtraInfo());
        }
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 68:5
Spell: 
包含日志: 否
代码:
    if (paramInfo != nullptr) {
        requestCode_ = paramInfo->GetRequestCode();
        operationType_ = paramInfo->GetOperationType();
        std::vector<WantAgentConstant::Flags> tempFlags = paramInfo->GetFlags();
        flags_.insert(flags_.end(), tempFlags.begin(), tempFlags.end());
        if (!paramInfo->GetWants().empty()) {
            for (auto want : paramInfo->GetWants()) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }
        if (paramInfo->GetExtraInfo() != nullptr) {
            extraInfo_ = std::make_shared<WantParams>(*paramInfo->GetExtraInfo());
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 73:9
Spell: 
包含日志: 否
代码:
        if (!paramInfo->GetWants().empty()) {
            for (auto want : paramInfo->GetWants()) {
                wants_.push_back(std::make_shared<Want>(*want));
            }
        }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 78:9
Spell: 
包含日志: 否
代码:
        if (paramInfo->GetExtraInfo() != nullptr) {
            extraInfo_ = std::make_shared<WantParams>(*paramInfo->GetExtraInfo());
        }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 84:20
Spell: GetRequestCode
包含日志: 否
代码:
int WantAgentInfo::GetRequestCode() const
{
    return requestCode_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 89:49
Spell: GetOperationType
包含日志: 否
代码:
WantAgentConstant::OperationType WantAgentInfo::GetOperationType() const
{
    return operationType_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 94:54
Spell: GetFlags
包含日志: 否
代码:
std::vector<WantAgentConstant::Flags> WantAgentInfo::GetFlags() const
{
    return flags_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 99:51
Spell: GetWants
包含日志: 否
代码:
std::vector<std::shared_ptr<Want>> WantAgentInfo::GetWants() const
{
    return wants_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 104:44
Spell: GetExtraInfo
包含日志: 否
代码:
std::shared_ptr<WantParams> WantAgentInfo::GetExtraInfo() const
{
    return extraInfo_;
}

--------------------------------------------------------------------------------
