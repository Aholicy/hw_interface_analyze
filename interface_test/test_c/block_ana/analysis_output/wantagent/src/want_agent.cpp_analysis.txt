代码块类型: Namespace Declaration
位置: 19:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS::AbilityRuntime::WantAgent {
WantAgent::WantAgent(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

std::shared_ptr<PendingWant> WantAgent::GetPendingWant()
{
    return pendingWant_;
}

void WantAgent::SetPendingWant(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

bool WantAgent::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteParcelable(pendingWant_.get())) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "parcel WriteString failed");
        return false;
    }

    return true;
}

WantAgent *WantAgent::Unmarshalling(Parcel &parcel)
{
    WantAgent *agent = new (std::nothrow) WantAgent();
    if (agent == nullptr) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "read from parcel failed");
        return nullptr;
    }
    std::shared_ptr<PendingWant> pendingWant(parcel.ReadParcelable<PendingWant>());
    agent->SetPendingWant(pendingWant);

    return agent;
}
}  // namespace OHOS::AbilityRuntime::WantAgent

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 19:17
Spell: AbilityRuntime
包含日志: 是
代码:
namespace OHOS::AbilityRuntime::WantAgent {
WantAgent::WantAgent(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

std::shared_ptr<PendingWant> WantAgent::GetPendingWant()
{
    return pendingWant_;
}

void WantAgent::SetPendingWant(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

bool WantAgent::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteParcelable(pendingWant_.get())) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "parcel WriteString failed");
        return false;
    }

    return true;
}

WantAgent *WantAgent::Unmarshalling(Parcel &parcel)
{
    WantAgent *agent = new (std::nothrow) WantAgent();
    if (agent == nullptr) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "read from parcel failed");
        return nullptr;
    }
    std::shared_ptr<PendingWant> pendingWant(parcel.ReadParcelable<PendingWant>());
    agent->SetPendingWant(pendingWant);

    return agent;
}
}  // namespace OHOS::AbilityRuntime::WantAgent

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 19:33
Spell: WantAgent
包含日志: 是
代码:
namespace OHOS::AbilityRuntime::WantAgent {
WantAgent::WantAgent(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

std::shared_ptr<PendingWant> WantAgent::GetPendingWant()
{
    return pendingWant_;
}

void WantAgent::SetPendingWant(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

bool WantAgent::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteParcelable(pendingWant_.get())) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "parcel WriteString failed");
        return false;
    }

    return true;
}

WantAgent *WantAgent::Unmarshalling(Parcel &parcel)
{
    WantAgent *agent = new (std::nothrow) WantAgent();
    if (agent == nullptr) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "read from parcel failed");
        return nullptr;
    }
    std::shared_ptr<PendingWant> pendingWant(parcel.ReadParcelable<PendingWant>());
    agent->SetPendingWant(pendingWant);

    return agent;
}
}  // namespace OHOS::AbilityRuntime::WantAgent

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 20:12
Spell: WantAgent
包含日志: 否
代码:
WantAgent::WantAgent(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 25:41
Spell: GetPendingWant
包含日志: 否
代码:
std::shared_ptr<PendingWant> WantAgent::GetPendingWant()
{
    return pendingWant_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 30:17
Spell: SetPendingWant
包含日志: 否
代码:
void WantAgent::SetPendingWant(const std::shared_ptr<PendingWant> &pendingWant)
{
    pendingWant_ = pendingWant;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 35:17
Spell: Marshalling
包含日志: 是
代码:
bool WantAgent::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteParcelable(pendingWant_.get())) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "parcel WriteString failed");
        return false;
    }

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 37:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteParcelable(pendingWant_.get())) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "parcel WriteString failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 38:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::WANTAGENT, "parcel WriteString failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 45:23
Spell: Unmarshalling
包含日志: 是
代码:
WantAgent *WantAgent::Unmarshalling(Parcel &parcel)
{
    WantAgent *agent = new (std::nothrow) WantAgent();
    if (agent == nullptr) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "read from parcel failed");
        return nullptr;
    }
    std::shared_ptr<PendingWant> pendingWant(parcel.ReadParcelable<PendingWant>());
    agent->SetPendingWant(pendingWant);

    return agent;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 48:5
Spell: 
包含日志: 是
代码:
    if (agent == nullptr) {
        TAG_LOGE(AAFwkTag::WANTAGENT, "read from parcel failed");
        return nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 49:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::WANTAGENT, "read from parcel failed");

--------------------------------------------------------------------------------
