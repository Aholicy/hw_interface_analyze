代码块类型: Namespace Declaration
位置: 27:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AAFwk {
#define CHECK_POINTER_RETURN_NOT_CONNECTED(object)   \
    if (!object) {                                   \
        TAG_LOGE(AAFwkTag::EXTMGR, "null proxy"); \
        return ABILITY_SERVICE_NOT_CONNECTED;        \
    }

ExtensionManagerClient& ExtensionManagerClient::GetInstance()
{
    static ExtensionManagerClient instance;
    return instance;
}

sptr<IExtensionManager> ExtensionManagerClient::GetExtensionManager()
{
    std::lock_guard<std::mutex> lock(mutex_);
    if (proxy_ == nullptr) {
        Connect();
    }

    return proxy_;
}

void ExtensionManagerClient::Connect()
{
    auto systemManager = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
    if (systemManager == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Get SAMgr failed");
        return;
    }
    auto remoteObj = systemManager->GetSystemAbility(ABILITY_MGR_SERVICE_ID);
    if (remoteObj == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect AMS failed");
        return;
    }

    deathRecipient_ = new ExtensionMgrDeathRecipient();
    if (remoteObj->IsProxyObject() && !remoteObj->AddDeathRecipient(deathRecipient_)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "AddDeathRecipient failed");
        return;
    }

    proxy_ = sptr<IExtensionManager>(new ExtensionManagerProxy(remoteObj));
    TAG_LOGD(AAFwkTag::EXTMGR, "Connect AMS success");
}

void ExtensionManagerClient::ResetProxy(const wptr<IRemoteObject>& remote)
{
    std::lock_guard<std::mutex> lock(mutex_);
    if (proxy_ == nullptr) {
        TAG_LOGI(AAFwkTag::EXTMGR, "null proxy_, no need reset");
        return;
    }

    auto serviceRemote = proxy_->AsObject();
    if (serviceRemote != nullptr && serviceRemote == remote.promote()) {
        serviceRemote->RemoveDeathRecipient(deathRecipient_);
        proxy_ = nullptr;
    }
}

void ExtensionManagerClient::ExtensionMgrDeathRecipient::OnRemoteDied(const wptr<IRemoteObject>& remote)
{
    TAG_LOGI(AAFwkTag::EXTMGR, "called");
    ExtensionManagerClient::GetInstance().ResetProxy(remote);
}

ErrCode ExtensionManagerClient::ConnectServiceExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGD(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(want, connect, nullptr, AppExecFwk::ExtensionAbilityType::SERVICE,
        userId, false);
}

ErrCode ExtensionManagerClient::ConnectServiceExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, const sptr<IRemoteObject> &callerToken, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(
        want, connect, callerToken, AppExecFwk::ExtensionAbilityType::SERVICE, userId, false);
}

ErrCode ExtensionManagerClient::ConnectEnterpriseAdminExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, const sptr<IRemoteObject> &callerToken, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(
        want, connect, callerToken, AppExecFwk::ExtensionAbilityType::ENTERPRISE_ADMIN, userId, true);
}

ErrCode ExtensionManagerClient::ConnectExtensionAbility(const Want &want, const sptr<IRemoteObject> &connect,
    int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }

    TAG_LOGI(AAFwkTag::EXTMGR, "bundleName: %{public}s, abilityName: %{public}s, userId: %{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(want, connect, nullptr, AppExecFwk::ExtensionAbilityType::UNSPECIFIED, userId);
}

ErrCode ExtensionManagerClient::DisconnectAbility(const sptr<IRemoteObject> &connect)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    CHECK_POINTER_RETURN_NOT_CONNECTED(abms);
    TAG_LOGI(AAFwkTag::EXTMGR, "call");
    return abms->DisconnectAbility(connect);
}

}  // namespace AAFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 28:11
Spell: AAFwk
包含日志: 是
代码:
namespace AAFwk {
#define CHECK_POINTER_RETURN_NOT_CONNECTED(object)   \
    if (!object) {                                   \
        TAG_LOGE(AAFwkTag::EXTMGR, "null proxy"); \
        return ABILITY_SERVICE_NOT_CONNECTED;        \
    }

ExtensionManagerClient& ExtensionManagerClient::GetInstance()
{
    static ExtensionManagerClient instance;
    return instance;
}

sptr<IExtensionManager> ExtensionManagerClient::GetExtensionManager()
{
    std::lock_guard<std::mutex> lock(mutex_);
    if (proxy_ == nullptr) {
        Connect();
    }

    return proxy_;
}

void ExtensionManagerClient::Connect()
{
    auto systemManager = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
    if (systemManager == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Get SAMgr failed");
        return;
    }
    auto remoteObj = systemManager->GetSystemAbility(ABILITY_MGR_SERVICE_ID);
    if (remoteObj == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect AMS failed");
        return;
    }

    deathRecipient_ = new ExtensionMgrDeathRecipient();
    if (remoteObj->IsProxyObject() && !remoteObj->AddDeathRecipient(deathRecipient_)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "AddDeathRecipient failed");
        return;
    }

    proxy_ = sptr<IExtensionManager>(new ExtensionManagerProxy(remoteObj));
    TAG_LOGD(AAFwkTag::EXTMGR, "Connect AMS success");
}

void ExtensionManagerClient::ResetProxy(const wptr<IRemoteObject>& remote)
{
    std::lock_guard<std::mutex> lock(mutex_);
    if (proxy_ == nullptr) {
        TAG_LOGI(AAFwkTag::EXTMGR, "null proxy_, no need reset");
        return;
    }

    auto serviceRemote = proxy_->AsObject();
    if (serviceRemote != nullptr && serviceRemote == remote.promote()) {
        serviceRemote->RemoveDeathRecipient(deathRecipient_);
        proxy_ = nullptr;
    }
}

void ExtensionManagerClient::ExtensionMgrDeathRecipient::OnRemoteDied(const wptr<IRemoteObject>& remote)
{
    TAG_LOGI(AAFwkTag::EXTMGR, "called");
    ExtensionManagerClient::GetInstance().ResetProxy(remote);
}

ErrCode ExtensionManagerClient::ConnectServiceExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGD(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(want, connect, nullptr, AppExecFwk::ExtensionAbilityType::SERVICE,
        userId, false);
}

ErrCode ExtensionManagerClient::ConnectServiceExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, const sptr<IRemoteObject> &callerToken, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(
        want, connect, callerToken, AppExecFwk::ExtensionAbilityType::SERVICE, userId, false);
}

ErrCode ExtensionManagerClient::ConnectEnterpriseAdminExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, const sptr<IRemoteObject> &callerToken, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(
        want, connect, callerToken, AppExecFwk::ExtensionAbilityType::ENTERPRISE_ADMIN, userId, true);
}

ErrCode ExtensionManagerClient::ConnectExtensionAbility(const Want &want, const sptr<IRemoteObject> &connect,
    int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }

    TAG_LOGI(AAFwkTag::EXTMGR, "bundleName: %{public}s, abilityName: %{public}s, userId: %{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(want, connect, nullptr, AppExecFwk::ExtensionAbilityType::UNSPECIFIED, userId);
}

ErrCode ExtensionManagerClient::DisconnectAbility(const sptr<IRemoteObject> &connect)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    CHECK_POINTER_RETURN_NOT_CONNECTED(abms);
    TAG_LOGI(AAFwkTag::EXTMGR, "call");
    return abms->DisconnectAbility(connect);
}

}  // namespace AAFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 35:49
Spell: GetInstance
包含日志: 否
代码:
ExtensionManagerClient& ExtensionManagerClient::GetInstance()
{
    static ExtensionManagerClient instance;
    return instance;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 41:49
Spell: GetExtensionManager
包含日志: 否
代码:
sptr<IExtensionManager> ExtensionManagerClient::GetExtensionManager()
{
    std::lock_guard<std::mutex> lock(mutex_);
    if (proxy_ == nullptr) {
        Connect();
    }

    return proxy_;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 44:5
Spell: 
包含日志: 否
代码:
    if (proxy_ == nullptr) {
        Connect();
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 51:30
Spell: Connect
包含日志: 是
代码:
void ExtensionManagerClient::Connect()
{
    auto systemManager = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
    if (systemManager == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Get SAMgr failed");
        return;
    }
    auto remoteObj = systemManager->GetSystemAbility(ABILITY_MGR_SERVICE_ID);
    if (remoteObj == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect AMS failed");
        return;
    }

    deathRecipient_ = new ExtensionMgrDeathRecipient();
    if (remoteObj->IsProxyObject() && !remoteObj->AddDeathRecipient(deathRecipient_)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "AddDeathRecipient failed");
        return;
    }

    proxy_ = sptr<IExtensionManager>(new ExtensionManagerProxy(remoteObj));
    TAG_LOGD(AAFwkTag::EXTMGR, "Connect AMS success");
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 54:5
Spell: 
包含日志: 是
代码:
    if (systemManager == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Get SAMgr failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 55:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Get SAMgr failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 59:5
Spell: 
包含日志: 是
代码:
    if (remoteObj == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect AMS failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 60:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect AMS failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 65:5
Spell: 
包含日志: 是
代码:
    if (remoteObj->IsProxyObject() && !remoteObj->AddDeathRecipient(deathRecipient_)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "AddDeathRecipient failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 66:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "AddDeathRecipient failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 71:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::EXTMGR, "Connect AMS success");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 74:30
Spell: ResetProxy
包含日志: 是
代码:
void ExtensionManagerClient::ResetProxy(const wptr<IRemoteObject>& remote)
{
    std::lock_guard<std::mutex> lock(mutex_);
    if (proxy_ == nullptr) {
        TAG_LOGI(AAFwkTag::EXTMGR, "null proxy_, no need reset");
        return;
    }

    auto serviceRemote = proxy_->AsObject();
    if (serviceRemote != nullptr && serviceRemote == remote.promote()) {
        serviceRemote->RemoveDeathRecipient(deathRecipient_);
        proxy_ = nullptr;
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 77:5
Spell: 
包含日志: 是
代码:
    if (proxy_ == nullptr) {
        TAG_LOGI(AAFwkTag::EXTMGR, "null proxy_, no need reset");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 78:9
Spell: 
包含日志: 是
代码:
        TAG_LOGI(AAFwkTag::EXTMGR, "null proxy_, no need reset");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 83:5
Spell: 
包含日志: 否
代码:
    if (serviceRemote != nullptr && serviceRemote == remote.promote()) {
        serviceRemote->RemoveDeathRecipient(deathRecipient_);
        proxy_ = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 89:58
Spell: OnRemoteDied
包含日志: 是
代码:
void ExtensionManagerClient::ExtensionMgrDeathRecipient::OnRemoteDied(const wptr<IRemoteObject>& remote)
{
    TAG_LOGI(AAFwkTag::EXTMGR, "called");
    ExtensionManagerClient::GetInstance().ResetProxy(remote);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 91:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::EXTMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 95:33
Spell: ConnectServiceExtensionAbility
包含日志: 是
代码:
ErrCode ExtensionManagerClient::ConnectServiceExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGD(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(want, connect, nullptr, AppExecFwk::ExtensionAbilityType::SERVICE,
        userId, false);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 100:5
Spell: 
包含日志: 是
代码:
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 101:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 105:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 111:33
Spell: ConnectServiceExtensionAbility
包含日志: 是
代码:
ErrCode ExtensionManagerClient::ConnectServiceExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, const sptr<IRemoteObject> &callerToken, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(
        want, connect, callerToken, AppExecFwk::ExtensionAbilityType::SERVICE, userId, false);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 116:5
Spell: 
包含日志: 是
代码:
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 117:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 121:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 127:33
Spell: ConnectEnterpriseAdminExtensionAbility
包含日志: 是
代码:
ErrCode ExtensionManagerClient::ConnectEnterpriseAdminExtensionAbility(const Want &want,
    const sptr<IRemoteObject> &connect, const sptr<IRemoteObject> &callerToken, int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(
        want, connect, callerToken, AppExecFwk::ExtensionAbilityType::ENTERPRISE_ADMIN, userId, true);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 132:5
Spell: 
包含日志: 是
代码:
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 133:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s.",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 137:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::EXTMGR, "name:%{public}s %{public}s, userId:%{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 143:33
Spell: ConnectExtensionAbility
包含日志: 是
代码:
ErrCode ExtensionManagerClient::ConnectExtensionAbility(const Want &want, const sptr<IRemoteObject> &connect,
    int32_t userId)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }

    TAG_LOGI(AAFwkTag::EXTMGR, "bundleName: %{public}s, abilityName: %{public}s, userId: %{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);
    return abms->ConnectAbilityCommon(want, connect, nullptr, AppExecFwk::ExtensionAbilityType::UNSPECIFIED, userId);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 148:5
Spell: 
包含日志: 是
代码:
    if (abms == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());
        return ABILITY_SERVICE_NOT_CONNECTED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 149:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Connect failed, bundleName:%{public}s, abilityName:%{public}s",
            want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 154:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::EXTMGR, "bundleName: %{public}s, abilityName: %{public}s, userId: %{public}d.",
        want.GetElement().GetBundleName().c_str(), want.GetElement().GetAbilityName().c_str(), userId);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 159:33
Spell: DisconnectAbility
包含日志: 是
代码:
ErrCode ExtensionManagerClient::DisconnectAbility(const sptr<IRemoteObject> &connect)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    auto abms = GetExtensionManager();
    CHECK_POINTER_RETURN_NOT_CONNECTED(abms);
    TAG_LOGI(AAFwkTag::EXTMGR, "call");
    return abms->DisconnectAbility(connect);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 163:5
Spell: 
包含日志: 否
代码:
    CHECK_POINTER_RETURN_NOT_CONNECTED(abms);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 163:5
Spell: 
包含日志: 否
代码:
    CHECK_POINTER_RETURN_NOT_CONNECTED(abms);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 164:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::EXTMGR, "call");

--------------------------------------------------------------------------------
