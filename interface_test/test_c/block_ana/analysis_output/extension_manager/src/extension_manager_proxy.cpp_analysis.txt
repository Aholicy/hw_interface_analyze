代码块类型: Namespace Declaration
位置: 24:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS::AAFwk {
bool ExtensionManagerProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(ExtensionManagerProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::EXTMGR, "write token failed");
        return false;
    }
    return true;
}

int ExtensionManagerProxy::ConnectAbilityCommon(const Want &want, const sptr<IRemoteObject> &connect,
    const sptr<IRemoteObject> &callerToken, AppExecFwk::ExtensionAbilityType extensionType, int32_t userId,
    bool isQueryExtensionOnly)
{
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null connect");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "want write failed");
        return ERR_INVALID_VALUE;
    }
    if (!data.WriteBool(true) || !data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "flag or connect write failed");
        return ERR_INVALID_VALUE;
    }
    if (callerToken) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callerToken)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");
            return ERR_INVALID_VALUE;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");
            return ERR_INVALID_VALUE;
        }
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "userId write failed.");
        return INNER_ERR;
    }
    if (!data.WriteInt32(static_cast<int32_t>(extensionType))) {
        TAG_LOGE(AAFwkTag::EXTMGR, "extensionType write failed.");
        return INNER_ERR;
    }
    if (!data.WriteBool(isQueryExtensionOnly)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "isQueryExtensionOnly write failed");
        return INNER_ERR;
    }

    MessageParcel reply;
    MessageOption option;
    int error = SendRequest(AbilityManagerInterfaceCode::CONNECT_ABILITY_WITH_TYPE, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int ExtensionManagerProxy::DisconnectAbility(const sptr<IRemoteObject> &connect)
{
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "disconnect ability failed");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }
    if (!data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "connect write failed");
        return ERR_INVALID_VALUE;
    }

    MessageParcel reply;
    MessageOption option;
    auto error = SendRequest(AbilityManagerInterfaceCode::DISCONNECT_ABILITY, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

ErrCode ExtensionManagerProxy::SendRequest(AbilityManagerInterfaceCode code, MessageParcel &data,
    MessageParcel &reply, MessageOption& option)
{
    auto remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null remote");
        return INNER_ERR;
    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);
}
}  // namespace OHOS::AAFwk

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 24:17
Spell: AAFwk
包含日志: 是
代码:
namespace OHOS::AAFwk {
bool ExtensionManagerProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(ExtensionManagerProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::EXTMGR, "write token failed");
        return false;
    }
    return true;
}

int ExtensionManagerProxy::ConnectAbilityCommon(const Want &want, const sptr<IRemoteObject> &connect,
    const sptr<IRemoteObject> &callerToken, AppExecFwk::ExtensionAbilityType extensionType, int32_t userId,
    bool isQueryExtensionOnly)
{
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null connect");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "want write failed");
        return ERR_INVALID_VALUE;
    }
    if (!data.WriteBool(true) || !data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "flag or connect write failed");
        return ERR_INVALID_VALUE;
    }
    if (callerToken) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callerToken)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");
            return ERR_INVALID_VALUE;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");
            return ERR_INVALID_VALUE;
        }
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "userId write failed.");
        return INNER_ERR;
    }
    if (!data.WriteInt32(static_cast<int32_t>(extensionType))) {
        TAG_LOGE(AAFwkTag::EXTMGR, "extensionType write failed.");
        return INNER_ERR;
    }
    if (!data.WriteBool(isQueryExtensionOnly)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "isQueryExtensionOnly write failed");
        return INNER_ERR;
    }

    MessageParcel reply;
    MessageOption option;
    int error = SendRequest(AbilityManagerInterfaceCode::CONNECT_ABILITY_WITH_TYPE, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int ExtensionManagerProxy::DisconnectAbility(const sptr<IRemoteObject> &connect)
{
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "disconnect ability failed");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }
    if (!data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "connect write failed");
        return ERR_INVALID_VALUE;
    }

    MessageParcel reply;
    MessageOption option;
    auto error = SendRequest(AbilityManagerInterfaceCode::DISCONNECT_ABILITY, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

ErrCode ExtensionManagerProxy::SendRequest(AbilityManagerInterfaceCode code, MessageParcel &data,
    MessageParcel &reply, MessageOption& option)
{
    auto remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null remote");
        return INNER_ERR;
    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);
}
}  // namespace OHOS::AAFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 25:29
Spell: WriteInterfaceToken
包含日志: 是
代码:
bool ExtensionManagerProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(ExtensionManagerProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::EXTMGR, "write token failed");
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 27:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInterfaceToken(ExtensionManagerProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::EXTMGR, "write token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 28:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "write token failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 34:28
Spell: ConnectAbilityCommon
包含日志: 是
代码:
int ExtensionManagerProxy::ConnectAbilityCommon(const Want &want, const sptr<IRemoteObject> &connect,
    const sptr<IRemoteObject> &callerToken, AppExecFwk::ExtensionAbilityType extensionType, int32_t userId,
    bool isQueryExtensionOnly)
{
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null connect");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "want write failed");
        return ERR_INVALID_VALUE;
    }
    if (!data.WriteBool(true) || !data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "flag or connect write failed");
        return ERR_INVALID_VALUE;
    }
    if (callerToken) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callerToken)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");
            return ERR_INVALID_VALUE;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");
            return ERR_INVALID_VALUE;
        }
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "userId write failed.");
        return INNER_ERR;
    }
    if (!data.WriteInt32(static_cast<int32_t>(extensionType))) {
        TAG_LOGE(AAFwkTag::EXTMGR, "extensionType write failed.");
        return INNER_ERR;
    }
    if (!data.WriteBool(isQueryExtensionOnly)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "isQueryExtensionOnly write failed");
        return INNER_ERR;
    }

    MessageParcel reply;
    MessageOption option;
    int error = SendRequest(AbilityManagerInterfaceCode::CONNECT_ABILITY_WITH_TYPE, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 38:5
Spell: 
包含日志: 是
代码:
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null connect");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 39:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "null connect");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 44:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 47:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "want write failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 48:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "want write failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 51:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteBool(true) || !data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "flag or connect write failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 52:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "flag or connect write failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 55:5
Spell: 
包含日志: 是
代码:
    if (callerToken) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callerToken)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");
            return ERR_INVALID_VALUE;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");
            return ERR_INVALID_VALUE;
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 56:9
Spell: 
包含日志: 是
代码:
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callerToken)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");
            return ERR_INVALID_VALUE;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 57:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 61:9
Spell: 
包含日志: 是
代码:
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");
            return ERR_INVALID_VALUE;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 62:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 66:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "userId write failed.");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "userId write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 70:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(static_cast<int32_t>(extensionType))) {
        TAG_LOGE(AAFwkTag::EXTMGR, "extensionType write failed.");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 71:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "extensionType write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 74:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteBool(isQueryExtensionOnly)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "isQueryExtensionOnly write failed");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 75:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "isQueryExtensionOnly write failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 82:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 83:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 89:28
Spell: DisconnectAbility
包含日志: 是
代码:
int ExtensionManagerProxy::DisconnectAbility(const sptr<IRemoteObject> &connect)
{
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "disconnect ability failed");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }
    if (!data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "connect write failed");
        return ERR_INVALID_VALUE;
    }

    MessageParcel reply;
    MessageOption option;
    auto error = SendRequest(AbilityManagerInterfaceCode::DISCONNECT_ABILITY, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 91:5
Spell: 
包含日志: 是
代码:
    if (connect == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "disconnect ability failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 92:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "disconnect ability failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 97:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 100:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(connect)) {
        TAG_LOGE(AAFwkTag::EXTMGR, "connect write failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 101:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "connect write failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 108:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 109:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 115:32
Spell: SendRequest
包含日志: 是
代码:
ErrCode ExtensionManagerProxy::SendRequest(AbilityManagerInterfaceCode code, MessageParcel &data,
    MessageParcel &reply, MessageOption& option)
{
    auto remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null remote");
        return INNER_ERR;
    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 119:5
Spell: 
包含日志: 是
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::EXTMGR, "null remote");
        return INNER_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 120:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::EXTMGR, "null remote");

--------------------------------------------------------------------------------
