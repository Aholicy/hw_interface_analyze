代码块类型: Method Declaration
位置: 33:34
Spell: QueryActiveOsAccountIds
包含日志: 否
代码:
ErrCode OsAccountManagerWrapper::QueryActiveOsAccountIds(std::vector<int32_t>& ids)
{
#ifndef OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");
    ids.emplace_back(DEFAULT_OS_ACCOUNT_ID);
    return ERR_OK;
#else
    TAG_LOGD(AAFwkTag::DEFAULT, "os account subsystem");
    return AccountSA::OsAccountManager::QueryActiveOsAccountIds(ids);
#endif // OS_ACCOUNT_PART_ENABLED
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 36:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 45:34
Spell: GetOsAccountLocalIdFromUid
包含日志: 否
代码:
ErrCode OsAccountManagerWrapper::GetOsAccountLocalIdFromUid(const int32_t uid, int32_t &id)
{
#ifndef OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");
    id = uid / UID_TRANSFORM_DIVISOR;
    return ERR_OK;
#else
    TAG_LOGD(AAFwkTag::DEFAULT, "os account subsystem");
    return AccountSA::OsAccountManager::GetOsAccountLocalIdFromUid(uid, id);
#endif // OS_ACCOUNT_PART_ENABLED
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 48:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 57:34
Spell: GetOsAccountLocalIdFromProcess
包含日志: 否
代码:
ErrCode OsAccountManagerWrapper::GetOsAccountLocalIdFromProcess(int &id)
{
#ifndef OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");
    id = DEFAULT_OS_ACCOUNT_ID;
    return ERR_OK;
#else
    TAG_LOGD(AAFwkTag::DEFAULT, "os account subsystem");
    return AccountSA::OsAccountManager::GetOsAccountLocalIdFromProcess(id);
#endif // OS_ACCOUNT_PART_ENABLED
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 60:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 69:34
Spell: IsOsAccountExists
包含日志: 否
代码:
ErrCode OsAccountManagerWrapper::IsOsAccountExists(const int id, bool &isOsAccountExists)
{
#ifndef OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");
    isOsAccountExists = (id == DEFAULT_OS_ACCOUNT_ID);
    return ERR_OK;
#else // OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "os account subsystem");
    return AccountSA::OsAccountManager::IsOsAccountExists(id, isOsAccountExists);
#endif // OS_ACCOUNT_PART_ENABLED
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 72:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 81:34
Spell: CreateOsAccount
包含日志: 否
代码:
ErrCode OsAccountManagerWrapper::CreateOsAccount(const std::string &name, int32_t &osAccountUserId)
{
#ifndef OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");
    osAccountUserId = USER_ID_U100;
    return ERR_OK;
#else // OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "os account subsystem");
    AccountSA::OsAccountInfo osAccountInfo;
    ErrCode errCode = AccountSA::OsAccountManager::CreateOsAccount(name,
        AccountSA::OsAccountType::NORMAL, osAccountInfo);
    osAccountUserId = osAccountInfo.GetLocalId();
    return errCode;
#endif // OS_ACCOUNT_PART_ENABLED
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 84:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 97:34
Spell: RemoveOsAccount
包含日志: 否
代码:
ErrCode OsAccountManagerWrapper::RemoveOsAccount(const int id)
{
#ifndef OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");
    return ERR_OK;
#else // OS_ACCOUNT_PART_ENABLED
    TAG_LOGD(AAFwkTag::DEFAULT, "os account subsystem");
    return AccountSA::OsAccountManager::RemoveOsAccount(id);
#endif // OS_ACCOUNT_PART_ENABLED
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 100:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::DEFAULT, "Without os account subsystem");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 108:34
Spell: GetCurrentActiveAccountId
包含日志: 否
代码:
int32_t OsAccountManagerWrapper::GetCurrentActiveAccountId()
{
    std::vector<int32_t> accountIds;
    auto instance = DelayedSingleton<AppExecFwk::OsAccountManagerWrapper>::GetInstance();
    if (instance == nullptr) {
        TAG_LOGE(AAFwkTag::DEFAULT, "Get OsAccountManager Failed");
        return 0;
    }

    ErrCode ret = instance->QueryActiveOsAccountIds(accountIds);
    if (ret != ERR_OK) {
        TAG_LOGE(AAFwkTag::DEFAULT, "Query active id failed");
        return 0;
    }

    if (accountIds.empty()) {
        TAG_LOGE(AAFwkTag::DEFAULT, "account empty");
        return 0;
    }

    return accountIds[0];
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 112:5
Spell: 
包含日志: 否
代码:
    if (instance == nullptr) {
        TAG_LOGE(AAFwkTag::DEFAULT, "Get OsAccountManager Failed");
        return 0;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 113:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::DEFAULT, "Get OsAccountManager Failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 118:5
Spell: 
包含日志: 否
代码:
    if (ret != ERR_OK) {
        TAG_LOGE(AAFwkTag::DEFAULT, "Query active id failed");
        return 0;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 119:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::DEFAULT, "Query active id failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 123:5
Spell: 
包含日志: 否
代码:
    if (accountIds.empty()) {
        TAG_LOGE(AAFwkTag::DEFAULT, "account empty");
        return 0;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 124:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::DEFAULT, "account empty");

--------------------------------------------------------------------------------
