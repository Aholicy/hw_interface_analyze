代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool PageStateData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    moduleName = parcel.ReadString();
    abilityName = parcel.ReadString();
    pageName = parcel.ReadString();
    targetBundleName = parcel.ReadString();
    targetModuleName = parcel.ReadString();

    return true;
}

bool PageStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) &&
        parcel.WriteString(moduleName) &&
        parcel.WriteString(abilityName) &&
        parcel.WriteString(pageName) &&
        parcel.WriteString(targetBundleName) &&
        parcel.WriteString(targetModuleName));
}

PageStateData *PageStateData::Unmarshalling(Parcel &parcel)
{
    PageStateData *pageStateData = new (std::nothrow) PageStateData();
    if (pageStateData && !pageStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete pageStateData;
        pageStateData = nullptr;
    }
    return pageStateData;
}
}
}
--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool PageStateData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    moduleName = parcel.ReadString();
    abilityName = parcel.ReadString();
    pageName = parcel.ReadString();
    targetBundleName = parcel.ReadString();
    targetModuleName = parcel.ReadString();

    return true;
}

bool PageStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) &&
        parcel.WriteString(moduleName) &&
        parcel.WriteString(abilityName) &&
        parcel.WriteString(pageName) &&
        parcel.WriteString(targetBundleName) &&
        parcel.WriteString(targetModuleName));
}

PageStateData *PageStateData::Unmarshalling(Parcel &parcel)
{
    PageStateData *pageStateData = new (std::nothrow) PageStateData();
    if (pageStateData && !pageStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete pageStateData;
        pageStateData = nullptr;
    }
    return pageStateData;
}
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 23:21
Spell: ReadFromParcel
包含日志: 否
代码:
bool PageStateData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    moduleName = parcel.ReadString();
    abilityName = parcel.ReadString();
    pageName = parcel.ReadString();
    targetBundleName = parcel.ReadString();
    targetModuleName = parcel.ReadString();

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 35:21
Spell: Marshalling
包含日志: 否
代码:
bool PageStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) &&
        parcel.WriteString(moduleName) &&
        parcel.WriteString(abilityName) &&
        parcel.WriteString(pageName) &&
        parcel.WriteString(targetBundleName) &&
        parcel.WriteString(targetModuleName));
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 45:31
Spell: Unmarshalling
包含日志: 是
代码:
PageStateData *PageStateData::Unmarshalling(Parcel &parcel)
{
    PageStateData *pageStateData = new (std::nothrow) PageStateData();
    if (pageStateData && !pageStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete pageStateData;
        pageStateData = nullptr;
    }
    return pageStateData;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 48:5
Spell: 
包含日志: 是
代码:
    if (pageStateData && !pageStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete pageStateData;
        pageStateData = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 49:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

--------------------------------------------------------------------------------
