代码块类型: Namespace Declaration
位置: 27:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
constexpr int32_t CYCLE_LIMIT = 1000;
AppStateCallbackHost::AppStateCallbackHost() {}

AppStateCallbackHost::~AppStateCallbackHost() {}

int AppStateCallbackHost::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    std::u16string descriptor = AppStateCallbackHost::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");
        return ERR_INVALID_STATE;
    }

    switch (code) {
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_STATE_CHANGED):
            return HandleOnAppStateChanged(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_ABILITY_REQUEST_DONE):
            return HandleOnAbilityRequestDone(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_CONFIG_CHANGE):
            return HandleNotifyConfigurationChange(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_RESIDENT_PROCESS):
            return HandleNotifyStartResidentProcess(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_REMOTE_DIED):
            return HandleOnAppRemoteDied(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_PRE_CACHE):
            return HandleNotifyAppPreCache(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_KEEP_ALIVE_PROCESS):
            return HandleNotifyStartKeepAliveProcess(data, reply);
    }

    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

void AppStateCallbackHost::OnAbilityRequestDone(const sptr<IRemoteObject> &, const AbilityState)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::OnAppStateChanged(const AppProcessData &)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::NotifyAppPreCache(int32_t pid, int32_t userId)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::NotifyConfigurationChange(const AppExecFwk::Configuration &config, int32_t userId)
{
}

void AppStateCallbackHost::NotifyStartResidentProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::NotifyStartKeepAliveProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::OnAppRemoteDied(const std::vector<sptr<IRemoteObject>> &abilityTokens)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

int32_t AppStateCallbackHost::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<AppProcessData> processData(data.ReadParcelable<AppProcessData>());
    if (!processData) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AppProcessData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    OnAppStateChanged(*processData);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleOnAbilityRequestDone(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> obj = nullptr;
    if (data.ReadBool()) {
        obj = data.ReadRemoteObject();
    }
    int32_t state = data.ReadInt32();
    OnAbilityRequestDone(obj, static_cast<AbilityState>(state));
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyConfigurationChange(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<AppExecFwk::Configuration> config(data.ReadParcelable<AppExecFwk::Configuration>());
    if (config == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "To read config failed.");
        return ERR_DEAD_OBJECT;
    }
    auto userId = data.ReadInt32();
    NotifyConfigurationChange(*config, userId);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyStartResidentProcess(MessageParcel &data, MessageParcel &reply)
{
    std::vector<AppExecFwk::BundleInfo> bundleInfos;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }
    NotifyStartResidentProcess(bundleInfos);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyStartKeepAliveProcess(MessageParcel &data, MessageParcel &reply)
{
    std::vector<AppExecFwk::BundleInfo> bundleInfos;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }
    NotifyStartKeepAliveProcess(bundleInfos);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleOnAppRemoteDied(MessageParcel &data, MessageParcel &reply)
{
    std::vector<sptr<IRemoteObject>> abilityTokens;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        if (!obj) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read token failed.");
            return ERR_INVALID_VALUE;
        }
        abilityTokens.emplace_back(obj);
    }
    OnAppRemoteDied(abilityTokens);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyAppPreCache(MessageParcel &data, MessageParcel &reply)
{
    int32_t pid = data.ReadInt32();
    if (pid <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid is illegal");
        return ERR_INVALID_VALUE;
    }
    int32_t userId = data.ReadInt32();
    if (userId < 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "userId is illegal");
        return ERR_INVALID_VALUE;
    }
    NotifyAppPreCache(pid, userId);
    return NO_ERROR;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 28:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
constexpr int32_t CYCLE_LIMIT = 1000;
AppStateCallbackHost::AppStateCallbackHost() {}

AppStateCallbackHost::~AppStateCallbackHost() {}

int AppStateCallbackHost::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    std::u16string descriptor = AppStateCallbackHost::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");
        return ERR_INVALID_STATE;
    }

    switch (code) {
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_STATE_CHANGED):
            return HandleOnAppStateChanged(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_ABILITY_REQUEST_DONE):
            return HandleOnAbilityRequestDone(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_CONFIG_CHANGE):
            return HandleNotifyConfigurationChange(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_RESIDENT_PROCESS):
            return HandleNotifyStartResidentProcess(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_REMOTE_DIED):
            return HandleOnAppRemoteDied(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_PRE_CACHE):
            return HandleNotifyAppPreCache(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_KEEP_ALIVE_PROCESS):
            return HandleNotifyStartKeepAliveProcess(data, reply);
    }

    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

void AppStateCallbackHost::OnAbilityRequestDone(const sptr<IRemoteObject> &, const AbilityState)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::OnAppStateChanged(const AppProcessData &)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::NotifyAppPreCache(int32_t pid, int32_t userId)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::NotifyConfigurationChange(const AppExecFwk::Configuration &config, int32_t userId)
{
}

void AppStateCallbackHost::NotifyStartResidentProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::NotifyStartKeepAliveProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

void AppStateCallbackHost::OnAppRemoteDied(const std::vector<sptr<IRemoteObject>> &abilityTokens)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

int32_t AppStateCallbackHost::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<AppProcessData> processData(data.ReadParcelable<AppProcessData>());
    if (!processData) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AppProcessData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    OnAppStateChanged(*processData);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleOnAbilityRequestDone(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> obj = nullptr;
    if (data.ReadBool()) {
        obj = data.ReadRemoteObject();
    }
    int32_t state = data.ReadInt32();
    OnAbilityRequestDone(obj, static_cast<AbilityState>(state));
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyConfigurationChange(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<AppExecFwk::Configuration> config(data.ReadParcelable<AppExecFwk::Configuration>());
    if (config == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "To read config failed.");
        return ERR_DEAD_OBJECT;
    }
    auto userId = data.ReadInt32();
    NotifyConfigurationChange(*config, userId);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyStartResidentProcess(MessageParcel &data, MessageParcel &reply)
{
    std::vector<AppExecFwk::BundleInfo> bundleInfos;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }
    NotifyStartResidentProcess(bundleInfos);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyStartKeepAliveProcess(MessageParcel &data, MessageParcel &reply)
{
    std::vector<AppExecFwk::BundleInfo> bundleInfos;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }
    NotifyStartKeepAliveProcess(bundleInfos);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleOnAppRemoteDied(MessageParcel &data, MessageParcel &reply)
{
    std::vector<sptr<IRemoteObject>> abilityTokens;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        if (!obj) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read token failed.");
            return ERR_INVALID_VALUE;
        }
        abilityTokens.emplace_back(obj);
    }
    OnAppRemoteDied(abilityTokens);
    return NO_ERROR;
}

int32_t AppStateCallbackHost::HandleNotifyAppPreCache(MessageParcel &data, MessageParcel &reply)
{
    int32_t pid = data.ReadInt32();
    if (pid <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid is illegal");
        return ERR_INVALID_VALUE;
    }
    int32_t userId = data.ReadInt32();
    if (userId < 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "userId is illegal");
        return ERR_INVALID_VALUE;
    }
    NotifyAppPreCache(pid, userId);
    return NO_ERROR;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 30:23
Spell: AppStateCallbackHost
包含日志: 否
代码:
AppStateCallbackHost::AppStateCallbackHost() {}

--------------------------------------------------------------------------------
代码块类型: Destructor Declaration
位置: 32:23
Spell: ~AppStateCallbackHost
包含日志: 否
代码:
AppStateCallbackHost::~AppStateCallbackHost() {}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 34:27
Spell: OnRemoteRequest
包含日志: 是
代码:
int AppStateCallbackHost::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    std::u16string descriptor = AppStateCallbackHost::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");
        return ERR_INVALID_STATE;
    }

    switch (code) {
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_STATE_CHANGED):
            return HandleOnAppStateChanged(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_ABILITY_REQUEST_DONE):
            return HandleOnAbilityRequestDone(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_CONFIG_CHANGE):
            return HandleNotifyConfigurationChange(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_RESIDENT_PROCESS):
            return HandleNotifyStartResidentProcess(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_REMOTE_DIED):
            return HandleOnAppRemoteDied(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_PRE_CACHE):
            return HandleNotifyAppPreCache(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_KEEP_ALIVE_PROCESS):
            return HandleNotifyStartKeepAliveProcess(data, reply);
    }

    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 37:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 41:5
Spell: 
包含日志: 是
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 42:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 46:5
Spell: 
包含日志: 否
代码:
    switch (code) {
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_STATE_CHANGED):
            return HandleOnAppStateChanged(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_ABILITY_REQUEST_DONE):
            return HandleOnAbilityRequestDone(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_CONFIG_CHANGE):
            return HandleNotifyConfigurationChange(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_RESIDENT_PROCESS):
            return HandleNotifyStartResidentProcess(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_REMOTE_DIED):
            return HandleOnAppRemoteDied(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_PRE_CACHE):
            return HandleNotifyAppPreCache(data, reply);
        case static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_KEEP_ALIVE_PROCESS):
            return HandleNotifyStartKeepAliveProcess(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 63:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AppStateCallbackHost::OnRemoteRequest end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 67:28
Spell: OnAbilityRequestDone
包含日志: 是
代码:
void AppStateCallbackHost::OnAbilityRequestDone(const sptr<IRemoteObject> &, const AbilityState)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 69:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 72:28
Spell: OnAppStateChanged
包含日志: 是
代码:
void AppStateCallbackHost::OnAppStateChanged(const AppProcessData &)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 74:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 77:28
Spell: NotifyAppPreCache
包含日志: 是
代码:
void AppStateCallbackHost::NotifyAppPreCache(int32_t pid, int32_t userId)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 79:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 82:28
Spell: NotifyConfigurationChange
包含日志: 否
代码:
void AppStateCallbackHost::NotifyConfigurationChange(const AppExecFwk::Configuration &config, int32_t userId)
{
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 86:28
Spell: NotifyStartResidentProcess
包含日志: 是
代码:
void AppStateCallbackHost::NotifyStartResidentProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 88:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 91:28
Spell: NotifyStartKeepAliveProcess
包含日志: 是
代码:
void AppStateCallbackHost::NotifyStartKeepAliveProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 93:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 96:28
Spell: OnAppRemoteDied
包含日志: 是
代码:
void AppStateCallbackHost::OnAppRemoteDied(const std::vector<sptr<IRemoteObject>> &abilityTokens)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 98:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 101:31
Spell: HandleOnAppStateChanged
包含日志: 是
代码:
int32_t AppStateCallbackHost::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<AppProcessData> processData(data.ReadParcelable<AppProcessData>());
    if (!processData) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AppProcessData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    OnAppStateChanged(*processData);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 105:5
Spell: 
包含日志: 是
代码:
    if (!processData) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AppProcessData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 106:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AppProcessData> failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 114:31
Spell: HandleOnAbilityRequestDone
包含日志: 否
代码:
int32_t AppStateCallbackHost::HandleOnAbilityRequestDone(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> obj = nullptr;
    if (data.ReadBool()) {
        obj = data.ReadRemoteObject();
    }
    int32_t state = data.ReadInt32();
    OnAbilityRequestDone(obj, static_cast<AbilityState>(state));
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 118:5
Spell: 
包含日志: 否
代码:
    if (data.ReadBool()) {
        obj = data.ReadRemoteObject();
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 126:31
Spell: HandleNotifyConfigurationChange
包含日志: 是
代码:
int32_t AppStateCallbackHost::HandleNotifyConfigurationChange(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<AppExecFwk::Configuration> config(data.ReadParcelable<AppExecFwk::Configuration>());
    if (config == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "To read config failed.");
        return ERR_DEAD_OBJECT;
    }
    auto userId = data.ReadInt32();
    NotifyConfigurationChange(*config, userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 129:5
Spell: 
包含日志: 是
代码:
    if (config == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "To read config failed.");
        return ERR_DEAD_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 130:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "To read config failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 138:31
Spell: HandleNotifyStartResidentProcess
包含日志: 是
代码:
int32_t AppStateCallbackHost::HandleNotifyStartResidentProcess(MessageParcel &data, MessageParcel &reply)
{
    std::vector<AppExecFwk::BundleInfo> bundleInfos;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }
    NotifyStartResidentProcess(bundleInfos);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 142:5
Spell: 
包含日志: 是
代码:
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 143:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 146:5
Spell: 
包含日志: 是
代码:
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 148:9
Spell: 
包含日志: 是
代码:
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 149:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 158:31
Spell: HandleNotifyStartKeepAliveProcess
包含日志: 是
代码:
int32_t AppStateCallbackHost::HandleNotifyStartKeepAliveProcess(MessageParcel &data, MessageParcel &reply)
{
    std::vector<AppExecFwk::BundleInfo> bundleInfos;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }
    NotifyStartKeepAliveProcess(bundleInfos);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 162:5
Spell: 
包含日志: 是
代码:
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 163:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 166:5
Spell: 
包含日志: 是
代码:
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppExecFwk::BundleInfo> bundleInfo(data.ReadParcelable<AppExecFwk::BundleInfo>());
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        bundleInfos.emplace_back(*bundleInfo);
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 168:9
Spell: 
包含日志: 是
代码:
        if (!bundleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 169:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 178:31
Spell: HandleOnAppRemoteDied
包含日志: 是
代码:
int32_t AppStateCallbackHost::HandleOnAppRemoteDied(MessageParcel &data, MessageParcel &reply)
{
    std::vector<sptr<IRemoteObject>> abilityTokens;
    int32_t infoSize = data.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        if (!obj) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read token failed.");
            return ERR_INVALID_VALUE;
        }
        abilityTokens.emplace_back(obj);
    }
    OnAppRemoteDied(abilityTokens);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 182:5
Spell: 
包含日志: 是
代码:
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 183:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 186:5
Spell: 
包含日志: 是
代码:
    for (int32_t i = 0; i < infoSize; i++) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        if (!obj) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read token failed.");
            return ERR_INVALID_VALUE;
        }
        abilityTokens.emplace_back(obj);
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 188:9
Spell: 
包含日志: 是
代码:
        if (!obj) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read token failed.");
            return ERR_INVALID_VALUE;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 189:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Read token failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 198:31
Spell: HandleNotifyAppPreCache
包含日志: 是
代码:
int32_t AppStateCallbackHost::HandleNotifyAppPreCache(MessageParcel &data, MessageParcel &reply)
{
    int32_t pid = data.ReadInt32();
    if (pid <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid is illegal");
        return ERR_INVALID_VALUE;
    }
    int32_t userId = data.ReadInt32();
    if (userId < 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "userId is illegal");
        return ERR_INVALID_VALUE;
    }
    NotifyAppPreCache(pid, userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 201:5
Spell: 
包含日志: 是
代码:
    if (pid <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid is illegal");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 202:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "pid is illegal");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 206:5
Spell: 
包含日志: 是
代码:
    if (userId < 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "userId is illegal");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 207:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "userId is illegal");

--------------------------------------------------------------------------------
