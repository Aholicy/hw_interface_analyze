代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool ChildProcessOptions::ReadFromParcel(Parcel &parcel)
{
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);
    return true;
}

ChildProcessOptions *ChildProcessOptions::Unmarshalling(Parcel &parcel)
{
    ChildProcessOptions *obj = new (std::nothrow) ChildProcessOptions();
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }
    return obj;
}

bool ChildProcessOptions::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);
    return true;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool ChildProcessOptions::ReadFromParcel(Parcel &parcel)
{
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);
    return true;
}

ChildProcessOptions *ChildProcessOptions::Unmarshalling(Parcel &parcel)
{
    ChildProcessOptions *obj = new (std::nothrow) ChildProcessOptions();
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }
    return obj;
}

bool ChildProcessOptions::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);
    return true;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 23:27
Spell: ReadFromParcel
包含日志: 否
代码:
bool ChildProcessOptions::ReadFromParcel(Parcel &parcel)
{
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 29:43
Spell: Unmarshalling
包含日志: 是
代码:
ChildProcessOptions *ChildProcessOptions::Unmarshalling(Parcel &parcel)
{
    ChildProcessOptions *obj = new (std::nothrow) ChildProcessOptions();
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }
    return obj;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 32:5
Spell: 
包含日志: 是
代码:
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 33:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 40:27
Spell: Marshalling
包含日志: 否
代码:
bool ChildProcessOptions::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);
    return true;
}

--------------------------------------------------------------------------------
