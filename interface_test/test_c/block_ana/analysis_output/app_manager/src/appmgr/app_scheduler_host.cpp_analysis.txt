代码块类型: Method Declaration
位置: 31:24
Spell: InitMemberFuncMap
包含日志: 否
代码:
void AppSchedulerHost::InitMemberFuncMap() {}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 35:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "AppSchedulerHost destruction");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 38:23
Spell: OnRemoteRequest
包含日志: 否
代码:
int AppSchedulerHost::OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppSchedulerHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    std::u16string descriptor = AppSchedulerHost::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");
        return ERR_INVALID_STATE;
    }
    return OnRemoteRequestInner(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 40:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AppSchedulerHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 45:5
Spell: 
包含日志: 否
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 46:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "local descriptor is not equal to remote");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 52:27
Spell: OnRemoteRequestInner
包含日志: 否
代码:
int32_t AppSchedulerHost::OnRemoteRequestInner(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    int retCode = ERR_OK;
    retCode = OnRemoteRequestInnerFirst(code, data, reply, option);
    if (retCode != INVALID_FD) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerSecond(code, data, reply, option);
    if (retCode != INVALID_FD) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerThird(code, data, reply, option);
    if (retCode != INVALID_FD) {
        return retCode;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "AppSchedulerHost::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 57:5
Spell: 
包含日志: 否
代码:
    if (retCode != INVALID_FD) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 61:5
Spell: 
包含日志: 否
代码:
    if (retCode != INVALID_FD) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 65:5
Spell: 
包含日志: 否
代码:
    if (retCode != INVALID_FD) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 68:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AppSchedulerHost::OnRemoteRequest end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 72:27
Spell: OnRemoteRequestInnerFirst
包含日志: 否
代码:
int32_t AppSchedulerHost::OnRemoteRequestInnerFirst(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_FOREGROUND_APPLICATION_TRANSACTION):
            return HandleScheduleForegroundApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_BACKGROUND_APPLICATION_TRANSACTION):
            return HandleScheduleBackgroundApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_TERMINATE_APPLICATION_TRANSACTION):
            return HandleScheduleTerminateApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_LOWMEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleLowMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_SHRINK_MEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleShrinkMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_MEMORYLEVEL_APPLICATION_TRANSACTION):
            return HandleScheduleMemoryLevel(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_LAUNCH_ABILITY_TRANSACTION):
            return HandleScheduleLaunchAbility(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CLEAN_ABILITY_TRANSACTION):
            return HandleScheduleCleanAbility(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_LAUNCH_APPLICATION_TRANSACTION):
            return HandleScheduleLaunchApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_PROFILE_CHANGED_TRANSACTION):
            return HandleScheduleProfileChanged(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CONFIGURATION_UPDATED):
            return HandleScheduleConfigurationUpdated(data, reply);
    }
    return INVALID_FD;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 75:5
Spell: 
包含日志: 否
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_FOREGROUND_APPLICATION_TRANSACTION):
            return HandleScheduleForegroundApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_BACKGROUND_APPLICATION_TRANSACTION):
            return HandleScheduleBackgroundApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_TERMINATE_APPLICATION_TRANSACTION):
            return HandleScheduleTerminateApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_LOWMEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleLowMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_SHRINK_MEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleShrinkMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_MEMORYLEVEL_APPLICATION_TRANSACTION):
            return HandleScheduleMemoryLevel(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_LAUNCH_ABILITY_TRANSACTION):
            return HandleScheduleLaunchAbility(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CLEAN_ABILITY_TRANSACTION):
            return HandleScheduleCleanAbility(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_LAUNCH_APPLICATION_TRANSACTION):
            return HandleScheduleLaunchApplication(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_PROFILE_CHANGED_TRANSACTION):
            return HandleScheduleProfileChanged(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CONFIGURATION_UPDATED):
            return HandleScheduleConfigurationUpdated(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 102:27
Spell: OnRemoteRequestInnerSecond
包含日志: 否
代码:
int32_t AppSchedulerHost::OnRemoteRequestInnerSecond(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_PROCESS_SECURITY_EXIT_TRANSACTION):
            return HandleScheduleProcessSecurityExit(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_ABILITY_STAGE_INFO):
            return HandleScheduleAbilityStage(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CLEAR_PAGE_STACK):
            return HandleScheduleClearPageStack(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_ACCEPT_WANT):
            return HandleScheduleAcceptWant(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NEW_PROCESS_REQUEST):
            return HandleScheduleNewProcessRequest(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_LOAD_REPAIR_PATCH):
            return HandleNotifyLoadRepairPatch(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_HOT_RELOAD_PAGE):
            return HandleNotifyHotReloadPage(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_UNLOAD_REPAIR_PATCH):
            return HandleNotifyUnLoadRepairPatch(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_UPDATE_APPLICATION_INFO_INSTALLED):
            return HandleScheduleUpdateApplicationInfoInstalled(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_HEAPMEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleHeapMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_FAULT):
            return HandleNotifyAppFault(data, reply);
    }
    return INVALID_FD;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 105:5
Spell: 
包含日志: 否
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_PROCESS_SECURITY_EXIT_TRANSACTION):
            return HandleScheduleProcessSecurityExit(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_ABILITY_STAGE_INFO):
            return HandleScheduleAbilityStage(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CLEAR_PAGE_STACK):
            return HandleScheduleClearPageStack(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_ACCEPT_WANT):
            return HandleScheduleAcceptWant(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NEW_PROCESS_REQUEST):
            return HandleScheduleNewProcessRequest(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_LOAD_REPAIR_PATCH):
            return HandleNotifyLoadRepairPatch(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_HOT_RELOAD_PAGE):
            return HandleNotifyHotReloadPage(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_UNLOAD_REPAIR_PATCH):
            return HandleNotifyUnLoadRepairPatch(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_UPDATE_APPLICATION_INFO_INSTALLED):
            return HandleScheduleUpdateApplicationInfoInstalled(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_HEAPMEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleHeapMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_NOTIFY_FAULT):
            return HandleNotifyAppFault(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 132:27
Spell: OnRemoteRequestInnerThird
包含日志: 否
代码:
int32_t AppSchedulerHost::OnRemoteRequestInnerThird(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAppScheduler::Message::APP_GC_STATE_CHANGE):
            return HandleScheduleChangeAppGcState(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_ATTACH_APP_DEBUG):
            return HandleAttachAppDebug(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DETACH_APP_DEBUG):
            return HandleDetachAppDebug(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_JSHEAP_MEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleJsHeapMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_IPC_START):
            return HandleScheduleDumpIpcStart(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_IPC_STOP):
            return HandleScheduleDumpIpcStop(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_IPC_STAT):
            return HandleScheduleDumpIpcStat(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_FFRT):
            return HandleScheduleDumpFfrt(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CACHE_PROCESS):
            return HandleScheduleCacheProcess(data, reply);
    }
    return INVALID_FD;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 135:5
Spell: 
包含日志: 否
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAppScheduler::Message::APP_GC_STATE_CHANGE):
            return HandleScheduleChangeAppGcState(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_ATTACH_APP_DEBUG):
            return HandleAttachAppDebug(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DETACH_APP_DEBUG):
            return HandleDetachAppDebug(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_JSHEAP_MEMORY_APPLICATION_TRANSACTION):
            return HandleScheduleJsHeapMemory(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_IPC_START):
            return HandleScheduleDumpIpcStart(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_IPC_STOP):
            return HandleScheduleDumpIpcStop(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_IPC_STAT):
            return HandleScheduleDumpIpcStat(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_DUMP_FFRT):
            return HandleScheduleDumpFfrt(data, reply);
        case static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CACHE_PROCESS):
            return HandleScheduleCacheProcess(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 158:27
Spell: HandleScheduleForegroundApplication
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleForegroundApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleForegroundApplication();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 165:27
Spell: HandleScheduleBackgroundApplication
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleBackgroundApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleBackgroundApplication();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 172:27
Spell: HandleScheduleTerminateApplication
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleTerminateApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto isLastProcess = data.ReadBool();
    ScheduleTerminateApplication(isLastProcess);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 180:27
Spell: HandleScheduleLowMemory
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleLowMemory(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleLowMemory();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 187:27
Spell: HandleScheduleShrinkMemory
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleShrinkMemory(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleShrinkMemory(data.ReadInt32());
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 194:27
Spell: HandleScheduleMemoryLevel
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleMemoryLevel(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleMemoryLevel(data.ReadInt32());
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 201:27
Spell: HandleScheduleHeapMemory
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleHeapMemory(MessageParcel &data, MessageParcel &reply)
{
    int32_t pid = data.ReadInt32();
    struct OHOS::AppExecFwk::MallocInfo mallocInfo;
    ScheduleHeapMemory(pid, mallocInfo);
    reply.WriteParcelable(&mallocInfo);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 210:27
Spell: HandleScheduleJsHeapMemory
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleJsHeapMemory(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<JsHeapDumpInfo> info(data.ReadParcelable<JsHeapDumpInfo>());
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<JsHeapDumpInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }
    ScheduleJsHeapMemory(*info);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 214:5
Spell: 
包含日志: 否
代码:
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<JsHeapDumpInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 215:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<JsHeapDumpInfo> failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 222:27
Spell: HandleScheduleLaunchAbility
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleLaunchAbility(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<AbilityInfo> abilityInfo(data.ReadParcelable<AbilityInfo>());
    if (!abilityInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    sptr<IRemoteObject> token = nullptr;
    if (data.ReadBool()) {
        token = data.ReadRemoteObject();
    }

    std::shared_ptr<AAFwk::Want> want(data.ReadParcelable<AAFwk::Want>());
    auto abilityRecordId = data.ReadInt32();
    ScheduleLaunchAbility(*abilityInfo, token, want, abilityRecordId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 226:5
Spell: 
包含日志: 否
代码:
    if (!abilityInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 227:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 232:5
Spell: 
包含日志: 否
代码:
    if (data.ReadBool()) {
        token = data.ReadRemoteObject();
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 242:27
Spell: HandleScheduleCleanAbility
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleCleanAbility(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    bool isCacheProcess = data.ReadBool();
    ScheduleCleanAbility(token, isCacheProcess);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 251:27
Spell: HandleScheduleLaunchApplication
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleLaunchApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<AppLaunchData> launchData(data.ReadParcelable<AppLaunchData>());
    std::unique_ptr<Configuration> config(data.ReadParcelable<Configuration>());
    if (!launchData) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<launchData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }
    if (!config) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Configuration> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    ScheduleLaunchApplication(*launchData, *config);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 256:5
Spell: 
包含日志: 否
代码:
    if (!launchData) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<launchData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 257:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<launchData> failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 260:5
Spell: 
包含日志: 否
代码:
    if (!config) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Configuration> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 261:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Configuration> failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 269:27
Spell: HandleScheduleUpdateApplicationInfoInstalled
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleUpdateApplicationInfoInstalled(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<ApplicationInfo> appInfo(data.ReadParcelable<ApplicationInfo>());
    if (!appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    ScheduleUpdateApplicationInfoInstalled(*appInfo);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 273:5
Spell: 
包含日志: 否
代码:
    if (!appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 274:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 282:27
Spell: HandleScheduleAbilityStage
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleAbilityStage(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<HapModuleInfo> abilityStage(data.ReadParcelable<HapModuleInfo>());
    if (!abilityStage) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<launchData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    ScheduleAbilityStage(*abilityStage);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 286:5
Spell: 
包含日志: 否
代码:
    if (!abilityStage) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<launchData> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 287:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<launchData> failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 295:27
Spell: HandleScheduleProfileChanged
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleProfileChanged(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<Profile> profile(data.ReadParcelable<Profile>());
    if (!profile) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Profile> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    ScheduleProfileChanged(*profile);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 299:5
Spell: 
包含日志: 否
代码:
    if (!profile) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Profile> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 300:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Profile> failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 308:27
Spell: HandleScheduleConfigurationUpdated
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleConfigurationUpdated(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    HITRACE_METER(HITRACE_TAG_APP);
    std::unique_ptr<Configuration> configuration(data.ReadParcelable<Configuration>());
    if (!configuration) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Configuration> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    ScheduleConfigurationUpdated(*configuration);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 313:5
Spell: 
包含日志: 否
代码:
    if (!configuration) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Configuration> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 314:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Configuration> failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 322:27
Spell: HandleScheduleProcessSecurityExit
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleProcessSecurityExit(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleProcessSecurityExit();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 329:27
Spell: HandleScheduleClearPageStack
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleClearPageStack(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleClearPageStack();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 336:27
Spell: HandleScheduleAcceptWant
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleAcceptWant(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto want = std::shared_ptr<AAFwk::Want>(data.ReadParcelable<AAFwk::Want>());
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }
    auto moduleName = data.ReadString();
    ScheduleAcceptWant(*want, moduleName);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 340:5
Spell: 
包含日志: 否
代码:
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 341:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 349:27
Spell: HandleScheduleNewProcessRequest
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleNewProcessRequest(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "call.");
    HITRACE_METER(HITRACE_TAG_APP);
    auto want = std::shared_ptr<AAFwk::Want>(data.ReadParcelable<AAFwk::Want>());
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }
    auto moduleName = data.ReadString();
    ScheduleNewProcessRequest(*want, moduleName);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 351:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "call.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 354:5
Spell: 
包含日志: 否
代码:
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 355:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 363:27
Spell: HandleNotifyLoadRepairPatch
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleNotifyLoadRepairPatch(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    auto callback = iface_cast<IQuickFixCallback>(data.ReadRemoteObject());
    if (callback == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");
        return ERR_INVALID_VALUE;
    }
    auto recordId = data.ReadInt32();
    ScheduleNotifyLoadRepairPatch(bundleName, callback, recordId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 368:5
Spell: 
包含日志: 否
代码:
    if (callback == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 369:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 377:27
Spell: HandleNotifyHotReloadPage
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleNotifyHotReloadPage(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto callback = iface_cast<IQuickFixCallback>(data.ReadRemoteObject());
    if (callback == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");
        return ERR_INVALID_VALUE;
    }
    auto recordId = data.ReadInt32();
    ScheduleNotifyHotReloadPage(callback, recordId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 381:5
Spell: 
包含日志: 否
代码:
    if (callback == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 382:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 390:27
Spell: HandleNotifyUnLoadRepairPatch
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleNotifyUnLoadRepairPatch(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    auto callback = iface_cast<IQuickFixCallback>(data.ReadRemoteObject());
    if (callback == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");
        return ERR_INVALID_VALUE;
    }
    auto recordId = data.ReadInt32();
    ScheduleNotifyUnLoadRepairPatch(bundleName, callback, recordId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 395:5
Spell: 
包含日志: 否
代码:
    if (callback == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 396:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Callback is null.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 404:27
Spell: HandleNotifyAppFault
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleNotifyAppFault(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<FaultData> faultData(data.ReadParcelable<FaultData>());
    if (faultData == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<FaultData> failed");
        return ERR_INVALID_VALUE;
    }

    int32_t result = ScheduleNotifyAppFault(*faultData);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "reply write failed.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 407:5
Spell: 
包含日志: 否
代码:
    if (faultData == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<FaultData> failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 408:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<FaultData> failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 413:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "reply write failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 414:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "reply write failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 420:27
Spell: HandleScheduleChangeAppGcState
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleChangeAppGcState(MessageParcel &data, MessageParcel &reply)
{
    int32_t state = data.ReadInt32();
    int32_t result = ScheduleChangeAppGcState(state);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "reply write failed.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 424:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "reply write failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 425:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "reply write failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 431:27
Spell: HandleAttachAppDebug
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleAttachAppDebug(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    AttachAppDebug();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 438:27
Spell: HandleDetachAppDebug
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleDetachAppDebug(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    DetachAppDebug();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 445:27
Spell: HandleScheduleDumpIpcStart
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleDumpIpcStart(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string result;
    ScheduleDumpIpcStart(result);
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStart result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 450:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStart result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 451:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStart result");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 457:27
Spell: HandleScheduleDumpIpcStop
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleDumpIpcStop(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string result;
    ScheduleDumpIpcStop(result);
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStop result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 462:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStop result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 463:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStop result");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 469:27
Spell: HandleScheduleDumpIpcStat
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleDumpIpcStat(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string result;
    ScheduleDumpIpcStat(result);
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStat result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 474:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStat result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 475:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpIpcStat result");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 481:27
Spell: HandleScheduleCacheProcess
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleCacheProcess(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    ScheduleCacheProcess();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 488:27
Spell: HandleScheduleDumpFfrt
包含日志: 否
代码:
int32_t AppSchedulerHost::HandleScheduleDumpFfrt(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string result;
    ScheduleDumpFfrt(result);
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpFfrt result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 493:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteString(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpFfrt result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 494:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string of ScheduleDumpFfrt result");

--------------------------------------------------------------------------------
