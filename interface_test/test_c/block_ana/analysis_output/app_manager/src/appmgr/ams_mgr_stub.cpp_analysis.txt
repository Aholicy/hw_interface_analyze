代码块类型: Method Declaration
位置: 46:18
Spell: CreateMemberFuncMap
包含日志: 否
代码:
void AmsMgrStub::CreateMemberFuncMap() {}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 48:17
Spell: OnRemoteRequest
包含日志: 否
代码:
int AmsMgrStub::OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    if (code != static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID)) {
        TAG_LOGI(AAFwkTag::APPMGR, "OnReceived, code: %{public}u, flags: %{public}d", code,
            option.GetFlags());
    }
    std::u16string descriptor = AmsMgrStub::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");
        return ERR_INVALID_STATE;
    }
    return OnRemoteRequestInner(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 50:5
Spell: 
包含日志: 否
代码:
    if (code != static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID)) {
        TAG_LOGI(AAFwkTag::APPMGR, "OnReceived, code: %{public}u, flags: %{public}d", code,
            option.GetFlags());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 51:9
Spell: 
包含日志: 否
代码:
        TAG_LOGI(AAFwkTag::APPMGR, "OnReceived, code: %{public}u, flags: %{public}d", code,
            option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 56:5
Spell: 
包含日志: 否
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 57:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 63:21
Spell: OnRemoteRequestInner
包含日志: 否
代码:
int32_t AmsMgrStub::OnRemoteRequestInner(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    int retCode = ERR_OK;
    retCode = OnRemoteRequestInnerFirst(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerSecond(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerThird(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerFourth(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 68:5
Spell: 
包含日志: 否
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 72:5
Spell: 
包含日志: 否
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 76:5
Spell: 
包含日志: 否
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 80:5
Spell: 
包含日志: 否
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 86:21
Spell: OnRemoteRequestInnerFirst
包含日志: 否
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerFirst(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::LOAD_ABILITY):
            return HandleLoadAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::TERMINATE_ABILITY):
            return HandleTerminateAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_ABILITY_STATE):
            return HandleUpdateAbilityState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_EXTENSION_STATE):
            return HandleUpdateExtensionState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_STATE_CALLBACK):
            return HandleRegisterAppStateCallback(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PEOCESS_BY_ABILITY_TOKEN):
            return HandleKillProcessByAbilityToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_USERID):
            return HandleKillProcessesByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESS_WITH_ACCOUNT):
            return HandleKillProcessWithAccount(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION):
            return HandleKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ABILITY_ATTACH_TIMEOUT):
            return HandleAbilityAttachTimeOut(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::PREPARE_TERMINATE_ABILITY):
            return HandlePrepareTerminate(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_BYUID):
            return HandleKillApplicationByUid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_SELF):
            return HandleKillApplicationSelf(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_RUNNING_PROCESS_INFO_BY_TOKEN):
            return HandleGetRunningProcessInfoByToken(data, reply);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 89:5
Spell: 
包含日志: 否
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::LOAD_ABILITY):
            return HandleLoadAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::TERMINATE_ABILITY):
            return HandleTerminateAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_ABILITY_STATE):
            return HandleUpdateAbilityState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_EXTENSION_STATE):
            return HandleUpdateExtensionState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_STATE_CALLBACK):
            return HandleRegisterAppStateCallback(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PEOCESS_BY_ABILITY_TOKEN):
            return HandleKillProcessByAbilityToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_USERID):
            return HandleKillProcessesByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESS_WITH_ACCOUNT):
            return HandleKillProcessWithAccount(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION):
            return HandleKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ABILITY_ATTACH_TIMEOUT):
            return HandleAbilityAttachTimeOut(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::PREPARE_TERMINATE_ABILITY):
            return HandlePrepareTerminate(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_BYUID):
            return HandleKillApplicationByUid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_SELF):
            return HandleKillApplicationSelf(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_RUNNING_PROCESS_INFO_BY_TOKEN):
            return HandleGetRunningProcessInfoByToken(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 122:21
Spell: OnRemoteRequestInnerSecond
包含日志: 否
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerSecond(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::SET_ABILITY_FOREGROUNDING_FLAG):
            return HandleSetAbilityForegroundingFlagToAppRecord(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_ABILITY):
            return HandleStartSpecifiedAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_START_SPECIFIED_ABILITY_RESPONSE):
            return HandleRegisterStartSpecifiedAbilityResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_APPLICATION_INFO_BY_PROCESS_ID):
            return HandleGetApplicationInfoByProcessID(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::NOTIFY_APP_MGR_RECORD_EXIT_REASON):
            return HandleNotifyAppMgrRecordExitReason(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_APPLICATION_INFO_INSTALLED):
            return HandleUpdateApplicationInfoInstalled(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_CURRENT_USER_ID):
            return HandleSetCurrentUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ENABLE_START_PROCESS_FLAG_BY_USER_ID):
            return HandleSetEnableStartProcessFlagByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID):
            return HandleGetBundleNameByPid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_DEBUG_LISTENER):
            return HandleRegisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UNREGISTER_APP_DEBUG_LISTENER):
            return HandleUnregisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_APP_DEBUG):
            return HandleAttachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::DETACH_APP_DEBUG):
            return HandleDetachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_APP_WAITING_DEBUG):
            return HandleSetAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CANCEL_APP_WAITING_DEBUG):
            return HandleCancelAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_WAITING_DEBUG_APP):
            return HandleGetWaitingDebugApp(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_WAITING_DEBUG_APP):
            return HandleIsWaitingDebugApp(data, reply);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 125:5
Spell: 
包含日志: 否
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::SET_ABILITY_FOREGROUNDING_FLAG):
            return HandleSetAbilityForegroundingFlagToAppRecord(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_ABILITY):
            return HandleStartSpecifiedAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_START_SPECIFIED_ABILITY_RESPONSE):
            return HandleRegisterStartSpecifiedAbilityResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_APPLICATION_INFO_BY_PROCESS_ID):
            return HandleGetApplicationInfoByProcessID(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::NOTIFY_APP_MGR_RECORD_EXIT_REASON):
            return HandleNotifyAppMgrRecordExitReason(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_APPLICATION_INFO_INSTALLED):
            return HandleUpdateApplicationInfoInstalled(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_CURRENT_USER_ID):
            return HandleSetCurrentUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ENABLE_START_PROCESS_FLAG_BY_USER_ID):
            return HandleSetEnableStartProcessFlagByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID):
            return HandleGetBundleNameByPid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_DEBUG_LISTENER):
            return HandleRegisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UNREGISTER_APP_DEBUG_LISTENER):
            return HandleUnregisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_APP_DEBUG):
            return HandleAttachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::DETACH_APP_DEBUG):
            return HandleDetachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_APP_WAITING_DEBUG):
            return HandleSetAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CANCEL_APP_WAITING_DEBUG):
            return HandleCancelAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_WAITING_DEBUG_APP):
            return HandleGetWaitingDebugApp(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_WAITING_DEBUG_APP):
            return HandleIsWaitingDebugApp(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 164:21
Spell: OnRemoteRequestInnerThird
包含日志: 否
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerThird(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_NON_PERSIST_WAITING_DEBUG_FLAG):
            return HandleClearNonPersistWaitingDebugFlag(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_DEBUG_RESPONSE):
            return HandleRegisterAbilityDebugResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_ATTACH_DEBUG):
            return HandleIsAttachDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_PROCESS_BY_TOKEN):
            return HandleClearProcessByToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_PIDS):
            return HandleKillProcessesByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_PID_TO_PARENT):
            return HandleAttachPidToParent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_MEMORY_SIZE_SUFFICIENT):
            return HandleIsMemorySizeSufficent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_ENABLE_STATE):
            return HandleSetKeepAliveEnableState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACHED_TO_STATUS_BAR):
            return HandleAttachedToStatusBar(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::GET_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_PROCESS):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_MS_DELEGATE):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::BLOCK_PROCESS_CACHE_BY_PIDS):
            return HandleBlockProcessCacheByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_KILLED_FOR_UPGRADE_WEB):
            return HandleIsKilledForUpgradeWeb(data, reply);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 167:5
Spell: 
包含日志: 否
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_NON_PERSIST_WAITING_DEBUG_FLAG):
            return HandleClearNonPersistWaitingDebugFlag(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_DEBUG_RESPONSE):
            return HandleRegisterAbilityDebugResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_ATTACH_DEBUG):
            return HandleIsAttachDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_PROCESS_BY_TOKEN):
            return HandleClearProcessByToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_PIDS):
            return HandleKillProcessesByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_PID_TO_PARENT):
            return HandleAttachPidToParent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_MEMORY_SIZE_SUFFICIENT):
            return HandleIsMemorySizeSufficent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_ENABLE_STATE):
            return HandleSetKeepAliveEnableState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACHED_TO_STATUS_BAR):
            return HandleAttachedToStatusBar(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::GET_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_PROCESS):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_MS_DELEGATE):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::BLOCK_PROCESS_CACHE_BY_PIDS):
            return HandleBlockProcessCacheByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_KILLED_FOR_UPGRADE_WEB):
            return HandleIsKilledForUpgradeWeb(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 202:21
Spell: OnRemoteRequestInnerFourth
包含日志: 否
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerFourth(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_CONTAINS_ONLY_UI_EXTENSION):
            return HandleIsProcessContainsOnlyUIAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION):
            return HandleForceKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAN_UIABILITY_BY_USER_REQUEST):
            return HandleCleanAbilityByUserRequest(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION_BY_ACCESS_TOKEN_ID):
            return HandleKillProcessesByAccessTokenId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_ATTACHED):
            return HandleIsProcessAttached(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_CALLER_KILLING):
            return HandleIsCallerKilling(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_DKV):
            return HandleSetKeepAliveDkv(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_IN_BATCH):
            return HandleKillProcessesInBatch(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SEND_APP_SPAWN_UNINSTALL_DEBUG_HAP_MSG):
            return HandleSendAppSpawnUninstallDebugHapMsg(data);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 205:5
Spell: 
包含日志: 否
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_CONTAINS_ONLY_UI_EXTENSION):
            return HandleIsProcessContainsOnlyUIAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION):
            return HandleForceKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAN_UIABILITY_BY_USER_REQUEST):
            return HandleCleanAbilityByUserRequest(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION_BY_ACCESS_TOKEN_ID):
            return HandleKillProcessesByAccessTokenId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_ATTACHED):
            return HandleIsProcessAttached(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_CALLER_KILLING):
            return HandleIsCallerKilling(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_DKV):
            return HandleSetKeepAliveDkv(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_IN_BATCH):
            return HandleKillProcessesInBatch(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SEND_APP_SPAWN_UNINSTALL_DEBUG_HAP_MSG):
            return HandleSendAppSpawnUninstallDebugHapMsg(data);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 228:21
Spell: HandleLoadAbility
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleLoadAbility(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::shared_ptr<AbilityInfo> abilityInfo(data.ReadParcelable<AbilityInfo>());
    if (!abilityInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    std::shared_ptr<ApplicationInfo> appInfo(data.ReadParcelable<ApplicationInfo>());
    if (!appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    std::shared_ptr<AAFwk::Want> want(data.ReadParcelable<AAFwk::Want>());
    if (!want) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable want failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }
    std::shared_ptr<AbilityRuntime::LoadParam> loadParam(data.ReadParcelable<AbilityRuntime::LoadParam>());
    if (!loadParam) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable loadParam failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    LoadAbility(abilityInfo, appInfo, want, loadParam);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 232:5
Spell: 
包含日志: 否
代码:
    if (!abilityInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 233:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 238:5
Spell: 
包含日志: 否
代码:
    if (!appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 239:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 244:5
Spell: 
包含日志: 否
代码:
    if (!want) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable want failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 245:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable want failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 249:5
Spell: 
包含日志: 否
代码:
    if (!loadParam) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable loadParam failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 250:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable loadParam failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 258:21
Spell: HandleTerminateAbility
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleTerminateAbility(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    bool clearMissionFlag = data.ReadBool();
    TerminateAbility(token, clearMissionFlag);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 267:21
Spell: HandleUpdateAbilityState
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleUpdateAbilityState(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    int32_t state = data.ReadInt32();
    UpdateAbilityState(token, static_cast<AbilityState>(state));
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 276:21
Spell: HandleUpdateExtensionState
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleUpdateExtensionState(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    int32_t state = data.ReadInt32();
    UpdateExtensionState(token, static_cast<ExtensionState>(state));
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 284:21
Spell: HandleRegisterAppStateCallback
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleRegisterAppStateCallback(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IAppStateCallback> callback = nullptr;
    if (data.ReadBool()) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        callback = iface_cast<IAppStateCallback>(obj);
    }
    RegisterAppStateCallback(callback);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 288:5
Spell: 
包含日志: 否
代码:
    if (data.ReadBool()) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        callback = iface_cast<IAppStateCallback>(obj);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 296:21
Spell: HandleKillProcessByAbilityToken
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillProcessByAbilityToken(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();

    KillProcessByAbilityToken(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 305:21
Spell: HandleKillProcessesByUserId
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillProcessesByUserId(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    int32_t userId = data.ReadInt32();

    KillProcessesByUserId(userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 314:21
Spell: HandleKillProcessesByPids
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillProcessesByPids(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto size = data.ReadUint32();
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }
    std::vector<int32_t> pids;
    for (uint32_t i = 0; i < size; i++) {
        pids.emplace_back(data.ReadInt32());
    }

    KillProcessesByPids(pids);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 318:5
Spell: 
包含日志: 否
代码:
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 319:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 331:21
Spell: HandleAttachPidToParent
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleAttachPidToParent(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    sptr<IRemoteObject> callerToken = data.ReadRemoteObject();
    AttachPidToParent(token, callerToken);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 340:21
Spell: HandleKillProcessWithAccount
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillProcessWithAccount(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

    HITRACE_METER(HITRACE_TAG_APP);

    std::string bundleName = data.ReadString();
    int accountId = data.ReadInt32();
    bool clearPageStack = data.ReadBool();
    auto appIndex = data.ReadInt32();

    TAG_LOGI(AAFwkTag::APPMGR,
        "bundleName = %{public}s, accountId = %{public}d, clearPageStack = %{public}d",
        bundleName.c_str(), accountId, clearPageStack);

    int32_t result = KillProcessWithAccount(bundleName, accountId, clearPageStack, appIndex);
    reply.WriteInt32(result);

    TAG_LOGI(AAFwkTag::APPMGR, "end");

    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 342:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 351:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR,
        "bundleName = %{public}s, accountId = %{public}d, clearPageStack = %{public}d",
        bundleName.c_str(), accountId, clearPageStack);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 358:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 363:21
Spell: HandleKillProcessesInBatch
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillProcessesInBatch(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

    HITRACE_METER(HITRACE_TAG_APP);

    auto size = data.ReadUint32();
    TAG_LOGI(AAFwkTag::APPMGR, "pids.size=%{public}d", size);
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }
    std::vector<int32_t> pids;
    for (uint32_t i = 0; i < size; i++) {
        pids.emplace_back(data.ReadInt32());
    }

    int32_t result = KillProcessesInBatch(pids);
    reply.WriteInt32(result);

    TAG_LOGI(AAFwkTag::APPMGR, "end");

    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 365:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 370:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "pids.size=%{public}d", size);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 371:5
Spell: 
包含日志: 否
代码:
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 372:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 383:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 388:21
Spell: HandleKillApplication
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    bool clearPageStack = data.ReadBool();
    auto appIndex = data.ReadInt32();

    TAG_LOGW(AAFwkTag::APPMGR,
        "KillApplication,callingPid=%{public}d,bundleName=%{public}s,clearPageStack=%{public}d",
        IPCSkeleton::GetCallingPid(), bundleName.c_str(), clearPageStack);

    int32_t result = KillApplication(bundleName, clearPageStack, appIndex);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 395:5
Spell: 
包含日志: 否
代码:
    TAG_LOGW(AAFwkTag::APPMGR,
        "KillApplication,callingPid=%{public}d,bundleName=%{public}s,clearPageStack=%{public}d",
        IPCSkeleton::GetCallingPid(), bundleName.c_str(), clearPageStack);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 404:21
Spell: HandleForceKillApplication
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleForceKillApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    int userId = data.ReadInt32();
    int appIndex = data.ReadInt32();

    TAG_LOGI(AAFwkTag::APPMGR, "bundleName = %{public}s,userId=%{public}d,appIndex=%{public}d",
        bundleName.c_str(), userId, appIndex);

    int32_t result = ForceKillApplication(bundleName, userId, appIndex);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 411:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "bundleName = %{public}s,userId=%{public}d,appIndex=%{public}d",
        bundleName.c_str(), userId, appIndex);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 419:21
Spell: HandleKillProcessesByAccessTokenId
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillProcessesByAccessTokenId(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    int accessTokenId = data.ReadInt32();

    TAG_LOGI(AAFwkTag::APPMGR, "accessTokenId=%{public}d", accessTokenId);

    int32_t result = KillProcessesByAccessTokenId(accessTokenId);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 424:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "accessTokenId=%{public}d", accessTokenId);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 431:21
Spell: HandleKillApplicationByUid
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillApplicationByUid(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    int uid = data.ReadInt32();
    std::string reason = data.ReadString();
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationByUid,callingPid=%{public}d", IPCSkeleton::GetCallingPid());
    int32_t result = KillApplicationByUid(bundleName, uid, reason);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 437:5
Spell: 
包含日志: 否
代码:
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationByUid,callingPid=%{public}d", IPCSkeleton::GetCallingPid());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 443:21
Spell: HandleKillApplicationSelf
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleKillApplicationSelf(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationSelf,callingPid=%{public}d", IPCSkeleton::GetCallingPid());
    bool clearPageStack = data.ReadBool();
    std::string reason = data.ReadString();
    int32_t result = KillApplicationSelf(clearPageStack, reason);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "result write failed.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 446:5
Spell: 
包含日志: 否
代码:
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationSelf,callingPid=%{public}d", IPCSkeleton::GetCallingPid());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 450:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "result write failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 451:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "result write failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 457:21
Spell: HandleAbilityAttachTimeOut
包含日志: 否
代码:
int32_t AmsMgrStub::HandleAbilityAttachTimeOut(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    AbilityAttachTimeOut(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 465:21
Spell: HandlePrepareTerminate
包含日志: 否
代码:
int32_t AmsMgrStub::HandlePrepareTerminate(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    bool clearMissionFlag = data.ReadBool();
    PrepareTerminate(token, clearMissionFlag);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 473:18
Spell: UpdateExtensionState
包含日志: 否
代码:
void AmsMgrStub::UpdateExtensionState(const sptr<IRemoteObject> &token, const ExtensionState state)
{}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 476:21
Spell: HandleGetRunningProcessInfoByToken
包含日志: 否
代码:
int32_t AmsMgrStub::HandleGetRunningProcessInfoByToken(MessageParcel &data, MessageParcel &reply)
{
    RunningProcessInfo processInfo;
    auto token = data.ReadRemoteObject();
    GetRunningProcessInfoByToken(token, processInfo);
    if (reply.WriteParcelable(&processInfo)) {
        TAG_LOGE(AAFwkTag::APPMGR, "process info write failed.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 481:5
Spell: 
包含日志: 否
代码:
    if (reply.WriteParcelable(&processInfo)) {
        TAG_LOGE(AAFwkTag::APPMGR, "process info write failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 482:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "process info write failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 488:21
Spell: HandleSetAbilityForegroundingFlagToAppRecord
包含日志: 否
代码:
int32_t AmsMgrStub::HandleSetAbilityForegroundingFlagToAppRecord(MessageParcel &data, MessageParcel &reply)
{
    RunningProcessInfo processInfo;
    auto pid = static_cast<pid_t>(data.ReadInt32());
    SetAbilityForegroundingFlagToAppRecord(pid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 496:21
Spell: HandleStartSpecifiedAbility
包含日志: 否
代码:
int32_t AmsMgrStub::HandleStartSpecifiedAbility(MessageParcel &data, MessageParcel &reply)
{
    AAFwk::Want *want = data.ReadParcelable<AAFwk::Want>();
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }

    AbilityInfo *abilityInfo = data.ReadParcelable<AbilityInfo>();
    if (abilityInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "abilityInfo is nullptr.");
        delete want;
        return ERR_INVALID_VALUE;
    }
    StartSpecifiedAbility(*want, *abilityInfo, data.ReadInt32());
    delete want;
    delete abilityInfo;
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 499:5
Spell: 
包含日志: 否
代码:
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 500:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 505:5
Spell: 
包含日志: 否
代码:
    if (abilityInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "abilityInfo is nullptr.");
        delete want;
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 506:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "abilityInfo is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 516:21
Spell: HandleRegisterStartSpecifiedAbilityResponse
包含日志: 否
代码:
int32_t AmsMgrStub::HandleRegisterStartSpecifiedAbilityResponse(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> obj = data.ReadRemoteObject();
    sptr<IStartSpecifiedAbilityResponse> response = iface_cast<IStartSpecifiedAbilityResponse>(obj);
    RegisterStartSpecifiedAbilityResponse(response);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 524:21
Spell: HandleGetApplicationInfoByProcessID
包含日志: 否
代码:
int32_t AmsMgrStub::HandleGetApplicationInfoByProcessID(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    int32_t pid = data.ReadInt32();
    AppExecFwk::ApplicationInfo application;
    bool debug;
    int32_t result = GetApplicationInfoByProcessID(pid, application, debug);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write result error.");
        return ERR_INVALID_VALUE;
    }
    if (!reply.WriteParcelable(&application)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write application info failed");
        return ERR_INVALID_VALUE;
    }
    if (!reply.WriteBool(debug)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write debug info failed");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 531:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write result error.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 532:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write result error.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 535:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteParcelable(&application)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write application info failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 536:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write application info failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 539:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(debug)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write debug info failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 540:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write debug info failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 546:21
Spell: HandleNotifyAppMgrRecordExitReason
包含日志: 否
代码:
int32_t AmsMgrStub::HandleNotifyAppMgrRecordExitReason(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    int32_t pid = data.ReadInt32();
    int32_t reason = data.ReadInt32();
    std::string exitMsg = Str16ToStr8(data.ReadString16());
    int32_t result = NotifyAppMgrRecordExitReason(pid, reason, exitMsg);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write result failed.");
        return IPC_PROXY_ERR;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 548:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 553:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write result failed.");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 554:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write result failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 560:21
Spell: HandleUpdateApplicationInfoInstalled
包含日志: 否
代码:
int32_t AmsMgrStub::HandleUpdateApplicationInfoInstalled(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    int uid = data.ReadInt32();
    int32_t result = UpdateApplicationInfoInstalled(bundleName, uid);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 570:21
Spell: HandleSetCurrentUserId
包含日志: 否
代码:
int32_t AmsMgrStub::HandleSetCurrentUserId(MessageParcel &data, MessageParcel &reply)
{
    int32_t userId = data.ReadInt32();
    SetCurrentUserId(userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 577:21
Spell: HandleSetEnableStartProcessFlagByUserId
包含日志: 否
代码:
int32_t AmsMgrStub::HandleSetEnableStartProcessFlagByUserId(MessageParcel &data, MessageParcel &reply)
{
    int32_t userId = data.ReadInt32();
    bool enableStartProcess = data.ReadBool();
    SetEnableStartProcessFlagByUserId(userId, enableStartProcess);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 585:21
Spell: HandleGetBundleNameByPid
包含日志: 否
代码:
int32_t AmsMgrStub::HandleGetBundleNameByPid(MessageParcel &data, MessageParcel &reply)
{
    int32_t pid = data.ReadInt32();
    std::string bundleName;
    int32_t uid;
    GetBundleNameByPid(pid, bundleName, uid);

    reply.WriteString(bundleName);
    reply.WriteInt32(uid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 597:21
Spell: HandleRegisterAppDebugListener
包含日志: 否
代码:
int32_t AmsMgrStub::HandleRegisterAppDebugListener(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto appDebugLister = iface_cast<IAppDebugListener>(data.ReadRemoteObject());
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is null.");
        return ERR_INVALID_VALUE;
    }

    auto result = RegisterAppDebugListener(appDebugLister);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 599:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 601:5
Spell: 
包含日志: 否
代码:
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is null.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 602:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is null.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 607:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 608:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 614:21
Spell: HandleUnregisterAppDebugListener
包含日志: 否
代码:
int32_t AmsMgrStub::HandleUnregisterAppDebugListener(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto appDebugLister = iface_cast<IAppDebugListener>(data.ReadRemoteObject());
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is nullptr.");
        return ERR_INVALID_VALUE;
    }

    auto result = UnregisterAppDebugListener(appDebugLister);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 616:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 618:5
Spell: 
包含日志: 否
代码:
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is nullptr.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 619:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 624:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 625:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 631:21
Spell: HandleAttachAppDebug
包含日志: 否
代码:
int32_t AmsMgrStub::HandleAttachAppDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = AttachAppDebug(bundleName);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 633:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 635:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 636:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 641:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 642:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 648:21
Spell: HandleDetachAppDebug
包含日志: 否
代码:
int32_t AmsMgrStub::HandleDetachAppDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = DetachAppDebug(bundleName);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 650:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 652:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 653:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 658:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 659:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 665:21
Spell: HandleSetAppWaitingDebug
包含日志: 否
代码:
int32_t AmsMgrStub::HandleSetAppWaitingDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }
    auto isPersist = data.ReadBool();
    auto result = SetAppWaitingDebug(bundleName, isPersist);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 667:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 669:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 670:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 675:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 676:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 682:21
Spell: HandleCancelAppWaitingDebug
包含日志: 否
代码:
int32_t AmsMgrStub::HandleCancelAppWaitingDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto result = CancelAppWaitingDebug();
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 684:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 686:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 687:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 693:21
Spell: HandleGetWaitingDebugApp
包含日志: 否
代码:
int32_t AmsMgrStub::HandleGetWaitingDebugApp(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    std::vector<std::string> debugInfoList;
    auto result = GetWaitingDebugApp(debugInfoList);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

    int32_t listSize = static_cast<int32_t>(debugInfoList.size());
    if (listSize > MAX_APP_DEBUG_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count is %{public}d.", listSize);
        return ERR_INVALID_VALUE;
    }

    if (!reply.WriteInt32(listSize)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write list size.");
        return ERR_INVALID_VALUE;
    }

    if (!reply.WriteStringVector(debugInfoList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string vector debug info list.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 695:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 698:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 699:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 704:5
Spell: 
包含日志: 否
代码:
    if (listSize > MAX_APP_DEBUG_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count is %{public}d.", listSize);
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 705:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count is %{public}d.", listSize);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 709:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(listSize)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write list size.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 710:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write list size.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 714:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteStringVector(debugInfoList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string vector debug info list.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 715:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string vector debug info list.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 721:21
Spell: HandleIsWaitingDebugApp
包含日志: 否
代码:
int32_t AmsMgrStub::HandleIsWaitingDebugApp(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = IsWaitingDebugApp(bundleName);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 723:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 725:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 726:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 731:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 732:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 738:21
Spell: HandleSetKeepAliveEnableState
包含日志: 否
代码:
int32_t AmsMgrStub::HandleSetKeepAliveEnableState(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    auto enable = data.ReadBool();
    auto uid = data.ReadInt32();
    SetKeepAliveEnableState(bundleName, enable, uid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 740:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 748:21
Spell: HandleSetKeepAliveDkv
包含日志: 否
代码:
int32_t AmsMgrStub::HandleSetKeepAliveDkv(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    auto enable = data.ReadBool();
    auto uid = data.ReadInt32();
    SetKeepAliveDkv(bundleName, enable, uid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 750:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 758:21
Spell: HandleClearNonPersistWaitingDebugFlag
包含日志: 否
代码:
int32_t AmsMgrStub::HandleClearNonPersistWaitingDebugFlag(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    ClearNonPersistWaitingDebugFlag();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 760:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 765:21
Spell: HandleRegisterAbilityDebugResponse
包含日志: 否
代码:
int32_t AmsMgrStub::HandleRegisterAbilityDebugResponse(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto response = iface_cast<IAbilityDebugResponse>(data.ReadRemoteObject());
    if (response == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Response is nullptr.");
        return ERR_INVALID_VALUE;
    }

    auto result = RegisterAbilityDebugResponse(response);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 767:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 769:5
Spell: 
包含日志: 否
代码:
    if (response == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Response is nullptr.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 770:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Response is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 775:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 776:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 782:21
Spell: HandleIsAttachDebug
包含日志: 否
代码:
int32_t AmsMgrStub::HandleIsAttachDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = IsAttachDebug(bundleName);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 784:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 786:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 787:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 792:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 793:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 799:21
Spell: HandleClearProcessByToken
包含日志: 否
代码:
int32_t AmsMgrStub::HandleClearProcessByToken(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    ClearProcessByToken(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 807:21
Spell: HandleIsMemorySizeSufficent
包含日志: 否
代码:
int32_t AmsMgrStub::HandleIsMemorySizeSufficent(MessageParcel &data, MessageParcel &reply)
{
    auto result = IsMemorySizeSufficent();
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 810:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 811:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 817:21
Spell: HandleAttachedToStatusBar
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleAttachedToStatusBar(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    AttachedToStatusBar(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 825:21
Spell: HandleBlockProcessCacheByPids
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleBlockProcessCacheByPids(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto size = data.ReadUint32();
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size.");
        return ERR_INVALID_VALUE;
    }
    std::vector<int32_t> pids;
    for (uint32_t i = 0; i < size; i++) {
        pids.emplace_back(data.ReadInt32());
    }

    BlockProcessCacheByPids(pids);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 829:5
Spell: 
包含日志: 否
代码:
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 830:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 842:21
Spell: HandleIsKilledForUpgradeWeb
包含日志: 否
代码:
int32_t AmsMgrStub::HandleIsKilledForUpgradeWeb(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = IsKilledForUpgradeWeb(bundleName);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 844:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 846:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 847:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 852:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 853:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 859:21
Spell: HandleCleanAbilityByUserRequest
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleCleanAbilityByUserRequest(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    auto result = CleanAbilityByUserRequest(token);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "fail to write the result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 864:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "fail to write the result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 865:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "fail to write the result.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 871:21
Spell: HandleIsProcessContainsOnlyUIAbility
包含日志: 否
代码:
int32_t AmsMgrStub::HandleIsProcessContainsOnlyUIAbility(MessageParcel &data, MessageParcel &reply)
{
    auto pid = data.ReadUint32();

    auto result = IsProcessContainsOnlyUIAbility(pid);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result in HandleIsProcessContainsOnlyUIAbility.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 876:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result in HandleIsProcessContainsOnlyUIAbility.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 877:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result in HandleIsProcessContainsOnlyUIAbility.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 883:21
Spell: HandleIsProcessAttached
包含日志: 否
代码:
int32_t AmsMgrStub::HandleIsProcessAttached(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    auto isAttached = IsProcessAttached(token);
    if (!reply.WriteBool(isAttached)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 888:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(isAttached)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 889:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 895:21
Spell: HandleIsCallerKilling
包含日志: 否
代码:
int32_t AmsMgrStub::HandleIsCallerKilling(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto callerKey = data.ReadString();
    auto isCallerKilling = IsCallerKilling(callerKey);
    if (!reply.WriteBool(isCallerKilling)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 900:5
Spell: 
包含日志: 否
代码:
    if (!reply.WriteBool(isCallerKilling)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 901:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 907:21
Spell: HandleSendAppSpawnUninstallDebugHapMsg
包含日志: 否
代码:
ErrCode AmsMgrStub::HandleSendAppSpawnUninstallDebugHapMsg(MessageParcel &data)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto userId = data.ReadInt32();
    SendAppSpawnUninstallDebugHapMsg(userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
