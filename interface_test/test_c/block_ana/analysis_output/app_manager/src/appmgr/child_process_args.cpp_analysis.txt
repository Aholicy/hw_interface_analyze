代码块类型: Namespace Declaration
位置: 23:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool ChildProcessArgs::ReadFromParcel(Parcel &parcel)
{
    entryParams = Str16ToStr8(parcel.ReadString16());

    int32_t fdsSize = parcel.ReadInt32();
    if (fdsSize > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }
    auto messageParcel = static_cast<MessageParcel*>(&parcel);
    if (messageParcel == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }
    for (int32_t i = 0; i < fdsSize; i++) {
        std::string key = Str16ToStr8(parcel.ReadString16());
        if (!CheckFdKeyLength(key)) {
            return false;
        }
        int32_t fd = messageParcel->ReadFileDescriptor();
        fds.emplace(key, fd);
    }
    return true;
}

ChildProcessArgs *ChildProcessArgs::Unmarshalling(Parcel &parcel)
{
    ChildProcessArgs *obj = new (std::nothrow) ChildProcessArgs();
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }
    return obj;
}

bool ChildProcessArgs::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(entryParams));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, fds.size());
    auto messageParcel = static_cast<MessageParcel*>(&parcel);
    if (messageParcel == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }
    if (!CheckFdsSize()) {
        return false;
    }
    for (auto &item : fds) {
        if (!CheckFdKeyLength(item.first)) {
            return false;
        }
        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(item.first));
        if (!messageParcel->WriteFileDescriptor(item.second)) {
            TAG_LOGE(AAFwkTag::APPMGR, "WriteFileDescriptor failed, fd:%{private}d", item.second);
            return false;
        }
    }
    return true;
}

bool ChildProcessArgs::CheckFdsSize() const
{
    TAG_LOGD(AAFwkTag::APPMGR, "CheckFdsSize: %{public}zu", fds.size());
    if (fds.size() > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }
    return true;
}

bool ChildProcessArgs::CheckFdsKeyLength() const
{
    for (auto iter = fds.begin(); iter != fds.end(); iter++) {
        if (!CheckFdKeyLength(iter->first)) {
            return false;
        }
    }
    return true;
}

bool ChildProcessArgs::CheckFdKeyLength(const std::string &key)
{
    if (key.length() > CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fd key length must <= %{public}d, key:%{public}s",
            CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH, key.c_str());
        return false;
    }
    return true;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 24:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool ChildProcessArgs::ReadFromParcel(Parcel &parcel)
{
    entryParams = Str16ToStr8(parcel.ReadString16());

    int32_t fdsSize = parcel.ReadInt32();
    if (fdsSize > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }
    auto messageParcel = static_cast<MessageParcel*>(&parcel);
    if (messageParcel == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }
    for (int32_t i = 0; i < fdsSize; i++) {
        std::string key = Str16ToStr8(parcel.ReadString16());
        if (!CheckFdKeyLength(key)) {
            return false;
        }
        int32_t fd = messageParcel->ReadFileDescriptor();
        fds.emplace(key, fd);
    }
    return true;
}

ChildProcessArgs *ChildProcessArgs::Unmarshalling(Parcel &parcel)
{
    ChildProcessArgs *obj = new (std::nothrow) ChildProcessArgs();
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }
    return obj;
}

bool ChildProcessArgs::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(entryParams));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, fds.size());
    auto messageParcel = static_cast<MessageParcel*>(&parcel);
    if (messageParcel == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }
    if (!CheckFdsSize()) {
        return false;
    }
    for (auto &item : fds) {
        if (!CheckFdKeyLength(item.first)) {
            return false;
        }
        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(item.first));
        if (!messageParcel->WriteFileDescriptor(item.second)) {
            TAG_LOGE(AAFwkTag::APPMGR, "WriteFileDescriptor failed, fd:%{private}d", item.second);
            return false;
        }
    }
    return true;
}

bool ChildProcessArgs::CheckFdsSize() const
{
    TAG_LOGD(AAFwkTag::APPMGR, "CheckFdsSize: %{public}zu", fds.size());
    if (fds.size() > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }
    return true;
}

bool ChildProcessArgs::CheckFdsKeyLength() const
{
    for (auto iter = fds.begin(); iter != fds.end(); iter++) {
        if (!CheckFdKeyLength(iter->first)) {
            return false;
        }
    }
    return true;
}

bool ChildProcessArgs::CheckFdKeyLength(const std::string &key)
{
    if (key.length() > CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fd key length must <= %{public}d, key:%{public}s",
            CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH, key.c_str());
        return false;
    }
    return true;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 25:24
Spell: ReadFromParcel
包含日志: 是
代码:
bool ChildProcessArgs::ReadFromParcel(Parcel &parcel)
{
    entryParams = Str16ToStr8(parcel.ReadString16());

    int32_t fdsSize = parcel.ReadInt32();
    if (fdsSize > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }
    auto messageParcel = static_cast<MessageParcel*>(&parcel);
    if (messageParcel == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }
    for (int32_t i = 0; i < fdsSize; i++) {
        std::string key = Str16ToStr8(parcel.ReadString16());
        if (!CheckFdKeyLength(key)) {
            return false;
        }
        int32_t fd = messageParcel->ReadFileDescriptor();
        fds.emplace(key, fd);
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 30:5
Spell: 
包含日志: 是
代码:
    if (fdsSize > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 31:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 35:5
Spell: 
包含日志: 是
代码:
    if (messageParcel == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 36:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "static cast messageParcel failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 39:5
Spell: 
包含日志: 否
代码:
    for (int32_t i = 0; i < fdsSize; i++) {
        std::string key = Str16ToStr8(parcel.ReadString16());
        if (!CheckFdKeyLength(key)) {
            return false;
        }
        int32_t fd = messageParcel->ReadFileDescriptor();
        fds.emplace(key, fd);
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 41:9
Spell: 
包含日志: 否
代码:
        if (!CheckFdKeyLength(key)) {
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 50:37
Spell: Unmarshalling
包含日志: 是
代码:
ChildProcessArgs *ChildProcessArgs::Unmarshalling(Parcel &parcel)
{
    ChildProcessArgs *obj = new (std::nothrow) ChildProcessArgs();
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }
    return obj;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 53:5
Spell: 
包含日志: 是
代码:
    if (obj && !obj->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete obj;
        obj = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 54:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 61:24
Spell: Marshalling
包含日志: 是
代码:
bool ChildProcessArgs::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(entryParams));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, fds.size());
    auto messageParcel = static_cast<MessageParcel*>(&parcel);
    if (messageParcel == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }
    if (!CheckFdsSize()) {
        return false;
    }
    for (auto &item : fds) {
        if (!CheckFdKeyLength(item.first)) {
            return false;
        }
        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(item.first));
        if (!messageParcel->WriteFileDescriptor(item.second)) {
            TAG_LOGE(AAFwkTag::APPMGR, "WriteFileDescriptor failed, fd:%{private}d", item.second);
            return false;
        }
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 66:5
Spell: 
包含日志: 是
代码:
    if (messageParcel == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "static cast messageParcel failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "static cast messageParcel failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 70:5
Spell: 
包含日志: 否
代码:
    if (!CheckFdsSize()) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 86:24
Spell: CheckFdsSize
包含日志: 是
代码:
bool ChildProcessArgs::CheckFdsSize() const
{
    TAG_LOGD(AAFwkTag::APPMGR, "CheckFdsSize: %{public}zu", fds.size());
    if (fds.size() > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 88:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "CheckFdsSize: %{public}zu", fds.size());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 89:5
Spell: 
包含日志: 是
代码:
    if (fds.size() > CHILD_PROCESS_ARGS_FDS_MAX_COUNT) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 90:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fds count must <= %{public}d.", CHILD_PROCESS_ARGS_FDS_MAX_COUNT);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 96:24
Spell: CheckFdsKeyLength
包含日志: 否
代码:
bool ChildProcessArgs::CheckFdsKeyLength() const
{
    for (auto iter = fds.begin(); iter != fds.end(); iter++) {
        if (!CheckFdKeyLength(iter->first)) {
            return false;
        }
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 106:24
Spell: CheckFdKeyLength
包含日志: 是
代码:
bool ChildProcessArgs::CheckFdKeyLength(const std::string &key)
{
    if (key.length() > CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fd key length must <= %{public}d, key:%{public}s",
            CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH, key.c_str());
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 108:5
Spell: 
包含日志: 是
代码:
    if (key.length() > CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH) {
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fd key length must <= %{public}d, key:%{public}s",
            CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH, key.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 109:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::PROCESSMGR, "fd key length must <= %{public}d, key:%{public}s",
            CHILD_PROCESS_ARGS_FD_KEY_MAX_LENGTH, key.c_str());

--------------------------------------------------------------------------------
