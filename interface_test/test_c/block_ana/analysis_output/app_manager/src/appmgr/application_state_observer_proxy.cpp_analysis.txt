代码块类型: Namespace Declaration
位置: 22:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
namespace {
const int32_t ERR_INVALID_STUB = 32;
}
ApplicationStateObserverProxy::ApplicationStateObserverProxy(
    const sptr<IRemoteObject> &impl) : IRemoteProxy<IApplicationStateObserver>(impl)
{}

bool ApplicationStateObserverProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(ApplicationStateObserverProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

void ApplicationStateObserverProxy::OnForegroundApplicationChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_FOREGROUND_APPLICATION_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAbilityStateChanged(const AbilityStateData &abilityStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&abilityStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_ABILITY_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName: %{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnExtensionStateChanged(const AbilityStateData &abilityStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&abilityStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_EXTENSION_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessCreated(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_CREATED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessReused(const ProcessData &processData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_REUSED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessStateChanged(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

void ApplicationStateObserverProxy::OnWindowShow(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_SHOW),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnWindowHidden(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_HIDDEN),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessDied(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_DIED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnApplicationStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APPLICATION_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, , bundleName: %{public}s",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppStarted(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STARTED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppStopped(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnAppStopped, WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STOPPED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnPageShow(const PageStateData &pageStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&pageStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_SHOW),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnPageHide(const PageStateData &pageStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&pageStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_HIDE),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppCacheStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_CACHE_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

int32_t ApplicationStateObserverProxy::SendTransactCmd(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");
        return ERR_NULL_OBJECT;
    }

    return remote->SendRequest(code, data, reply, option);
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 23:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
namespace {
const int32_t ERR_INVALID_STUB = 32;
}
ApplicationStateObserverProxy::ApplicationStateObserverProxy(
    const sptr<IRemoteObject> &impl) : IRemoteProxy<IApplicationStateObserver>(impl)
{}

bool ApplicationStateObserverProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(ApplicationStateObserverProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

void ApplicationStateObserverProxy::OnForegroundApplicationChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_FOREGROUND_APPLICATION_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAbilityStateChanged(const AbilityStateData &abilityStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&abilityStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_ABILITY_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName: %{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnExtensionStateChanged(const AbilityStateData &abilityStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&abilityStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_EXTENSION_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessCreated(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_CREATED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessReused(const ProcessData &processData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_REUSED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessStateChanged(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

void ApplicationStateObserverProxy::OnWindowShow(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_SHOW),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnWindowHidden(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_HIDDEN),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnProcessDied(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_DIED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnApplicationStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APPLICATION_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, , bundleName: %{public}s",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppStarted(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STARTED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppStopped(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnAppStopped, WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STOPPED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnPageShow(const PageStateData &pageStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&pageStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_SHOW),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnPageHide(const PageStateData &pageStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&pageStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_HIDE),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }
}

void ApplicationStateObserverProxy::OnAppCacheStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_CACHE_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

int32_t ApplicationStateObserverProxy::SendTransactCmd(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");
        return ERR_NULL_OBJECT;
    }

    return remote->SendRequest(code, data, reply, option);
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 24:11
Spell: 
包含日志: 否
代码:
namespace {
const int32_t ERR_INVALID_STUB = 32;
}

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 27:32
Spell: ApplicationStateObserverProxy
包含日志: 否
代码:
ApplicationStateObserverProxy::ApplicationStateObserverProxy(
    const sptr<IRemoteObject> &impl) : IRemoteProxy<IApplicationStateObserver>(impl)
{}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 31:37
Spell: WriteInterfaceToken
包含日志: 是
代码:
bool ApplicationStateObserverProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(ApplicationStateObserverProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 33:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInterfaceToken(ApplicationStateObserverProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 34:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 40:37
Spell: OnForegroundApplicationChanged
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnForegroundApplicationChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_FOREGROUND_APPLICATION_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 45:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 52:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 53:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 58:37
Spell: OnAbilityStateChanged
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnAbilityStateChanged(const AbilityStateData &abilityStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&abilityStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_ABILITY_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName: %{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 63:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 70:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName: %{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 71:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName: %{public}s.",
            ret, abilityStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 76:37
Spell: OnExtensionStateChanged
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnExtensionStateChanged(const AbilityStateData &abilityStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&abilityStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_EXTENSION_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 81:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 88:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, abilityStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 89:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, abilityStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 94:37
Spell: OnProcessCreated
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnProcessCreated(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_CREATED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 99:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 106:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 107:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 112:37
Spell: OnProcessReused
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnProcessReused(const ProcessData &processData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_REUSED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 114:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 118:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 125:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 126:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 131:37
Spell: OnProcessStateChanged
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnProcessStateChanged(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 136:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 143:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 144:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 147:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 150:37
Spell: OnWindowShow
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnWindowShow(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_SHOW),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 155:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 162:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 163:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 168:37
Spell: OnWindowHidden
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnWindowHidden(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_HIDDEN),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 173:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 180:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 181:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 186:37
Spell: OnProcessDied
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnProcessDied(const ProcessData &processData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    data.WriteParcelable(&processData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_DIED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 191:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 198:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 199:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",
            ret, processData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 204:37
Spell: OnApplicationStateChanged
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnApplicationStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APPLICATION_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 209:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 210:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 217:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 218:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 223:37
Spell: OnAppStateChanged
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnAppStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, , bundleName: %{public}s",
            ret, appStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 228:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 229:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 236:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, , bundleName: %{public}s",
            ret, appStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 237:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, , bundleName: %{public}s",
            ret, appStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 242:37
Spell: OnAppStarted
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnAppStarted(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STARTED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 247:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 248:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 255:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 256:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 261:37
Spell: OnAppStopped
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnAppStopped(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnAppStopped, WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STOPPED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 266:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnAppStopped, WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 267:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "OnAppStopped, WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 274:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 275:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 280:37
Spell: OnPageShow
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnPageShow(const PageStateData &pageStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&pageStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_SHOW),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 285:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 286:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 293:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 294:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 299:37
Spell: OnPageHide
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnPageHide(const PageStateData &pageStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&pageStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_HIDE),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 304:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 305:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 312:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 313:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",
            ret, pageStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 318:37
Spell: OnAppCacheStateChanged
包含日志: 是
代码:
void ApplicationStateObserverProxy::OnAppCacheStateChanged(const AppStateData &appStateData)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    data.WriteParcelable(&appStateData);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_CACHE_STATE_CHANGED),
        data, reply, option);
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 323:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 324:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 331:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 332:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",
            ret, appStateData.bundleName.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 337:40
Spell: SendTransactCmd
包含日志: 是
代码:
int32_t ApplicationStateObserverProxy::SendTransactCmd(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");
        return ERR_NULL_OBJECT;
    }

    return remote->SendRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 341:5
Spell: 
包含日志: 是
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 342:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

--------------------------------------------------------------------------------
