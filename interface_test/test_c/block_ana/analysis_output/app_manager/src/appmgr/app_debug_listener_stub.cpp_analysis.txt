代码块类型: Method Declaration
位置: 32:27
Spell: OnRemoteRequest
包含日志: 否
代码:
int AppDebugListenerStub::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "code = %{public}u, flags= %{public}d", code, option.GetFlags());
    std::u16string descriptor = AppDebugListenerStub::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");
        return ERR_INVALID_STATE;
    }

    switch (code) {
        case static_cast<uint32_t>(IAppDebugListener::Message::ON_APP_DEBUG_STARTED):
            return HandleOnAppDebugStarted(data, reply);
        case static_cast<uint32_t>(IAppDebugListener::Message::ON_APP_DEBUG_STOPED):
            return HandleOnAppDebugStoped(data, reply);
    }

    TAG_LOGD(AAFwkTag::APPMGR, "AppDebugListenerStub::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 35:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "code = %{public}u, flags= %{public}d", code, option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 38:5
Spell: 
包含日志: 否
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 39:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 43:5
Spell: 
包含日志: 否
代码:
    switch (code) {
        case static_cast<uint32_t>(IAppDebugListener::Message::ON_APP_DEBUG_STARTED):
            return HandleOnAppDebugStarted(data, reply);
        case static_cast<uint32_t>(IAppDebugListener::Message::ON_APP_DEBUG_STOPED):
            return HandleOnAppDebugStoped(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 50:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AppDebugListenerStub::OnRemoteRequest end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 54:31
Spell: HandleOnAppDebugStarted
包含日志: 否
代码:
int32_t AppDebugListenerStub::HandleOnAppDebugStarted(MessageParcel &data, MessageParcel &reply)
{
    auto infoSize = data.ReadInt32();
    if (infoSize <= CYCLE_LIMIT_MIN || infoSize > CYCLE_LIMIT_MAX) {
        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit.");
        return ERR_INVALID_DATA;
    }

    std::vector<AppDebugInfo> appDebugInfos;
    for (int32_t index = 0; index < infoSize; index++) {
        std::unique_ptr<AppDebugInfo> appDebugInfo(data.ReadParcelable<AppDebugInfo>());
        if (appDebugInfo == nullptr) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read app debug infos failed.");
            return ERR_INVALID_DATA;
        }
        appDebugInfos.emplace_back(*appDebugInfo);
    }

    OnAppDebugStarted(appDebugInfos);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 57:5
Spell: 
包含日志: 否
代码:
    if (infoSize <= CYCLE_LIMIT_MIN || infoSize > CYCLE_LIMIT_MAX) {
        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 58:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 76:31
Spell: HandleOnAppDebugStoped
包含日志: 否
代码:
int32_t AppDebugListenerStub::HandleOnAppDebugStoped(MessageParcel &data, MessageParcel &reply)
{
    auto infoSize = data.ReadInt32();
    if (infoSize <= CYCLE_LIMIT_MIN || infoSize > CYCLE_LIMIT_MAX) {
        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit.");
        return ERR_INVALID_DATA;
    }

    std::vector<AppDebugInfo> appDebugInfos;
    for (int32_t index = 0; index < infoSize; index++) {
        std::unique_ptr<AppDebugInfo> appDebugInfo(data.ReadParcelable<AppDebugInfo>());
        if (appDebugInfo == nullptr) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read app debug infos failed.");
            return ERR_INVALID_DATA;
        }
        appDebugInfos.emplace_back(*appDebugInfo);
    }

    OnAppDebugStoped(appDebugInfos);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 79:5
Spell: 
包含日志: 否
代码:
    if (infoSize <= CYCLE_LIMIT_MIN || infoSize > CYCLE_LIMIT_MAX) {
        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 80:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit.");

--------------------------------------------------------------------------------
