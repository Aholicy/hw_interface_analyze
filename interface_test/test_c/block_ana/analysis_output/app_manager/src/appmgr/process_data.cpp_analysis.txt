代码块类型: Namespace Declaration
位置: 22:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool ProcessData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) && parcel.WriteInt32(pid) &&
        parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) && parcel.WriteInt32(gpuPid) &&
        parcel.WriteInt32(static_cast<int32_t>(state)) && parcel.WriteBool(isContinuousTask) &&
        parcel.WriteBool(isKeepAlive) && parcel.WriteBool(isFocused) && parcel.WriteInt32(requestProcCode) &&
        parcel.WriteInt32(processChangeReason) && parcel.WriteString(processName) &&
        parcel.WriteInt32(static_cast<int32_t>(processType)) && parcel.WriteInt32(static_cast<int32_t>(extensionType))
        && parcel.WriteInt32(renderUid) && parcel.WriteUint32(accessTokenId) &&
        parcel.WriteBool(isTestMode) && parcel.WriteInt32(exitReason) && parcel.WriteString16(Str8ToStr16(exitMsg)) &&
        parcel.WriteInt32(childUid) && parcel.WriteBool(isPreload)  && parcel.WriteBool(isPreloadModule));
}

bool ProcessData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    pid = parcel.ReadInt32();
    uid = parcel.ReadInt32();
    hostPid = parcel.ReadInt32();
    gpuPid = parcel.ReadInt32();
    state = static_cast<AppProcessState>(parcel.ReadInt32());
    isContinuousTask = parcel.ReadBool();
    isKeepAlive = parcel.ReadBool();
    isFocused = parcel.ReadBool();
    requestProcCode = parcel.ReadInt32();
    processChangeReason = parcel.ReadInt32();
    processName = parcel.ReadString();
    processType = static_cast<ProcessType>(parcel.ReadInt32());
    extensionType = static_cast<ExtensionAbilityType>(parcel.ReadInt32());
    renderUid = parcel.ReadInt32();
    accessTokenId = parcel.ReadUint32();
    isTestMode = parcel.ReadBool();
    exitReason = parcel.ReadInt32();
    exitMsg = Str16ToStr8(parcel.ReadString16());
    childUid = parcel.ReadInt32();
    isPreload = parcel.ReadBool();
    isPreloadModule = parcel.ReadBool();
    return true;
}

ProcessData *ProcessData::Unmarshalling(Parcel &parcel)
{
    ProcessData *processData = new (std::nothrow) ProcessData();
    if (processData && !processData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "processData failed, because ReadFromParcel failed");
        delete processData;
        processData = nullptr;
    }
    return processData;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 23:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool ProcessData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) && parcel.WriteInt32(pid) &&
        parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) && parcel.WriteInt32(gpuPid) &&
        parcel.WriteInt32(static_cast<int32_t>(state)) && parcel.WriteBool(isContinuousTask) &&
        parcel.WriteBool(isKeepAlive) && parcel.WriteBool(isFocused) && parcel.WriteInt32(requestProcCode) &&
        parcel.WriteInt32(processChangeReason) && parcel.WriteString(processName) &&
        parcel.WriteInt32(static_cast<int32_t>(processType)) && parcel.WriteInt32(static_cast<int32_t>(extensionType))
        && parcel.WriteInt32(renderUid) && parcel.WriteUint32(accessTokenId) &&
        parcel.WriteBool(isTestMode) && parcel.WriteInt32(exitReason) && parcel.WriteString16(Str8ToStr16(exitMsg)) &&
        parcel.WriteInt32(childUid) && parcel.WriteBool(isPreload)  && parcel.WriteBool(isPreloadModule));
}

bool ProcessData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    pid = parcel.ReadInt32();
    uid = parcel.ReadInt32();
    hostPid = parcel.ReadInt32();
    gpuPid = parcel.ReadInt32();
    state = static_cast<AppProcessState>(parcel.ReadInt32());
    isContinuousTask = parcel.ReadBool();
    isKeepAlive = parcel.ReadBool();
    isFocused = parcel.ReadBool();
    requestProcCode = parcel.ReadInt32();
    processChangeReason = parcel.ReadInt32();
    processName = parcel.ReadString();
    processType = static_cast<ProcessType>(parcel.ReadInt32());
    extensionType = static_cast<ExtensionAbilityType>(parcel.ReadInt32());
    renderUid = parcel.ReadInt32();
    accessTokenId = parcel.ReadUint32();
    isTestMode = parcel.ReadBool();
    exitReason = parcel.ReadInt32();
    exitMsg = Str16ToStr8(parcel.ReadString16());
    childUid = parcel.ReadInt32();
    isPreload = parcel.ReadBool();
    isPreloadModule = parcel.ReadBool();
    return true;
}

ProcessData *ProcessData::Unmarshalling(Parcel &parcel)
{
    ProcessData *processData = new (std::nothrow) ProcessData();
    if (processData && !processData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "processData failed, because ReadFromParcel failed");
        delete processData;
        processData = nullptr;
    }
    return processData;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 24:19
Spell: Marshalling
包含日志: 否
代码:
bool ProcessData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) && parcel.WriteInt32(pid) &&
        parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) && parcel.WriteInt32(gpuPid) &&
        parcel.WriteInt32(static_cast<int32_t>(state)) && parcel.WriteBool(isContinuousTask) &&
        parcel.WriteBool(isKeepAlive) && parcel.WriteBool(isFocused) && parcel.WriteInt32(requestProcCode) &&
        parcel.WriteInt32(processChangeReason) && parcel.WriteString(processName) &&
        parcel.WriteInt32(static_cast<int32_t>(processType)) && parcel.WriteInt32(static_cast<int32_t>(extensionType))
        && parcel.WriteInt32(renderUid) && parcel.WriteUint32(accessTokenId) &&
        parcel.WriteBool(isTestMode) && parcel.WriteInt32(exitReason) && parcel.WriteString16(Str8ToStr16(exitMsg)) &&
        parcel.WriteInt32(childUid) && parcel.WriteBool(isPreload)  && parcel.WriteBool(isPreloadModule));
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 37:19
Spell: ReadFromParcel
包含日志: 否
代码:
bool ProcessData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    pid = parcel.ReadInt32();
    uid = parcel.ReadInt32();
    hostPid = parcel.ReadInt32();
    gpuPid = parcel.ReadInt32();
    state = static_cast<AppProcessState>(parcel.ReadInt32());
    isContinuousTask = parcel.ReadBool();
    isKeepAlive = parcel.ReadBool();
    isFocused = parcel.ReadBool();
    requestProcCode = parcel.ReadInt32();
    processChangeReason = parcel.ReadInt32();
    processName = parcel.ReadString();
    processType = static_cast<ProcessType>(parcel.ReadInt32());
    extensionType = static_cast<ExtensionAbilityType>(parcel.ReadInt32());
    renderUid = parcel.ReadInt32();
    accessTokenId = parcel.ReadUint32();
    isTestMode = parcel.ReadBool();
    exitReason = parcel.ReadInt32();
    exitMsg = Str16ToStr8(parcel.ReadString16());
    childUid = parcel.ReadInt32();
    isPreload = parcel.ReadBool();
    isPreloadModule = parcel.ReadBool();
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 64:27
Spell: Unmarshalling
包含日志: 是
代码:
ProcessData *ProcessData::Unmarshalling(Parcel &parcel)
{
    ProcessData *processData = new (std::nothrow) ProcessData();
    if (processData && !processData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "processData failed, because ReadFromParcel failed");
        delete processData;
        processData = nullptr;
    }
    return processData;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 67:5
Spell: 
包含日志: 是
代码:
    if (processData && !processData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "processData failed, because ReadFromParcel failed");
        delete processData;
        processData = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 68:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "processData failed, because ReadFromParcel failed");

--------------------------------------------------------------------------------
