代码块类型: Method Declaration
位置: 27:29
Spell: OnRemoteRequest
包含日志: 否
代码:
int32_t ChildSchedulerStub::OnRemoteRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    std::u16string descriptor = ChildSchedulerStub::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

    switch (code) {
        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_LOAD_JS):
            return HandleScheduleLoadChild(data, reply);
        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_EXIT_PROCESS_SAFELY):
            return HandleScheduleExitProcessSafely(data, reply);
        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_RUN_NATIVE_PROC):
            return HandleScheduleRunNativeProc(data, reply);
    }
    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 30:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 34:5
Spell: 
包含日志: 否
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 35:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 39:5
Spell: 
包含日志: 否
代码:
    switch (code) {
        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_LOAD_JS):
            return HandleScheduleLoadChild(data, reply);
        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_EXIT_PROCESS_SAFELY):
            return HandleScheduleExitProcessSafely(data, reply);
        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_RUN_NATIVE_PROC):
            return HandleScheduleRunNativeProc(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 47:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnRemoteRequest end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 51:29
Spell: HandleScheduleLoadChild
包含日志: 否
代码:
int32_t ChildSchedulerStub::HandleScheduleLoadChild(MessageParcel &data, MessageParcel &reply)
{
    ScheduleLoadChild();
    return ERR_NONE;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 57:29
Spell: HandleScheduleExitProcessSafely
包含日志: 否
代码:
int32_t ChildSchedulerStub::HandleScheduleExitProcessSafely(MessageParcel &data, MessageParcel &reply)
{
    ScheduleExitProcessSafely();
    return ERR_NONE;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 63:29
Spell: HandleScheduleRunNativeProc
包含日志: 否
代码:
int32_t ChildSchedulerStub::HandleScheduleRunNativeProc(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> cb = data.ReadRemoteObject();
    ScheduleRunNativeProc(cb);
    return ERR_NONE;
}

--------------------------------------------------------------------------------
