代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool AppStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) && parcel.WriteInt32(uid) && parcel.WriteInt32(state)
        && parcel.WriteInt32(pid) && parcel.WriteUint32(accessTokenId) && parcel.WriteBool(isFocused)
        && parcel.WriteInt32(static_cast<int32_t>(extensionType)) && parcel.WriteInt32Vector(renderPids)
        && parcel.WriteString(callerBundleName) && parcel.WriteBool(isSplitScreenMode)
        && parcel.WriteBool(isFloatingWindowMode) && parcel.WriteInt32(appIndex) && parcel.WriteBool(isPreloadModule));
}

bool AppStateData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    uid = parcel.ReadInt32();
    state = parcel.ReadInt32();
    pid = parcel.ReadInt32();
    accessTokenId = parcel.ReadUint32();
    isFocused = parcel.ReadBool();
    extensionType = static_cast<ExtensionAbilityType>(parcel.ReadInt32());
    parcel.ReadInt32Vector(&renderPids);
    callerBundleName = parcel.ReadString();
    isSplitScreenMode = parcel.ReadBool();
    isFloatingWindowMode = parcel.ReadBool();
    appIndex = parcel.ReadInt32();
    isPreloadModule = parcel.ReadBool();

    return true;
}

AppStateData *AppStateData::Unmarshalling(Parcel &parcel)
{
    AppStateData *appStateData = new (std::nothrow) AppStateData();
    if (appStateData && !appStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "appStateData failed, because ReadFromParcel failed");
        delete appStateData;
        appStateData = nullptr;
    }
    return appStateData;
}

bool AppStateData::IsUIExtension(const AppExecFwk::ExtensionAbilityType type)
{
    return AAFwk::UIExtensionUtils::IsUIExtension(type);
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool AppStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) && parcel.WriteInt32(uid) && parcel.WriteInt32(state)
        && parcel.WriteInt32(pid) && parcel.WriteUint32(accessTokenId) && parcel.WriteBool(isFocused)
        && parcel.WriteInt32(static_cast<int32_t>(extensionType)) && parcel.WriteInt32Vector(renderPids)
        && parcel.WriteString(callerBundleName) && parcel.WriteBool(isSplitScreenMode)
        && parcel.WriteBool(isFloatingWindowMode) && parcel.WriteInt32(appIndex) && parcel.WriteBool(isPreloadModule));
}

bool AppStateData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    uid = parcel.ReadInt32();
    state = parcel.ReadInt32();
    pid = parcel.ReadInt32();
    accessTokenId = parcel.ReadUint32();
    isFocused = parcel.ReadBool();
    extensionType = static_cast<ExtensionAbilityType>(parcel.ReadInt32());
    parcel.ReadInt32Vector(&renderPids);
    callerBundleName = parcel.ReadString();
    isSplitScreenMode = parcel.ReadBool();
    isFloatingWindowMode = parcel.ReadBool();
    appIndex = parcel.ReadInt32();
    isPreloadModule = parcel.ReadBool();

    return true;
}

AppStateData *AppStateData::Unmarshalling(Parcel &parcel)
{
    AppStateData *appStateData = new (std::nothrow) AppStateData();
    if (appStateData && !appStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "appStateData failed, because ReadFromParcel failed");
        delete appStateData;
        appStateData = nullptr;
    }
    return appStateData;
}

bool AppStateData::IsUIExtension(const AppExecFwk::ExtensionAbilityType type)
{
    return AAFwk::UIExtensionUtils::IsUIExtension(type);
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 23:20
Spell: Marshalling
包含日志: 否
代码:
bool AppStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString(bundleName) && parcel.WriteInt32(uid) && parcel.WriteInt32(state)
        && parcel.WriteInt32(pid) && parcel.WriteUint32(accessTokenId) && parcel.WriteBool(isFocused)
        && parcel.WriteInt32(static_cast<int32_t>(extensionType)) && parcel.WriteInt32Vector(renderPids)
        && parcel.WriteString(callerBundleName) && parcel.WriteBool(isSplitScreenMode)
        && parcel.WriteBool(isFloatingWindowMode) && parcel.WriteInt32(appIndex) && parcel.WriteBool(isPreloadModule));
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 32:20
Spell: ReadFromParcel
包含日志: 否
代码:
bool AppStateData::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    uid = parcel.ReadInt32();
    state = parcel.ReadInt32();
    pid = parcel.ReadInt32();
    accessTokenId = parcel.ReadUint32();
    isFocused = parcel.ReadBool();
    extensionType = static_cast<ExtensionAbilityType>(parcel.ReadInt32());
    parcel.ReadInt32Vector(&renderPids);
    callerBundleName = parcel.ReadString();
    isSplitScreenMode = parcel.ReadBool();
    isFloatingWindowMode = parcel.ReadBool();
    appIndex = parcel.ReadInt32();
    isPreloadModule = parcel.ReadBool();

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 51:29
Spell: Unmarshalling
包含日志: 是
代码:
AppStateData *AppStateData::Unmarshalling(Parcel &parcel)
{
    AppStateData *appStateData = new (std::nothrow) AppStateData();
    if (appStateData && !appStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "appStateData failed, because ReadFromParcel failed");
        delete appStateData;
        appStateData = nullptr;
    }
    return appStateData;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 54:5
Spell: 
包含日志: 是
代码:
    if (appStateData && !appStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "appStateData failed, because ReadFromParcel failed");
        delete appStateData;
        appStateData = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 55:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "appStateData failed, because ReadFromParcel failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 62:20
Spell: IsUIExtension
包含日志: 否
代码:
bool AppStateData::IsUIExtension(const AppExecFwk::ExtensionAbilityType type)
{
    return AAFwk::UIExtensionUtils::IsUIExtension(type);
}

--------------------------------------------------------------------------------
