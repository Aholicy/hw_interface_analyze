代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool RenderStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteInt32(pid) && parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) &&
        parcel.WriteInt32(hostUid) && parcel.WriteInt32(state));
}

bool RenderStateData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(hostPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostPid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(hostUid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostUid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "state read failed.");
        return false;
    }
    return true;
};

RenderStateData *RenderStateData::Unmarshalling(Parcel &parcel)
{
    RenderStateData *renderStateData = new (std::nothrow) RenderStateData();
    if (renderStateData && !renderStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "renderStateData failed, because ReadFromParcel failed");
        delete renderStateData;
        renderStateData = nullptr;
    }
    return renderStateData;
}
}
}
--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool RenderStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteInt32(pid) && parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) &&
        parcel.WriteInt32(hostUid) && parcel.WriteInt32(state));
}

bool RenderStateData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(hostPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostPid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(hostUid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostUid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "state read failed.");
        return false;
    }
    return true;
};

RenderStateData *RenderStateData::Unmarshalling(Parcel &parcel)
{
    RenderStateData *renderStateData = new (std::nothrow) RenderStateData();
    if (renderStateData && !renderStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "renderStateData failed, because ReadFromParcel failed");
        delete renderStateData;
        renderStateData = nullptr;
    }
    return renderStateData;
}
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 23:23
Spell: Marshalling
包含日志: 否
代码:
bool RenderStateData::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteInt32(pid) && parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) &&
        parcel.WriteInt32(hostUid) && parcel.WriteInt32(state));
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 29:23
Spell: ReadFromParcel
包含日志: 是
代码:
bool RenderStateData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(hostPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostPid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(hostUid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostUid read failed.");
        return false;
    }
    if (!parcel.ReadInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "state read failed.");
        return false;
    }
    return true;
};

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 31:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid read failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 32:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "pid read failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 35:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid read failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 36:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "uid read failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 39:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(hostPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostPid read failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 40:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "hostPid read failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 43:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(hostUid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "hostUid read failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 44:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "hostUid read failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 47:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "state read failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 48:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "state read failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 54:35
Spell: Unmarshalling
包含日志: 是
代码:
RenderStateData *RenderStateData::Unmarshalling(Parcel &parcel)
{
    RenderStateData *renderStateData = new (std::nothrow) RenderStateData();
    if (renderStateData && !renderStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "renderStateData failed, because ReadFromParcel failed");
        delete renderStateData;
        renderStateData = nullptr;
    }
    return renderStateData;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 57:5
Spell: 
包含日志: 是
代码:
    if (renderStateData && !renderStateData->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "renderStateData failed, because ReadFromParcel failed");
        delete renderStateData;
        renderStateData = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 58:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "renderStateData failed, because ReadFromParcel failed");

--------------------------------------------------------------------------------
