代码块类型: Method Declaration
位置: 27:32
Spell: WriteInterfaceToken
包含日志: 否
代码:
bool AbilityInfoCallbackProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(AbilityInfoCallbackProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 29:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(AbilityInfoCallbackProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 30:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 36:32
Spell: NotifyAbilityToken
包含日志: 否
代码:
void AbilityInfoCallbackProxy::NotifyAbilityToken(const sptr<IRemoteObject> token, const Want &want)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    data.WriteRemoteObject(token);
    data.WriteParcelable(&want);
    int32_t ret = SendTransactCmd(IAbilityInfoCallback::Notify_ABILITY_TOKEN, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return;
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 41:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 48:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 49:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 54:32
Spell: NotifyRestartSpecifiedAbility
包含日志: 否
代码:
void AbilityInfoCallbackProxy::NotifyRestartSpecifiedAbility(const sptr<IRemoteObject> &token)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    data.WriteRemoteObject(token);
    int32_t ret = SendTransactCmd(IAbilityInfoCallback::Notify_RESTART_SPECIFIED_ABILITY, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 59:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 65:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 66:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 70:32
Spell: NotifyStartSpecifiedAbility
包含日志: 否
代码:
void AbilityInfoCallbackProxy::NotifyStartSpecifiedAbility(const sptr<IRemoteObject> &callerToken,
    const Want &want, int requestCode, sptr<Want> &extraParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    data.WriteRemoteObject(callerToken);
    data.WriteParcelable(&want);
    data.WriteInt32(requestCode);
    int32_t ret = SendTransactCmd(IAbilityInfoCallback::Notify_START_SPECIFIED_ABILITY, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest failed, err: %{public}d", ret);
        return;
    }
    sptr<Want> tempWant = reply.ReadParcelable<Want>();
    if (tempWant != nullptr) {
        SetExtraParam(tempWant, extraParam);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 76:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 84:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest failed, err: %{public}d", ret);
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 85:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest failed, err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 89:5
Spell: 
包含日志: 否
代码:
    if (tempWant != nullptr) {
        SetExtraParam(tempWant, extraParam);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 94:32
Spell: SetExtraParam
包含日志: 否
代码:
void AbilityInfoCallbackProxy::SetExtraParam(const sptr<Want> &want, sptr<Want> &extraParam)
{
    if (!want || !extraParam) {
        TAG_LOGE(AAFwkTag::APPMGR, "invalid param");
        return;
    }

    sptr<IRemoteObject> tempCallBack = want->GetRemoteObject(Want::PARAM_RESV_ABILITY_INFO_CALLBACK);
    if (tempCallBack == nullptr) {
        return;
    }
    extraParam->SetParam(Want::PARAM_RESV_REQUEST_PROC_CODE,
        want->GetIntParam(Want::PARAM_RESV_REQUEST_PROC_CODE, 0));
    extraParam->SetParam(Want::PARAM_RESV_REQUEST_TOKEN_CODE,
        want->GetIntParam(Want::PARAM_RESV_REQUEST_TOKEN_CODE, 0));
    extraParam->SetParam(Want::PARAM_RESV_ABILITY_INFO_CALLBACK, tempCallBack);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 96:5
Spell: 
包含日志: 否
代码:
    if (!want || !extraParam) {
        TAG_LOGE(AAFwkTag::APPMGR, "invalid param");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 97:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "invalid param");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 102:5
Spell: 
包含日志: 否
代码:
    if (tempCallBack == nullptr) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 112:32
Spell: NotifyStartAbilityResult
包含日志: 否
代码:
void AbilityInfoCallbackProxy::NotifyStartAbilityResult(const Want &want, int result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    data.WriteParcelable(&want);
    data.WriteInt32(result);
    int32_t ret = SendTransactCmd(IAbilityInfoCallback::Notify_START_ABILITY_RESULT, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "err: %{public}d", ret);
        return;
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 117:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 124:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "err: %{public}d", ret);
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 125:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 130:35
Spell: SendTransactCmd
包含日志: 否
代码:
int32_t AbilityInfoCallbackProxy::SendTransactCmd(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "null remote");
        return ERR_NULL_OBJECT;
    }

    return remote->SendRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 134:5
Spell: 
包含日志: 否
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "null remote");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 135:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

--------------------------------------------------------------------------------
