代码块类型: Method Declaration
位置: 33:19
Spell: IsProcessContainsOnlyUIAbility
包含日志: 否
代码:
bool AmsMgrProxy::IsProcessContainsOnlyUIAbility(const pid_t pid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "IsProcessContainsOnlyUIAbility start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return false;
    }
    data.WriteInt32(static_cast<int32_t>(pid));
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(
            IAmsMgr::Message::IS_PROCESS_CONTAINS_ONLY_UI_EXTENSION), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return false;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "IsProcessContainsOnlyUIAbility end");
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 35:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "IsProcessContainsOnlyUIAbility start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 39:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 46:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 47:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 50:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "IsProcessContainsOnlyUIAbility end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 54:19
Spell: WriteInterfaceToken
包含日志: 否
代码:
bool AmsMgrProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(AmsMgrProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 56:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInterfaceToken(AmsMgrProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 57:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");

--------------------------------------------------------------------------------
代码块类型: Function Declaration
位置: 63:6
Spell: WriteTokenObject
包含日志: 否
代码:
bool WriteTokenObject(MessageParcel &data, sptr<IRemoteObject> token)
{
    if (token) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag or token");
            return false;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");
            return false;
        }
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 65:5
Spell: 
包含日志: 否
代码:
    if (token) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag or token");
            return false;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");
            return false;
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 66:9
Spell: 
包含日志: 否
代码:
        if (!data.WriteBool(true) || !data.WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag or token");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag or token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 71:9
Spell: 
包含日志: 否
代码:
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 72:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 80:19
Spell: LoadAbility
包含日志: 否
代码:
void AmsMgrProxy::LoadAbility(const std::shared_ptr<AbilityInfo> &abilityInfo,
    const std::shared_ptr<ApplicationInfo> &appInfo,
    const std::shared_ptr<AAFwk::Want> &want, std::shared_ptr<AbilityRuntime::LoadParam> loadParam)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    if (!abilityInfo || !appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "param error");
        return;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    data.WriteParcelable(abilityInfo.get());
    data.WriteParcelable(appInfo.get());
    if (!data.WriteParcelable(want.get())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write want failed");
        return;
    }
    if (!data.WriteParcelable(loadParam.get())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data loadParam failed");
        return;
    }

    int32_t ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::LOAD_ABILITY), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 84:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 85:5
Spell: 
包含日志: 否
代码:
    if (!abilityInfo || !appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "param error");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 86:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "param error");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 93:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 99:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteParcelable(want.get())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write want failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 100:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write want failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 103:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteParcelable(loadParam.get())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data loadParam failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 104:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write data loadParam failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 109:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 110:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 112:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 115:19
Spell: TerminateAbility
包含日志: 否
代码:
void AmsMgrProxy::TerminateAbility(const sptr<IRemoteObject> &token, bool clearMissionFlag)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    if (!data.WriteBool(clearMissionFlag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write clearMissionFlag");
        return;
    }
    int32_t ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::TERMINATE_ABILITY), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 117:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 121:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 124:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 125:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 128:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(clearMissionFlag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write clearMissionFlag");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 129:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write clearMissionFlag");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 133:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 134:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 136:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 139:19
Spell: UpdateAbilityState
包含日志: 否
代码:
void AmsMgrProxy::UpdateAbilityState(const sptr<IRemoteObject> &token, const AbilityState state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    data.WriteInt32(static_cast<int32_t>(state));
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::UPDATE_ABILITY_STATE), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 141:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 145:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 148:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 149:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 155:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 156:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 158:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 161:19
Spell: UpdateExtensionState
包含日志: 否
代码:
void AmsMgrProxy::UpdateExtensionState(const sptr<IRemoteObject> &token, const ExtensionState state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "UpdateExtensionState begin");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    data.WriteInt32(static_cast<int32_t>(state));
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::UPDATE_EXTENSION_STATE), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 163:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "UpdateExtensionState begin");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 167:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 170:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 171:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 177:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 178:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 180:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 183:19
Spell: RegisterAppStateCallback
包含日志: 否
代码:
void AmsMgrProxy::RegisterAppStateCallback(const sptr<IAppStateCallback> &callback)
{
    TAG_LOGD(AAFwkTag::APPMGR, "begin");
    if (!callback) {
        TAG_LOGE(AAFwkTag::APPMGR, "callback null");
        return;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (callback->AsObject()) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callback->AsObject())) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag and callback");
            return;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");
            return;
        }
    }

    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_STATE_CALLBACK), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 185:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "begin");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 186:5
Spell: 
包含日志: 否
代码:
    if (!callback) {
        TAG_LOGE(AAFwkTag::APPMGR, "callback null");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 187:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "callback null");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 194:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 198:5
Spell: 
包含日志: 否
代码:
    if (callback->AsObject()) {
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callback->AsObject())) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag and callback");
            return;
        }
    } else {
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");
            return;
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 199:9
Spell: 
包含日志: 否
代码:
        if (!data.WriteBool(true) || !data.WriteRemoteObject(callback->AsObject())) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag and callback");
            return;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 200:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag and callback");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 204:9
Spell: 
包含日志: 否
代码:
        if (!data.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");
            return;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 205:13
Spell: 
包含日志: 否
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 212:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 213:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 215:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 218:19
Spell: KillProcessByAbilityToken
包含日志: 否
代码:
void AmsMgrProxy::KillProcessByAbilityToken(const sptr<IRemoteObject> &token)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    int32_t ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_PEOCESS_BY_ABILITY_TOKEN),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 220:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 224:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 227:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 228:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 233:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 234:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 236:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 239:19
Spell: KillProcessesByUserId
包含日志: 否
代码:
void AmsMgrProxy::KillProcessesByUserId(int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");
        return;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_USERID), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "ending");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 241:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 245:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 248:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 249:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 254:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 255:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 257:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "ending");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 260:19
Spell: KillProcessesByPids
包含日志: 否
代码:
void AmsMgrProxy::KillProcessesByPids(std::vector<int32_t> &pids)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }
    if (!data.WriteUint32(pids.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");
        return;
    }
    for (const auto &pid: pids) {
        if (!data.WriteInt32(pid)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed");
            return;
        }
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_PIDS), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 262:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 267:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 268:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 271:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(pids.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 272:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 283:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 284:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 286:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 289:19
Spell: AttachPidToParent
包含日志: 否
代码:
void AmsMgrProxy::AttachPidToParent(const sptr<IRemoteObject> &token, const sptr<IRemoteObject> &callerToken)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    if (!data.WriteRemoteObject(callerToken)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write callerToken");
        return;
    }
    int32_t ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::ATTACH_PID_TO_PARENT),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 291:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 295:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 298:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 299:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 302:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(callerToken)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write callerToken");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 303:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write callerToken");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 308:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 309:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 311:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 314:22
Spell: KillProcessWithAccount
包含日志: 否
代码:
int32_t AmsMgrProxy::KillProcessWithAccount(
    const std::string &bundleName, const int accountId, const bool clearPageStack, int32_t appIndex)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");

    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(accountId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteBool(clearPageStack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_FLATTEN_OBJECT;
    }

    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESS_WITH_ACCOUNT), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

    TAG_LOGD(AAFwkTag::APPMGR, "end");

    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 317:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 322:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 326:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 327:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 331:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(accountId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 332:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 336:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(clearPageStack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 337:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 341:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 342:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 348:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 349:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 353:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 358:22
Spell: KillProcessesInBatch
包含日志: 否
代码:
int32_t AmsMgrProxy::KillProcessesInBatch(const std::vector<int32_t> &pids)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteUint32(pids.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");
        return ERR_FLATTEN_OBJECT;
    }
    for (const auto &pid: pids) {
        if (!data.WriteInt32(pid)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed");
            return ERR_FLATTEN_OBJECT;
        }
    }

    int32_t ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_IN_BATCH),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 363:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 367:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(pids.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 368:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 380:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 381:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 388:22
Spell: KillApplication
包含日志: 否
代码:
int32_t AmsMgrProxy::KillApplication(const std::string &bundleName, bool clearPageStack, int32_t appIndex)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteBool(clearPageStack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_FLATTEN_OBJECT;
    }

    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 390:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 394:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 398:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 399:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 403:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(clearPageStack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 404:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 408:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 409:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 415:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 416:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 422:22
Spell: ForceKillApplication
包含日志: 否
代码:
int32_t AmsMgrProxy::ForceKillApplication(const std::string &bundleName,
    const int userId, const int appIndex)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bundleName failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_FLATTEN_OBJECT;
    }

    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 425:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 429:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 433:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bundleName failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 434:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bundleName failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 438:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 439:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 443:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 444:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 450:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 451:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 457:22
Spell: KillProcessesByAccessTokenId
包含日志: 否
代码:
int32_t AmsMgrProxy::KillProcessesByAccessTokenId(const uint32_t accessTokenId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(accessTokenId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel accessTokenId failed");
        return ERR_FLATTEN_OBJECT;
    }

    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION_BY_ACCESS_TOKEN_ID),
            data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 459:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 463:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 467:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(accessTokenId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel accessTokenId failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 468:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel accessTokenId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 475:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 476:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 482:22
Spell: UpdateApplicationInfoInstalled
包含日志: 否
代码:
int32_t AmsMgrProxy::UpdateApplicationInfoInstalled(const std::string &bundleName, const int uid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid write failed.");
        return ERR_FLATTEN_OBJECT;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::UPDATE_APPLICATION_INFO_INSTALLED),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 484:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 488:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 491:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 492:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 495:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 496:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "uid write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 502:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 503:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 509:22
Spell: KillApplicationByUid
包含日志: 否
代码:
int32_t AmsMgrProxy::KillApplicationByUid(const std::string &bundleName, const int uid,
    const std::string& reason)
{
    TAG_LOGI(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed to write bundle name");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write uid");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteString(reason)) {
        TAG_LOGE(AAFwkTag::APPMGR, "failedto write reason");
        return ERR_FLATTEN_OBJECT;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_BYUID), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 512:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 516:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 519:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed to write bundle name");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 520:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "failed to write bundle name");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 523:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write uid");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 524:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write uid");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 527:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(reason)) {
        TAG_LOGE(AAFwkTag::APPMGR, "failedto write reason");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 528:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "failedto write reason");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 533:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 534:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 540:22
Spell: KillApplicationSelf
包含日志: 否
代码:
int32_t AmsMgrProxy::KillApplicationSelf(const bool clearPageStack, const std::string& reason)
{
    TAG_LOGI(AAFwkTag::APPMGR, "call");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteBool(clearPageStack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteString(reason)) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed to write reason");
        return ERR_FLATTEN_OBJECT;
    }

    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_SELF), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 542:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 546:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 550:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(clearPageStack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 551:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel bool failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 555:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(reason)) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed to write reason");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 556:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "failed to write reason");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 562:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 563:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 569:19
Spell: AbilityAttachTimeOut
包含日志: 否
代码:
void AmsMgrProxy::AbilityAttachTimeOut(const sptr<IRemoteObject> &token)
{
    TAG_LOGD(AAFwkTag::APPMGR, "beginning");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::ABILITY_ATTACH_TIMEOUT), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 571:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "beginning");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 575:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 578:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 579:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 584:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 585:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 587:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 590:19
Spell: PrepareTerminate
包含日志: 否
代码:
void AmsMgrProxy::PrepareTerminate(const sptr<IRemoteObject> &token, bool clearMissionFlag)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    if (!data.WriteBool(clearMissionFlag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write clearMissionFlag");
        return;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::PREPARE_TERMINATE_ABILITY),
            data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 592:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 596:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 599:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 600:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 603:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(clearMissionFlag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write clearMissionFlag");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 604:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write clearMissionFlag");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 610:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 611:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 613:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 616:19
Spell: GetRunningProcessInfoByToken
包含日志: 否
代码:
void AmsMgrProxy::GetRunningProcessInfoByToken(
    const sptr<IRemoteObject> &token, AppExecFwk::RunningProcessInfo &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        return;
    }

    auto ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::GET_RUNNING_PROCESS_INFO_BY_TOKEN), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return;
    }

    std::unique_ptr<AppExecFwk::RunningProcessInfo> processInfo(reply.ReadParcelable<AppExecFwk::RunningProcessInfo>());
    if (processInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info faild");
        return;
    }

    info = *processInfo;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 622:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 626:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 632:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 633:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 638:5
Spell: 
包含日志: 否
代码:
    if (processInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info faild");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 639:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info faild");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 646:19
Spell: SetAbilityForegroundingFlagToAppRecord
包含日志: 否
代码:
void AmsMgrProxy::SetAbilityForegroundingFlagToAppRecord(const pid_t pid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "calling");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteInt32(static_cast<int32_t>(pid))) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");
        return;
    }

    auto ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::SET_ABILITY_FOREGROUNDING_FLAG), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 648:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "calling");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 652:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 656:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(static_cast<int32_t>(pid))) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 657:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 663:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 664:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 668:19
Spell: StartSpecifiedAbility
包含日志: 否
代码:
void AmsMgrProxy::StartSpecifiedAbility(const AAFwk::Want &want, const AppExecFwk::AbilityInfo &abilityInfo,
    int32_t requestId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteParcelable(&want) || !data.WriteParcelable(&abilityInfo) ||
        !data.WriteInt32(requestId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");
        return;
    }

    auto ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_ABILITY), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 674:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 678:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteParcelable(&want) || !data.WriteParcelable(&abilityInfo) ||
        !data.WriteInt32(requestId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 680:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 686:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 687:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 691:19
Spell: StartSpecifiedProcess
包含日志: 否
代码:
void AmsMgrProxy::StartSpecifiedProcess(const AAFwk::Want &want, const AppExecFwk::AbilityInfo &abilityInfo,
    int32_t requestId)

{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");
        return;
    }

    if (!data.WriteParcelable(&want) || !data.WriteParcelable(&abilityInfo) ||
        data.WriteInt32(requestId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");
        return;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");
        return;
    }
    auto ret = remote->SendRequest(
        static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_PROCESS), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 698:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 699:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 703:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteParcelable(&want) || !data.WriteParcelable(&abilityInfo) ||
        data.WriteInt32(requestId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 705:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 710:5
Spell: 
包含日志: 否
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 711:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 716:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 717:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 721:19
Spell: RegisterStartSpecifiedAbilityResponse
包含日志: 否
代码:
void AmsMgrProxy::RegisterStartSpecifiedAbilityResponse(const sptr<IStartSpecifiedAbilityResponse> &response)
{
    TAG_LOGD(AAFwkTag::APPMGR, "Register multi instances response by proxy.");
    if (!response) {
        TAG_LOGE(AAFwkTag::APPMGR, "response null");
        return;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(response->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write remote obj failed");
        return;
    }

    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::REGISTER_START_SPECIFIED_ABILITY_RESPONSE), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 723:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "Register multi instances response by proxy.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 724:5
Spell: 
包含日志: 否
代码:
    if (!response) {
        TAG_LOGE(AAFwkTag::APPMGR, "response null");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 725:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "response null");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 732:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 735:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(response->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write remote obj failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 736:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write remote obj failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 742:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 743:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 747:18
Spell: GetApplicationInfoByProcessID
包含日志: 否
代码:
int AmsMgrProxy::GetApplicationInfoByProcessID(const int pid, AppExecFwk::ApplicationInfo &application, bool &debug)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "token write error");
        return ERR_FLATTEN_OBJECT;
    }
    data.WriteInt32(pid);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::GET_APPLICATION_INFO_BY_PROCESS_ID), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "send request fail");
        return ret;
    }
    auto result = reply.ReadInt32();
    if (result != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "reply result false");
        return result;
    }
    std::unique_ptr<AppExecFwk::ApplicationInfo> info(reply.ReadParcelable<AppExecFwk::ApplicationInfo>());
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "readParcelableInfo failed");
        return ERR_NAME_NOT_FOUND;
    }
    application = *info;
    debug = reply.ReadBool();
    TAG_LOGD(AAFwkTag::APPMGR, "get parcelable info success");
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 752:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "token write error");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 753:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "token write error");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 759:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "send request fail");
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 760:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "send request fail");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 764:5
Spell: 
包含日志: 否
代码:
    if (result != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "reply result false");
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 765:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "reply result false");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 769:5
Spell: 
包含日志: 否
代码:
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "readParcelableInfo failed");
        return ERR_NAME_NOT_FOUND;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 770:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "readParcelableInfo failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 775:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "get parcelable info success");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 779:22
Spell: NotifyAppMgrRecordExitReason
包含日志: 否
代码:
int32_t AmsMgrProxy::NotifyAppMgrRecordExitReason(int32_t pid, int32_t reason, const std::string &exitMsg)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "token write error");
        return IPC_PROXY_ERR;
    }
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed");
        return IPC_PROXY_ERR;
    }
    if (!data.WriteInt32(reason)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write reason failed");
        return IPC_PROXY_ERR;
    }
    if (!data.WriteString16(Str8ToStr16(exitMsg))) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write exitMsg failed");
        return IPC_PROXY_ERR;
    }
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::NOTIFY_APP_MGR_RECORD_EXIT_REASON), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "send request fail");
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 781:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 785:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "token write error");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 786:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "token write error");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 789:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 790:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 793:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(reason)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write reason failed");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 794:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write reason failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 797:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString16(Str8ToStr16(exitMsg))) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write exitMsg failed");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 798:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write exitMsg failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 803:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "send request fail");
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 804:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "send request fail");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 810:19
Spell: SetCurrentUserId
包含日志: 否
代码:
void AmsMgrProxy::SetCurrentUserId(const int32_t userId)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write userId");
        return;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::SET_CURRENT_USER_ID),
            data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 812:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 816:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 819:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write userId");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 820:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write userId");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 826:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 827:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 829:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 832:19
Spell: SetEnableStartProcessFlagByUserId
包含日志: 否
代码:
void AmsMgrProxy::SetEnableStartProcessFlagByUserId(int32_t userId, bool enableStartProcess)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write userId");
        return;
    }
    if (!data.WriteBool(enableStartProcess)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write enableStartProcess");
        return;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::ENABLE_START_PROCESS_FLAG_BY_USER_ID),
            data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 834:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 838:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 841:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write userId");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 842:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write userId");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 845:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(enableStartProcess)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write enableStartProcess");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 846:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write enableStartProcess");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 852:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 853:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 857:22
Spell: GetBundleNameByPid
包含日志: 否
代码:
int32_t AmsMgrProxy::GetBundleNameByPid(const int pid, std::string &bundleName, int32_t &uid)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write pid");
        return ERR_INVALID_DATA;
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID),
            data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    bundleName = reply.ReadString();
    uid = reply.ReadInt32();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 862:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 865:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write pid");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 866:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write pid");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 872:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 873:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 880:22
Spell: RegisterAppDebugListener
包含日志: 否
代码:
int32_t AmsMgrProxy::RegisterAppDebugListener(const sptr<IAppDebugListener> &listener)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    if (listener == nullptr || !data.WriteRemoteObject(listener->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_DEBUG_LISTENER),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 882:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 884:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 885:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 889:5
Spell: 
包含日志: 否
代码:
    if (listener == nullptr || !data.WriteRemoteObject(listener->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 890:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 898:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 899:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 905:22
Spell: UnregisterAppDebugListener
包含日志: 否
代码:
int32_t AmsMgrProxy::UnregisterAppDebugListener(const sptr<IAppDebugListener> &listener)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    if (listener == nullptr || !data.WriteRemoteObject(listener->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::UNREGISTER_APP_DEBUG_LISTENER),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 907:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 909:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 910:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 914:5
Spell: 
包含日志: 否
代码:
    if (listener == nullptr || !data.WriteRemoteObject(listener->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 915:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 923:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 924:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 930:22
Spell: AttachAppDebug
包含日志: 否
代码:
int32_t AmsMgrProxy::AttachAppDebug(const std::string &bundleName)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::ATTACH_APP_DEBUG),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 932:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 934:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 935:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 939:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 940:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 948:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 949:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 955:22
Spell: DetachAppDebug
包含日志: 否
代码:
int32_t AmsMgrProxy::DetachAppDebug(const std::string &bundleName)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::DETACH_APP_DEBUG),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 957:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 959:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 960:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 964:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 965:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 973:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 974:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 980:19
Spell: SetKeepAliveEnableState
包含日志: 否
代码:
void AmsMgrProxy::SetKeepAliveEnableState(const std::string &bundleName, bool enable, int32_t uid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");
        return;
    }
    if (!data.WriteBool(enable) || !data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write flag or uid fail");
        return;
    }
    MessageParcel reply;
    MessageOption option;
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_ENABLE_STATE),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 982:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 984:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 985:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 988:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 989:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 992:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(enable) || !data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write flag or uid fail");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 993:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write flag or uid fail");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1000:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1001:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1005:19
Spell: SetKeepAliveDkv
包含日志: 否
代码:
void AmsMgrProxy::SetKeepAliveDkv(const std::string &bundleName, bool enable, int32_t uid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");
        return;
    }
    if (!data.WriteBool(enable) || !data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write flag or uid fail");
        return;
    }
    MessageParcel reply;
    MessageOption option;
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_DKV),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1007:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1009:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1010:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1013:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1014:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1017:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(enable) || !data.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write flag or uid fail");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1018:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write flag or uid fail");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1025:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1026:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1030:22
Spell: SetAppWaitingDebug
包含日志: 否
代码:
int32_t AmsMgrProxy::SetAppWaitingDebug(const std::string &bundleName, bool isPersist)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteBool(isPersist)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write persist flag failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::SET_APP_WAITING_DEBUG), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1032:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1034:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1035:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1039:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1040:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1044:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteBool(isPersist)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write persist flag failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1045:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write persist flag failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1052:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1053:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1059:22
Spell: CancelAppWaitingDebug
包含日志: 否
代码:
int32_t AmsMgrProxy::CancelAppWaitingDebug()
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::CANCEL_APP_WAITING_DEBUG), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1061:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1063:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1064:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1071:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1072:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1078:22
Spell: GetWaitingDebugApp
包含日志: 否
代码:
int32_t AmsMgrProxy::GetWaitingDebugApp(std::vector<std::string> &debugInfoList)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::GET_WAITING_DEBUG_APP), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

    auto resultCode = reply.ReadInt32();
    if (resultCode != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "Reply err: %{public}d", resultCode);
        return resultCode;
    }

    auto infoSize = reply.ReadInt32();
    if (infoSize > MAX_APP_DEBUG_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count: %{public}d", infoSize);
        return ERR_INVALID_DATA;
    }

    if (!reply.ReadStringVector(&debugInfoList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadStringVector failed");
        return ERR_INVALID_DATA;
    }

    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1080:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1082:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1083:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1090:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1091:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1096:5
Spell: 
包含日志: 否
代码:
    if (resultCode != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "Reply err: %{public}d", resultCode);
        return resultCode;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1097:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Reply err: %{public}d", resultCode);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1102:5
Spell: 
包含日志: 否
代码:
    if (infoSize > MAX_APP_DEBUG_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count: %{public}d", infoSize);
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1103:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count: %{public}d", infoSize);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1107:5
Spell: 
包含日志: 否
代码:
    if (!reply.ReadStringVector(&debugInfoList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadStringVector failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1108:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadStringVector failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1115:19
Spell: IsWaitingDebugApp
包含日志: 否
代码:
bool AmsMgrProxy::IsWaitingDebugApp(const std::string &bundleName)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return false;
    }

    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return false;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::IS_WAITING_DEBUG_APP), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return false;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1117:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1119:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1120:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1124:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1125:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1132:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1133:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1139:19
Spell: ClearNonPersistWaitingDebugFlag
包含日志: 否
代码:
void AmsMgrProxy::ClearNonPersistWaitingDebugFlag()
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::CLEAR_NON_PERSIST_WAITING_DEBUG_FLAG), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1141:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1143:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1144:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1152:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1153:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1157:22
Spell: RegisterAbilityDebugResponse
包含日志: 否
代码:
int32_t AmsMgrProxy::RegisterAbilityDebugResponse(const sptr<IAbilityDebugResponse> &response)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

    if (response == nullptr || !data.WriteRemoteObject(response->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write remote obj failed");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_DEBUG_RESPONSE), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1159:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1161:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1162:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1166:5
Spell: 
包含日志: 否
代码:
    if (response == nullptr || !data.WriteRemoteObject(response->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write remote obj failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1167:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write remote obj failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1175:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1176:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1182:19
Spell: IsAttachDebug
包含日志: 否
代码:
bool AmsMgrProxy::IsAttachDebug(const std::string &bundleName)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return false;
    }

    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");
        return false;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::IS_ATTACH_DEBUG),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return false;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1184:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1186:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1187:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1191:5
Spell: 
包含日志: 否
代码:
    if (bundleName.empty() || !data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1192:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundleName fail");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1200:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1201:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1207:19
Spell: ClearProcessByToken
包含日志: 否
代码:
void AmsMgrProxy::ClearProcessByToken(sptr<IRemoteObject> token)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    MessageParcel reply;
    MessageOption option;
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::CLEAR_PROCESS_BY_TOKEN), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1210:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1211:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1214:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1215:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1221:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1222:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1226:19
Spell: IsMemorySizeSufficent
包含日志: 否
代码:
bool AmsMgrProxy::IsMemorySizeSufficent()
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return true;
    }

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::IS_MEMORY_SIZE_SUFFICIENT), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return true;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1229:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return true;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1230:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1237:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return true;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1238:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1244:22
Spell: SendTransactCmd
包含日志: 否
代码:
int32_t AmsMgrProxy::SendTransactCmd(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "null remote");
        return ERR_NULL_OBJECT;
    }

    int32_t ret = remote->SendRequest(code, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d, ret: %{public}d", code, ret);
        return ret;
    }
    return ret;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1248:5
Spell: 
包含日志: 否
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "null remote");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1249:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1254:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d, ret: %{public}d", code, ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1255:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d, ret: %{public}d", code, ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1261:19
Spell: AttachedToStatusBar
包含日志: 否
代码:
void AmsMgrProxy::AttachedToStatusBar(const sptr<IRemoteObject> &token)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }
    int32_t ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::ATTACHED_TO_STATUS_BAR),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1263:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1267:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1270:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1271:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1276:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1277:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1279:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1282:19
Spell: BlockProcessCacheByPids
包含日志: 否
代码:
void AmsMgrProxy::BlockProcessCacheByPids(const std::vector<int32_t> &pids)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }
    if (!data.WriteUint32(pids.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");
        return;
    }
    for (const auto &pid: pids) {
        if (!data.WriteInt32(pid)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed");
            return;
        }
    }
    int32_t ret =
        SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::BLOCK_PROCESS_CACHE_BY_PIDS), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "end");
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1284:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1289:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1290:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1293:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteUint32(pids.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1294:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write size failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1305:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1306:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1308:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1311:19
Spell: IsKilledForUpgradeWeb
包含日志: 否
代码:
bool AmsMgrProxy::IsKilledForUpgradeWeb(const std::string &bundleName)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return false;
    }
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return false;
    }

    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::IS_KILLED_FOR_UPGRADE_WEB), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return false;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1316:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1317:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1320:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1321:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteString failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1326:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1327:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1333:19
Spell: CleanAbilityByUserRequest
包含日志: 否
代码:
bool AmsMgrProxy::CleanAbilityByUserRequest(const sptr<IRemoteObject> &token)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return false;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return false;
    }

    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::CLEAN_UIABILITY_BY_USER_REQUEST), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1338:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1339:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1342:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1343:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1349:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1350:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1355:19
Spell: IsProcessAttached
包含日志: 否
代码:
bool AmsMgrProxy::IsProcessAttached(sptr<IRemoteObject> token)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return false;
    }

    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_ATTACHED), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed, error code is %{public}d.", ret);
        return false;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1360:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1361:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1364:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteRemoteObject(token.GetRefPtr())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1365:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1370:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed, error code is %{public}d.", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1371:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed, error code is %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1377:19
Spell: IsCallerKilling
包含日志: 否
代码:
bool AmsMgrProxy::IsCallerKilling(const std::string& callerKey)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteString(callerKey)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write callerKey");
        return false;
    }

    auto ret = SendTransactCmd(static_cast<uint32_t>(IAmsMgr::Message::IS_CALLER_KILLING), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed, error code is %{public}d.", ret);
        return false;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1382:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1383:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1386:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteString(callerKey)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write callerKey");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1387:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write callerKey");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1392:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed, error code is %{public}d.", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1393:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed, error code is %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1399:19
Spell: SendAppSpawnUninstallDebugHapMsg
包含日志: 否
代码:
void AmsMgrProxy::SendAppSpawnUninstallDebugHapMsg(int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInt32 failed");
        return;
    }
    int32_t ret = SendTransactCmd(
        static_cast<uint32_t>(IAmsMgr::Message::SEND_APP_SPAWN_UNINSTALL_DEBUG_HAP_MSG), data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed, errCode %{public}d", ret);
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1404:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1405:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1408:5
Spell: 
包含日志: 否
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInt32 failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1409:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInt32 failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1414:5
Spell: 
包含日志: 否
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed, errCode %{public}d", ret);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1415:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed, errCode %{public}d", ret);

--------------------------------------------------------------------------------
