代码块类型: Namespace Declaration
位置: 20:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool KiaInterceptorProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(KiaInterceptorProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

int KiaInterceptorProxy::OnIntercept(AAFwk::Want &want)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_VALUE;
    }
    data.WriteParcelable(&want);
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_INVALID_VALUE;
    }
    int32_t ret = remote->SendRequest(static_cast<uint32_t>(IKiaInterceptor::KIA_INTERCEPTOR_ON_INTERCEPT),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);
        return ret;
    }
    int resultCode = reply.ReadInt32();
    if (resultCode != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnIntercept failed, resultCode=%{public}d.", resultCode);
        return resultCode;
    }
    sptr<AAFwk::Want> resultWant = reply.ReadParcelable<AAFwk::Want>();
    if (resultWant == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "resultWant is nullptr.");
        return ERR_INVALID_VALUE;
    }
    want = *resultWant;
    return resultCode;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 21:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool KiaInterceptorProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(KiaInterceptorProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

int KiaInterceptorProxy::OnIntercept(AAFwk::Want &want)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_VALUE;
    }
    data.WriteParcelable(&want);
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_INVALID_VALUE;
    }
    int32_t ret = remote->SendRequest(static_cast<uint32_t>(IKiaInterceptor::KIA_INTERCEPTOR_ON_INTERCEPT),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);
        return ret;
    }
    int resultCode = reply.ReadInt32();
    if (resultCode != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnIntercept failed, resultCode=%{public}d.", resultCode);
        return resultCode;
    }
    sptr<AAFwk::Want> resultWant = reply.ReadParcelable<AAFwk::Want>();
    if (resultWant == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "resultWant is nullptr.");
        return ERR_INVALID_VALUE;
    }
    want = *resultWant;
    return resultCode;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 22:27
Spell: WriteInterfaceToken
包含日志: 是
代码:
bool KiaInterceptorProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(KiaInterceptorProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 24:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInterfaceToken(KiaInterceptorProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 25:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 31:26
Spell: OnIntercept
包含日志: 是
代码:
int KiaInterceptorProxy::OnIntercept(AAFwk::Want &want)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_VALUE;
    }
    data.WriteParcelable(&want);
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_INVALID_VALUE;
    }
    int32_t ret = remote->SendRequest(static_cast<uint32_t>(IKiaInterceptor::KIA_INTERCEPTOR_ON_INTERCEPT),
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);
        return ret;
    }
    int resultCode = reply.ReadInt32();
    if (resultCode != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnIntercept failed, resultCode=%{public}d.", resultCode);
        return resultCode;
    }
    sptr<AAFwk::Want> resultWant = reply.ReadParcelable<AAFwk::Want>();
    if (resultWant == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "resultWant is nullptr.");
        return ERR_INVALID_VALUE;
    }
    want = *resultWant;
    return resultCode;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 36:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 41:5
Spell: 
包含日志: 是
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 42:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 47:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 48:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 52:5
Spell: 
包含日志: 是
代码:
    if (resultCode != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "OnIntercept failed, resultCode=%{public}d.", resultCode);
        return resultCode;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 53:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "OnIntercept failed, resultCode=%{public}d.", resultCode);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 57:5
Spell: 
包含日志: 是
代码:
    if (resultWant == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "resultWant is nullptr.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 58:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "resultWant is nullptr.");

--------------------------------------------------------------------------------
