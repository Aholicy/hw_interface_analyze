代码块类型: Namespace Declaration
位置: 20:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {

NativeChildNotifyProxy::NativeChildNotifyProxy(const sptr<IRemoteObject> &impl)
    : IRemoteProxy<INativeChildNotify>(impl)
{
}

bool NativeChildNotifyProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(NativeChildNotifyProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write interface token failed");
        return false;
    }

    return true;
}

int32_t NativeChildNotifyProxy::SendRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption& option)
{
    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy get remote object failed");
        return ERR_NULL_OBJECT;
    }

    int32_t ret = remote->SendRequest(code, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy SendRequest failed(%{public}d)", ret);
        return ret;
    }

    return NO_ERROR;
}

void NativeChildNotifyProxy::OnNativeChildStarted(const sptr<IRemoteObject> &nativeChild)
{
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnNativeChildStarted");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteRemoteObject(nativeChild)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write native child ipc object failed.");
        return;
    }

    SendRequest(INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED, data, reply, option);
}

void NativeChildNotifyProxy::OnError(int32_t errCode)
{
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnError(%{public}d)", errCode);
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteInt32(errCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write error code failed.");
        return;
    }

    SendRequest(INativeChildNotify::IPC_ID_ON_ERROR, data, reply, option);
}

} // OHOS
} // AppExecFwk
--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 21:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {

NativeChildNotifyProxy::NativeChildNotifyProxy(const sptr<IRemoteObject> &impl)
    : IRemoteProxy<INativeChildNotify>(impl)
{
}

bool NativeChildNotifyProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(NativeChildNotifyProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write interface token failed");
        return false;
    }

    return true;
}

int32_t NativeChildNotifyProxy::SendRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption& option)
{
    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy get remote object failed");
        return ERR_NULL_OBJECT;
    }

    int32_t ret = remote->SendRequest(code, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy SendRequest failed(%{public}d)", ret);
        return ret;
    }

    return NO_ERROR;
}

void NativeChildNotifyProxy::OnNativeChildStarted(const sptr<IRemoteObject> &nativeChild)
{
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnNativeChildStarted");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteRemoteObject(nativeChild)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write native child ipc object failed.");
        return;
    }

    SendRequest(INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED, data, reply, option);
}

void NativeChildNotifyProxy::OnError(int32_t errCode)
{
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnError(%{public}d)", errCode);
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteInt32(errCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write error code failed.");
        return;
    }

    SendRequest(INativeChildNotify::IPC_ID_ON_ERROR, data, reply, option);
}

} // OHOS

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 23:25
Spell: NativeChildNotifyProxy
包含日志: 否
代码:
NativeChildNotifyProxy::NativeChildNotifyProxy(const sptr<IRemoteObject> &impl)
    : IRemoteProxy<INativeChildNotify>(impl)
{
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 28:30
Spell: WriteInterfaceToken
包含日志: 是
代码:
bool NativeChildNotifyProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(NativeChildNotifyProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write interface token failed");
        return false;
    }

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 30:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInterfaceToken(NativeChildNotifyProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write interface token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 31:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write interface token failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 38:33
Spell: SendRequest
包含日志: 是
代码:
int32_t NativeChildNotifyProxy::SendRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption& option)
{
    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy get remote object failed");
        return ERR_NULL_OBJECT;
    }

    int32_t ret = remote->SendRequest(code, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy SendRequest failed(%{public}d)", ret);
        return ret;
    }

    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 42:5
Spell: 
包含日志: 是
代码:
    if (!remote) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy get remote object failed");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 43:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy get remote object failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 48:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy SendRequest failed(%{public}d)", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 49:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy SendRequest failed(%{public}d)", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 56:30
Spell: OnNativeChildStarted
包含日志: 是
代码:
void NativeChildNotifyProxy::OnNativeChildStarted(const sptr<IRemoteObject> &nativeChild)
{
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnNativeChildStarted");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteRemoteObject(nativeChild)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write native child ipc object failed.");
        return;
    }

    SendRequest(INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 58:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnNativeChildStarted");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 62:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 66:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(nativeChild)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write native child ipc object failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write native child ipc object failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 74:30
Spell: OnError
包含日志: 是
代码:
void NativeChildNotifyProxy::OnError(int32_t errCode)
{
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnError(%{public}d)", errCode);
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }

    if (!data.WriteInt32(errCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write error code failed.");
        return;
    }

    SendRequest(INativeChildNotify::IPC_ID_ON_ERROR, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 76:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnError(%{public}d)", errCode);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 80:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 84:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(errCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write error code failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 85:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write error code failed.");

--------------------------------------------------------------------------------
