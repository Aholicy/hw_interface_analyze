代码块类型: Method Declaration
位置: 32:26
Spell: ReadFromParcel
包含日志: 否
代码:
bool RunningProcessInfo::ReadFromParcel(Parcel &parcel)
{
    processName_ = Str16ToStr8(parcel.ReadString16());
    int32_t typeData;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, typeData);
    pid_ = static_cast<int32_t>(typeData);
    int32_t uidData;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, uidData);
    uid_ = static_cast<int32_t>(uidData);
    int32_t stateData;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, stateData);
    state_ = static_cast<AppProcessState>(stateData);
    isContinuousTask = parcel.ReadBool();
    isKeepAlive = parcel.ReadBool();
    isFocused = parcel.ReadBool();
    isTestProcess = parcel.ReadBool();
    isAbilityForegrounding = parcel.ReadBool();
    isTestMode = parcel.ReadBool();
    int32_t bundleTypeData;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, bundleTypeData);
    bundleType = static_cast<int32_t>(bundleTypeData);
    if (!parcel.ReadStringVector(&bundleNames)) {
        TAG_LOGE(AAFwkTag::APPMGR, "read bundleNames failed.");
        return false;
    }
    int32_t processType;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, processType);
    processType_ = static_cast<ProcessType>(processType);
    int32_t extensionType;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, extensionType);
    extensionType_ = static_cast<ExtensionAbilityType>(extensionType);
    appCloneIndex = parcel.ReadInt32();
    instanceKey = Str16ToStr8(parcel.ReadString16());
    int32_t appModeType;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appModeType);
    appMode = static_cast<AppExecFwk::MultiAppModeType>(appModeType);
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 53:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadStringVector(&bundleNames)) {
        TAG_LOGE(AAFwkTag::APPMGR, "read bundleNames failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 54:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "read bundleNames failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 71:41
Spell: Unmarshalling
包含日志: 否
代码:
RunningProcessInfo *RunningProcessInfo::Unmarshalling(Parcel &parcel)
{
    RunningProcessInfo *info = new (std::nothrow) RunningProcessInfo();
    if (info && !info->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete info;
        info = nullptr;
    }
    return info;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 74:5
Spell: 
包含日志: 否
代码:
    if (info && !info->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");
        delete info;
        info = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 75:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 82:26
Spell: Marshalling
包含日志: 否
代码:
bool RunningProcessInfo::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(processName_));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(pid_));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(uid_));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(state_));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isContinuousTask);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isKeepAlive);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isFocused);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isTestProcess);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isAbilityForegrounding);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isTestMode);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(bundleType));
    if (!parcel.WriteStringVector(bundleNames)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleNames failed.");
        return false;
    }
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(processType_));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(extensionType_));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appCloneIndex);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(instanceKey));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(appMode));
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 95:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteStringVector(bundleNames)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleNames failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 96:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleNames failed.");

--------------------------------------------------------------------------------
