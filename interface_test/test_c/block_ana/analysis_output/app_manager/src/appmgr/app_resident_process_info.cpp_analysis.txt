代码块类型: Namespace Declaration
位置: 19:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
constexpr int32_t CYCLE_LIMIT = 1000;
AppResidentProcessInfo *AppResidentProcessInfo::Unmarshalling(Parcel &parcel)
{
    AppResidentProcessInfo *residentProcess = new (std::nothrow) OHOS::AppExecFwk::AppResidentProcessInfo();
    if (residentProcess && !residentProcess->ReadFromParcel(parcel)) {
        delete residentProcess;
        residentProcess = nullptr;
    }
    return residentProcess;
}

bool AppResidentProcessInfo::Marshalling(Parcel &parcel) const
{
    TAG_LOGW(AAFwkTag::APPMGR, "Marshalling");
    parcel.WriteBool(isKeepAliveApp_);
    parcel.WriteInt32(abilityStage_.size());
    for (auto &info : abilityStage_) {
        if (!parcel.WriteParcelable(&info)) {
            return false;
        }
    }
    return true;
}

bool AppResidentProcessInfo::ReadFromParcel(Parcel &parcel)
{
    isKeepAliveApp_ = parcel.ReadBool();
    auto size = parcel.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "size is too large");
        return false;
    }
    for (int32_t i = 0; i < size; i++) {
        std::unique_ptr<HapModuleInfo> hapModuleInfo(parcel.ReadParcelable<HapModuleInfo>());
        if (!hapModuleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
            return false;
        }
        abilityStage_.emplace_back(*hapModuleInfo);
    }
    return true;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 20:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
constexpr int32_t CYCLE_LIMIT = 1000;
AppResidentProcessInfo *AppResidentProcessInfo::Unmarshalling(Parcel &parcel)
{
    AppResidentProcessInfo *residentProcess = new (std::nothrow) OHOS::AppExecFwk::AppResidentProcessInfo();
    if (residentProcess && !residentProcess->ReadFromParcel(parcel)) {
        delete residentProcess;
        residentProcess = nullptr;
    }
    return residentProcess;
}

bool AppResidentProcessInfo::Marshalling(Parcel &parcel) const
{
    TAG_LOGW(AAFwkTag::APPMGR, "Marshalling");
    parcel.WriteBool(isKeepAliveApp_);
    parcel.WriteInt32(abilityStage_.size());
    for (auto &info : abilityStage_) {
        if (!parcel.WriteParcelable(&info)) {
            return false;
        }
    }
    return true;
}

bool AppResidentProcessInfo::ReadFromParcel(Parcel &parcel)
{
    isKeepAliveApp_ = parcel.ReadBool();
    auto size = parcel.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "size is too large");
        return false;
    }
    for (int32_t i = 0; i < size; i++) {
        std::unique_ptr<HapModuleInfo> hapModuleInfo(parcel.ReadParcelable<HapModuleInfo>());
        if (!hapModuleInfo) {
            TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
            return false;
        }
        abilityStage_.emplace_back(*hapModuleInfo);
    }
    return true;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
