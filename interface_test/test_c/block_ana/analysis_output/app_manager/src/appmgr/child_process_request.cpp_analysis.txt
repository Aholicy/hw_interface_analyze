代码块类型: Method Declaration
位置: 24:27
Spell: ReadFromParcel
包含日志: 否
代码:
bool ChildProcessRequest::ReadFromParcel(Parcel &parcel)
{
    std::u16string srcEntryTemp;
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, srcEntryTemp);
    srcEntry = Str16ToStr8(srcEntryTemp);

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, childProcessType);
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, childProcessCount);
    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isStartWithDebug);

    std::unique_ptr<ChildProcessArgs> argsRead(parcel.ReadParcelable<ChildProcessArgs>());
    if (!argsRead) {
        TAG_LOGE(AAFwkTag::APPMGR, "Read ChildProcessArgs failed.");
        return false;
    }
    args = *argsRead;

    std::unique_ptr<ChildProcessOptions> optionsRead(parcel.ReadParcelable<ChildProcessOptions>());
    if (!optionsRead) {
        TAG_LOGE(AAFwkTag::APPMGR, "Read ChildProcessOptions failed.");
        return false;
    }
    options = *optionsRead;

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 35:5
Spell: 
包含日志: 否
代码:
    if (!argsRead) {
        TAG_LOGE(AAFwkTag::APPMGR, "Read ChildProcessArgs failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 36:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Read ChildProcessArgs failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 42:5
Spell: 
包含日志: 否
代码:
    if (!optionsRead) {
        TAG_LOGE(AAFwkTag::APPMGR, "Read ChildProcessOptions failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 43:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Read ChildProcessOptions failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 51:43
Spell: Unmarshalling
包含日志: 否
代码:
ChildProcessRequest *ChildProcessRequest::Unmarshalling(Parcel &parcel)
{
    ChildProcessRequest *data = new (std::nothrow) ChildProcessRequest();
    if (data && !data->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "Read from parcel failed.");
        delete data;
        data = nullptr;
    }
    return data;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 54:5
Spell: 
包含日志: 否
代码:
    if (data && !data->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "Read from parcel failed.");
        delete data;
        data = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 55:9
Spell: 
包含日志: 否
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "Read from parcel failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 62:27
Spell: Marshalling
包含日志: 否
代码:
bool ChildProcessRequest::Marshalling(Parcel &parcel) const
{
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(srcEntry));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(childProcessType));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(childProcessCount));
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isStartWithDebug);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Parcelable, parcel, &args);
    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Parcelable, parcel, &options);
    return true;
}

--------------------------------------------------------------------------------
