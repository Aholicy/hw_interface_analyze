代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
ProcessInfo::ProcessInfo(const std::string &name, const pid_t &pid) : processName_(name), pid_(pid)
{}

/**
 * @brief read this Sequenceable object from a Parcel.
 *
 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.
 * @return Returns true if read successed; returns false otherwise.
 */
bool ProcessInfo::ReadFromParcel(Parcel &parcel)
{
    processName_ = Str16ToStr8(parcel.ReadString16());
    pid_ = parcel.ReadInt32();
    processType_ = ProcessType(parcel.ReadInt32());
    return true;
}

/**
 * @brief Unmarshals this Sequenceable object from a Parcel.
 *
 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.
 */
ProcessInfo *ProcessInfo::Unmarshalling(Parcel &parcel)
{
    ProcessInfo *processInfo = new (std::nothrow) ProcessInfo();
    if (processInfo && !processInfo->ReadFromParcel(parcel)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessInfo::Unmarshalling ReadFromParcel failed");
        delete processInfo;
        processInfo = nullptr;
    }
    return processInfo;
}

/**
 * @brief Marshals this Sequenceable object into a Parcel.
 *
 * @param outParcel Indicates the Parcel object to which the Sequenceable object will be marshaled.
 */
bool ProcessInfo::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString16(Str8ToStr16(processName_)) && parcel.WriteInt32(pid_)
        && parcel.WriteInt32(static_cast<int32_t>(processType_)));
}

void ProcessInfo::SetProcessType(const ProcessType &processType)
{
    processType_ = processType;
}

ProcessType ProcessInfo::GetProcessType() const
{
    return processType_;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
ProcessInfo::ProcessInfo(const std::string &name, const pid_t &pid) : processName_(name), pid_(pid)
{}

/**
 * @brief read this Sequenceable object from a Parcel.
 *
 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.
 * @return Returns true if read successed; returns false otherwise.
 */
bool ProcessInfo::ReadFromParcel(Parcel &parcel)
{
    processName_ = Str16ToStr8(parcel.ReadString16());
    pid_ = parcel.ReadInt32();
    processType_ = ProcessType(parcel.ReadInt32());
    return true;
}

/**
 * @brief Unmarshals this Sequenceable object from a Parcel.
 *
 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.
 */
ProcessInfo *ProcessInfo::Unmarshalling(Parcel &parcel)
{
    ProcessInfo *processInfo = new (std::nothrow) ProcessInfo();
    if (processInfo && !processInfo->ReadFromParcel(parcel)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessInfo::Unmarshalling ReadFromParcel failed");
        delete processInfo;
        processInfo = nullptr;
    }
    return processInfo;
}

/**
 * @brief Marshals this Sequenceable object into a Parcel.
 *
 * @param outParcel Indicates the Parcel object to which the Sequenceable object will be marshaled.
 */
bool ProcessInfo::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString16(Str8ToStr16(processName_)) && parcel.WriteInt32(pid_)
        && parcel.WriteInt32(static_cast<int32_t>(processType_)));
}

void ProcessInfo::SetProcessType(const ProcessType &processType)
{
    processType_ = processType;
}

ProcessType ProcessInfo::GetProcessType() const
{
    return processType_;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 23:14
Spell: ProcessInfo
包含日志: 否
代码:
ProcessInfo::ProcessInfo(const std::string &name, const pid_t &pid) : processName_(name), pid_(pid)
{}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 32:19
Spell: ReadFromParcel
包含日志: 否
代码:
bool ProcessInfo::ReadFromParcel(Parcel &parcel)
{
    processName_ = Str16ToStr8(parcel.ReadString16());
    pid_ = parcel.ReadInt32();
    processType_ = ProcessType(parcel.ReadInt32());
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 45:27
Spell: Unmarshalling
包含日志: 是
代码:
ProcessInfo *ProcessInfo::Unmarshalling(Parcel &parcel)
{
    ProcessInfo *processInfo = new (std::nothrow) ProcessInfo();
    if (processInfo && !processInfo->ReadFromParcel(parcel)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessInfo::Unmarshalling ReadFromParcel failed");
        delete processInfo;
        processInfo = nullptr;
    }
    return processInfo;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 48:5
Spell: 
包含日志: 是
代码:
    if (processInfo && !processInfo->ReadFromParcel(parcel)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessInfo::Unmarshalling ReadFromParcel failed");
        delete processInfo;
        processInfo = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 49:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessInfo::Unmarshalling ReadFromParcel failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 61:19
Spell: Marshalling
包含日志: 否
代码:
bool ProcessInfo::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString16(Str8ToStr16(processName_)) && parcel.WriteInt32(pid_)
        && parcel.WriteInt32(static_cast<int32_t>(processType_)));
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 67:19
Spell: SetProcessType
包含日志: 否
代码:
void ProcessInfo::SetProcessType(const ProcessType &processType)
{
    processType_ = processType;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 72:26
Spell: GetProcessType
包含日志: 否
代码:
ProcessType ProcessInfo::GetProcessType() const
{
    return processType_;
}

--------------------------------------------------------------------------------
