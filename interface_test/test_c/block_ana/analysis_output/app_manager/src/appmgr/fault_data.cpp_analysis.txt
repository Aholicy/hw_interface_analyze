代码块类型: Namespace Declaration
位置: 22:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
bool FaultData::ReadFromParcel(Parcel &parcel)
{
    std::string strValue;
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }
    errorObject.name = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }
    errorObject.message = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }
    errorObject.stack = strValue;

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType read int32 failed.");
        return false;
    }
    faultType = static_cast<FaultDataType>(type);

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }
    timeoutMarkers = strValue;

    waitSaveState = parcel.ReadBool();
    notifyApp = parcel.ReadBool();
    forceExit = parcel.ReadBool();
    state = parcel.ReadUint32();
    eventId = parcel.ReadInt32();
    tid = parcel.ReadInt32();
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }
    return true;
}

FaultData *FaultData::Unmarshalling(Parcel &parcel)
{
    FaultData *info = new FaultData();
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }
    return info;
}

bool FaultData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }
    
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

    if (!parcel.WriteInt32(tid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Tid [%{public}u] write int32 failed.", tid);
        return false;
    }

    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }
    return true;
}

bool AppFaultDataBySA::ReadFromParcel(Parcel &parcel)
{
    std::string strValue;
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }
    errorObject.name = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }
    errorObject.message = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }
    errorObject.stack = strValue;

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Type read int32 failed.");
        return false;
    }
    faultType = static_cast<FaultDataType>(type);

    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid read int32 failed.");
        return false;
    }

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }
    timeoutMarkers = strValue;

    waitSaveState = parcel.ReadBool();
    notifyApp = parcel.ReadBool();
    forceExit = parcel.ReadBool();
    state = parcel.ReadUint32();
    eventId = parcel.ReadInt32();
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }
    return true;
}

AppFaultDataBySA *AppFaultDataBySA::Unmarshalling(Parcel &parcel)
{
    AppFaultDataBySA *info = new AppFaultDataBySA();
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }
    return info;
}

bool AppFaultDataBySA::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }
    
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

    if (!parcel.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid [%{public}d] write int32 failed.", static_cast<int32_t>(pid));
        return false;
    }

    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }
    return true;
}
}  // namespace AppExecFwk
}  // namespace OHOS
--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 23:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
bool FaultData::ReadFromParcel(Parcel &parcel)
{
    std::string strValue;
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }
    errorObject.name = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }
    errorObject.message = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }
    errorObject.stack = strValue;

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType read int32 failed.");
        return false;
    }
    faultType = static_cast<FaultDataType>(type);

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }
    timeoutMarkers = strValue;

    waitSaveState = parcel.ReadBool();
    notifyApp = parcel.ReadBool();
    forceExit = parcel.ReadBool();
    state = parcel.ReadUint32();
    eventId = parcel.ReadInt32();
    tid = parcel.ReadInt32();
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }
    return true;
}

FaultData *FaultData::Unmarshalling(Parcel &parcel)
{
    FaultData *info = new FaultData();
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }
    return info;
}

bool FaultData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }
    
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

    if (!parcel.WriteInt32(tid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Tid [%{public}u] write int32 failed.", tid);
        return false;
    }

    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }
    return true;
}

bool AppFaultDataBySA::ReadFromParcel(Parcel &parcel)
{
    std::string strValue;
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }
    errorObject.name = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }
    errorObject.message = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }
    errorObject.stack = strValue;

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Type read int32 failed.");
        return false;
    }
    faultType = static_cast<FaultDataType>(type);

    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid read int32 failed.");
        return false;
    }

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }
    timeoutMarkers = strValue;

    waitSaveState = parcel.ReadBool();
    notifyApp = parcel.ReadBool();
    forceExit = parcel.ReadBool();
    state = parcel.ReadUint32();
    eventId = parcel.ReadInt32();
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }
    return true;
}

AppFaultDataBySA *AppFaultDataBySA::Unmarshalling(Parcel &parcel)
{
    AppFaultDataBySA *info = new AppFaultDataBySA();
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }
    return info;
}

bool AppFaultDataBySA::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }
    
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

    if (!parcel.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid [%{public}d] write int32 failed.", static_cast<int32_t>(pid));
        return false;
    }

    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }
    return true;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 24:17
Spell: ReadFromParcel
包含日志: 是
代码:
bool FaultData::ReadFromParcel(Parcel &parcel)
{
    std::string strValue;
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }
    errorObject.name = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }
    errorObject.message = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }
    errorObject.stack = strValue;

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType read int32 failed.");
        return false;
    }
    faultType = static_cast<FaultDataType>(type);

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }
    timeoutMarkers = strValue;

    waitSaveState = parcel.ReadBool();
    notifyApp = parcel.ReadBool();
    forceExit = parcel.ReadBool();
    state = parcel.ReadUint32();
    eventId = parcel.ReadInt32();
    tid = parcel.ReadInt32();
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 27:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 28:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 33:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 34:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 39:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 40:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 46:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType read int32 failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 47:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType read int32 failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 52:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 53:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 64:5
Spell: 
包含日志: 否
代码:
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 70:23
Spell: Unmarshalling
包含日志: 否
代码:
FaultData *FaultData::Unmarshalling(Parcel &parcel)
{
    FaultData *info = new FaultData();
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }
    return info;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 73:5
Spell: 
包含日志: 否
代码:
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 80:17
Spell: Marshalling
包含日志: 是
代码:
bool FaultData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }
    
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

    if (!parcel.WriteInt32(tid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Tid [%{public}u] write int32 failed.", tid);
        return false;
    }

    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 82:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 83:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 87:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 88:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 92:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 93:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 97:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 98:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 102:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 103:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 107:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 108:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 112:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 113:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 117:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 118:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 122:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 123:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 127:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 128:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 132:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteInt32(tid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Tid [%{public}u] write int32 failed.", tid);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 133:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Tid [%{public}u] write int32 failed.", tid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 137:5
Spell: 
包含日志: 是
代码:
    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 138:9
Spell: 
包含日志: 是
代码:
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 139:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 143:9
Spell: 
包含日志: 是
代码:
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 144:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 151:24
Spell: ReadFromParcel
包含日志: 是
代码:
bool AppFaultDataBySA::ReadFromParcel(Parcel &parcel)
{
    std::string strValue;
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }
    errorObject.name = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }
    errorObject.message = strValue;

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }
    errorObject.stack = strValue;

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Type read int32 failed.");
        return false;
    }
    faultType = static_cast<FaultDataType>(type);

    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid read int32 failed.");
        return false;
    }

    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }
    timeoutMarkers = strValue;

    waitSaveState = parcel.ReadBool();
    notifyApp = parcel.ReadBool();
    forceExit = parcel.ReadBool();
    state = parcel.ReadUint32();
    eventId = parcel.ReadInt32();
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 154:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 155:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Name read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 160:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 161:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Message read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 166:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 167:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Stack read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 173:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(type)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Type read int32 failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 174:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Type read int32 failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 179:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid read int32 failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 180:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Pid read int32 failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 184:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString(strValue)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 185:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers read string failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 195:5
Spell: 
包含日志: 否
代码:
    if (parcel.ReadBool()) {
        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 201:37
Spell: Unmarshalling
包含日志: 否
代码:
AppFaultDataBySA *AppFaultDataBySA::Unmarshalling(Parcel &parcel)
{
    AppFaultDataBySA *info = new AppFaultDataBySA();
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }
    return info;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 204:5
Spell: 
包含日志: 否
代码:
    if (!info->ReadFromParcel(parcel)) {
        delete info;
        info = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 211:24
Spell: Marshalling
包含日志: 是
代码:
bool AppFaultDataBySA::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }
    
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

    if (!parcel.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid [%{public}d] write int32 failed.", static_cast<int32_t>(pid));
        return false;
    }

    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 213:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(errorObject.name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 214:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Name [%{public}s] write string failed.", errorObject.name.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 218:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(errorObject.message)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 219:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Message [%{public}s] write string failed.", errorObject.message.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 223:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(errorObject.stack)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 224:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Stack [%{public}s] write string failed.", errorObject.stack.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 228:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteInt32(static_cast<int32_t>(faultType))) {
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 229:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "FaultType [%{public}d] write int32 failed.", static_cast<int32_t>(faultType));

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 233:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid [%{public}d] write int32 failed.", static_cast<int32_t>(pid));
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 234:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Pid [%{public}d] write int32 failed.", static_cast<int32_t>(pid));

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 238:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteString(timeoutMarkers)) {
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 239:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "TimeoutMarkers [%{public}s] write string failed.", timeoutMarkers.c_str());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 243:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteBool(waitSaveState)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 244:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WaitSaveState [%{public}s] write bool failed.", waitSaveState ? "true" : "false");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 248:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteBool(notifyApp)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 249:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyApp [%{public}s] write bool failed.", notifyApp ? "true" : "false");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 253:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteBool(forceExit)) {
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 254:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ForceExit [%{public}s] write bool failed.", forceExit ? "true" : "false");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 258:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteUint32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 259:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "State [%{public}u] write uint32 failed.", state);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 263:5
Spell: 
包含日志: 是
代码:
    if (!parcel.WriteInt32(eventId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 264:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "EventId [%{public}u] write int32 failed.", eventId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 268:5
Spell: 
包含日志: 是
代码:
    if (token == nullptr) {
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }
    } else {
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 269:9
Spell: 
包含日志: 是
代码:
        if (!parcel.WriteBool(false)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 270:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [false] write bool failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 274:9
Spell: 
包含日志: 是
代码:
        if (!parcel.WriteBool(true) || !(static_cast<MessageParcel*>(&parcel))->WriteRemoteObject(token)) {
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");
            return false;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 275:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Token falge [true] write bool failed.");

--------------------------------------------------------------------------------
