代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
RenderSchedulerHost::RenderSchedulerHost() {}

RenderSchedulerHost::~RenderSchedulerHost() {}

int RenderSchedulerHost::OnRemoteRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    std::u16string descriptor = RenderSchedulerHost::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

    if (code == static_cast<uint32_t>(IRenderScheduler::Message::NOTIFY_BROWSER_FD)) {
        return HandleNotifyBrowserFd(data, reply);
    }

    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

int RenderSchedulerHost::HandleNotifyBrowserFd(MessageParcel &data, MessageParcel &reply)
{
    int32_t ipcFd = data.ReadFileDescriptor();
    int32_t sharedFd = data.ReadFileDescriptor();
    int32_t crashFd = data.ReadFileDescriptor();
    sptr<IRemoteObject> browser = data.ReadRemoteObject();
    NotifyBrowserFd(ipcFd, sharedFd, crashFd, browser);
    return 0;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
RenderSchedulerHost::RenderSchedulerHost() {}

RenderSchedulerHost::~RenderSchedulerHost() {}

int RenderSchedulerHost::OnRemoteRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    std::u16string descriptor = RenderSchedulerHost::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

    if (code == static_cast<uint32_t>(IRenderScheduler::Message::NOTIFY_BROWSER_FD)) {
        return HandleNotifyBrowserFd(data, reply);
    }

    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

int RenderSchedulerHost::HandleNotifyBrowserFd(MessageParcel &data, MessageParcel &reply)
{
    int32_t ipcFd = data.ReadFileDescriptor();
    int32_t sharedFd = data.ReadFileDescriptor();
    int32_t crashFd = data.ReadFileDescriptor();
    sptr<IRemoteObject> browser = data.ReadRemoteObject();
    NotifyBrowserFd(ipcFd, sharedFd, crashFd, browser);
    return 0;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 23:22
Spell: RenderSchedulerHost
包含日志: 否
代码:
RenderSchedulerHost::RenderSchedulerHost() {}

--------------------------------------------------------------------------------
代码块类型: Destructor Declaration
位置: 25:22
Spell: ~RenderSchedulerHost
包含日志: 否
代码:
RenderSchedulerHost::~RenderSchedulerHost() {}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 27:26
Spell: OnRemoteRequest
包含日志: 是
代码:
int RenderSchedulerHost::OnRemoteRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());
    std::u16string descriptor = RenderSchedulerHost::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

    if (code == static_cast<uint32_t>(IRenderScheduler::Message::NOTIFY_BROWSER_FD)) {
        return HandleNotifyBrowserFd(data, reply);
    }

    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnRemoteRequest end");
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 30:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnReceived, code = %{public}u, flags= %{public}d.", code,
        option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 34:5
Spell: 
包含日志: 是
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 35:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 39:5
Spell: 
包含日志: 否
代码:
    if (code == static_cast<uint32_t>(IRenderScheduler::Message::NOTIFY_BROWSER_FD)) {
        return HandleNotifyBrowserFd(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 43:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "RenderSchedulerHost::OnRemoteRequest end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 47:26
Spell: HandleNotifyBrowserFd
包含日志: 否
代码:
int RenderSchedulerHost::HandleNotifyBrowserFd(MessageParcel &data, MessageParcel &reply)
{
    int32_t ipcFd = data.ReadFileDescriptor();
    int32_t sharedFd = data.ReadFileDescriptor();
    int32_t crashFd = data.ReadFileDescriptor();
    sptr<IRemoteObject> browser = data.ReadRemoteObject();
    NotifyBrowserFd(ipcFd, sharedFd, crashFd, browser);
    return 0;
}

--------------------------------------------------------------------------------
