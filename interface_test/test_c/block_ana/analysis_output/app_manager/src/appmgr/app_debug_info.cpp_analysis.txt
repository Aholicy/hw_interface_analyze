代码块类型: Method Declaration
位置: 22:20
Spell: ReadFromParcel
包含日志: 否
代码:
bool AppDebugInfo::ReadFromParcel(Parcel &parcel)
{
    bundleName = parcel.ReadString();
    pid = parcel.ReadInt32();
    uid = parcel.ReadInt32();
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 30:29
Spell: Unmarshalling
包含日志: 否
代码:
AppDebugInfo *AppDebugInfo::Unmarshalling(Parcel &parcel)
{
    AppDebugInfo *info = new (std::nothrow) AppDebugInfo();
    if (info == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug info is nullptr.");
        return nullptr;
    }

    if (!info->ReadFromParcel(parcel)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Read from parcel failed.");
        delete info;
        info = nullptr;
    }
    return info;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 33:5
Spell: 
包含日志: 否
代码:
    if (info == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug info is nullptr.");
        return nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 34:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "App debug info is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 38:5
Spell: 
包含日志: 否
代码:
    if (!info->ReadFromParcel(parcel)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Read from parcel failed.");
        delete info;
        info = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 39:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Read from parcel failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 46:20
Spell: Marshalling
包含日志: 否
代码:
bool AppDebugInfo::Marshalling(Parcel &parcel) const
{
    // write bundleName
    if (!parcel.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return false;
    }
    // write pid
    if (!parcel.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed.");
        return false;
    }
    // write uid
    if (!parcel.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write uid failed.");
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 49:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 50:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 54:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 55:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write pid failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 59:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(uid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write uid failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 60:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write uid failed.");

--------------------------------------------------------------------------------
