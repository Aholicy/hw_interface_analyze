代码块类型: Method Declaration
位置: 23:28
Spell: OnRemoteRequest
包含日志: 否
代码:
int NativeChildNotifyStub::OnRemoteRequest(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest, code=%{public}u, flags=%{public}d.",
        code, option.GetFlags());
    std::u16string descriptor = NativeChildNotifyStub::GetDescriptor();
    std::u16string remoteDesc = data.ReadInterfaceToken();
    if (descriptor != remoteDesc) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

    int32_t ret;
    switch (code) {
        case INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED:
            ret = HandleOnNativeChildStarted(data, reply);
            break;

        case INativeChildNotify::IPC_ID_ON_ERROR:
            ret = HandleOnError(data, reply);
            break;
        
        default:
            TAG_LOGW(AAFwkTag::APPMGR, "NativeChildNotifyStub Unknow ipc call(%{public}u)", code);
            ret = IPCObjectStub::OnRemoteRequest(code, data, reply, option);
            break;
    }

    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest end");
    return ret;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 26:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest, code=%{public}u, flags=%{public}d.",
        code, option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 30:5
Spell: 
包含日志: 否
代码:
    if (descriptor != remoteDesc) {
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 31:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");

--------------------------------------------------------------------------------
代码块类型: Switch Block
位置: 36:5
Spell: 
包含日志: 否
代码:
    switch (code) {
        case INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED:
            ret = HandleOnNativeChildStarted(data, reply);
            break;

        case INativeChildNotify::IPC_ID_ON_ERROR:
            ret = HandleOnError(data, reply);
            break;
        
        default:
            TAG_LOGW(AAFwkTag::APPMGR, "NativeChildNotifyStub Unknow ipc call(%{public}u)", code);
            ret = IPCObjectStub::OnRemoteRequest(code, data, reply, option);
            break;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 46:13
Spell: 
包含日志: 否
代码:
            TAG_LOGW(AAFwkTag::APPMGR, "NativeChildNotifyStub Unknow ipc call(%{public}u)", code);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 51:5
Spell: 
包含日志: 否
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 55:32
Spell: HandleOnNativeChildStarted
包含日志: 否
代码:
int32_t NativeChildNotifyStub::HandleOnNativeChildStarted(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> cb = data.ReadRemoteObject();
    OnNativeChildStarted(cb);
    return ERR_NONE;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 62:32
Spell: HandleOnError
包含日志: 否
代码:
int32_t NativeChildNotifyStub::HandleOnError(MessageParcel &data, MessageParcel &reply)
{
    int32_t err = data.ReadInt32();
    OnError(err);
    return ERR_NONE;
}

--------------------------------------------------------------------------------
