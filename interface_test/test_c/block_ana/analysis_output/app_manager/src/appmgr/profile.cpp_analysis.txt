代码块类型: Namespace Declaration
位置: 22:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
Profile::Profile(const std::string &name) : profileName_(name)
{}

bool Profile::ReadFromParcel(Parcel &parcel)
{
    profileName_ = Str16ToStr8(parcel.ReadString16());

    return true;
}

Profile *Profile::Unmarshalling(Parcel &parcel)
{
    Profile *profile = new (std::nothrow) Profile();
    if (profile && !profile->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete profile;
        profile = nullptr;
    }
    return profile;
}

bool Profile::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString16(Str8ToStr16(profileName_)));
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 23:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
Profile::Profile(const std::string &name) : profileName_(name)
{}

bool Profile::ReadFromParcel(Parcel &parcel)
{
    profileName_ = Str16ToStr8(parcel.ReadString16());

    return true;
}

Profile *Profile::Unmarshalling(Parcel &parcel)
{
    Profile *profile = new (std::nothrow) Profile();
    if (profile && !profile->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete profile;
        profile = nullptr;
    }
    return profile;
}

bool Profile::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString16(Str8ToStr16(profileName_)));
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 24:10
Spell: Profile
包含日志: 否
代码:
Profile::Profile(const std::string &name) : profileName_(name)
{}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 27:15
Spell: ReadFromParcel
包含日志: 否
代码:
bool Profile::ReadFromParcel(Parcel &parcel)
{
    profileName_ = Str16ToStr8(parcel.ReadString16());

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 34:19
Spell: Unmarshalling
包含日志: 是
代码:
Profile *Profile::Unmarshalling(Parcel &parcel)
{
    Profile *profile = new (std::nothrow) Profile();
    if (profile && !profile->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete profile;
        profile = nullptr;
    }
    return profile;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 37:5
Spell: 
包含日志: 是
代码:
    if (profile && !profile->ReadFromParcel(parcel)) {
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");
        delete profile;
        profile = nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 38:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 45:15
Spell: Marshalling
包含日志: 否
代码:
bool Profile::Marshalling(Parcel &parcel) const
{
    return (parcel.WriteString16(Str8ToStr16(profileName_)));
}

--------------------------------------------------------------------------------
