代码块类型: Namespace Declaration
位置: 23:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
AppForegroundStateObserverStub::AppForegroundStateObserverStub() {}

AppForegroundStateObserverStub::~AppForegroundStateObserverStub() {}

int32_t AppForegroundStateObserverStub::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    std::u16string descriptor = AppForegroundStateObserverStub::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");
        return ERR_INVALID_STATE;
    }

    if (code == static_cast<uint32_t>(IAppForegroundStateObserver::Message::ON_APP_STATE_CHANGED)) {
        return HandleOnAppStateChanged(data, reply);
    }

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

int32_t AppForegroundStateObserverStub::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<AppStateData> processData(data.ReadParcelable<AppStateData>());
    if (processData == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessData is null.");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    OnAppStateChanged(*processData);
    return NO_ERROR;
}

AppForegroundStateObserverRecipient::AppForegroundStateObserverRecipient(RemoteDiedHandler handler) : handler_(handler)
{}

void AppForegroundStateObserverRecipient::OnRemoteDied(const wptr<IRemoteObject> &__attribute__((unused)) remote)
{
    TAG_LOGE(AAFwkTag::APPMGR, "Remote died.");
    if (handler_) {
        handler_(remote);
    }
}
} // namespace AppExecFwk
} // namespace OHOS
--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 24:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
AppForegroundStateObserverStub::AppForegroundStateObserverStub() {}

AppForegroundStateObserverStub::~AppForegroundStateObserverStub() {}

int32_t AppForegroundStateObserverStub::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    std::u16string descriptor = AppForegroundStateObserverStub::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");
        return ERR_INVALID_STATE;
    }

    if (code == static_cast<uint32_t>(IAppForegroundStateObserver::Message::ON_APP_STATE_CHANGED)) {
        return HandleOnAppStateChanged(data, reply);
    }

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

int32_t AppForegroundStateObserverStub::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<AppStateData> processData(data.ReadParcelable<AppStateData>());
    if (processData == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessData is null.");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    OnAppStateChanged(*processData);
    return NO_ERROR;
}

AppForegroundStateObserverRecipient::AppForegroundStateObserverRecipient(RemoteDiedHandler handler) : handler_(handler)
{}

void AppForegroundStateObserverRecipient::OnRemoteDied(const wptr<IRemoteObject> &__attribute__((unused)) remote)
{
    TAG_LOGE(AAFwkTag::APPMGR, "Remote died.");
    if (handler_) {
        handler_(remote);
    }
}
} // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 25:33
Spell: AppForegroundStateObserverStub
包含日志: 否
代码:
AppForegroundStateObserverStub::AppForegroundStateObserverStub() {}

--------------------------------------------------------------------------------
代码块类型: Destructor Declaration
位置: 27:33
Spell: ~AppForegroundStateObserverStub
包含日志: 否
代码:
AppForegroundStateObserverStub::~AppForegroundStateObserverStub() {}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 29:41
Spell: OnRemoteRequest
包含日志: 是
代码:
int32_t AppForegroundStateObserverStub::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    std::u16string descriptor = AppForegroundStateObserverStub::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");
        return ERR_INVALID_STATE;
    }

    if (code == static_cast<uint32_t>(IAppForegroundStateObserver::Message::ON_APP_STATE_CHANGED)) {
        return HandleOnAppStateChanged(data, reply);
    }

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 32:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 35:5
Spell: 
包含日志: 是
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 36:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 40:5
Spell: 
包含日志: 否
代码:
    if (code == static_cast<uint32_t>(IAppForegroundStateObserver::Message::ON_APP_STATE_CHANGED)) {
        return HandleOnAppStateChanged(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 47:41
Spell: HandleOnAppStateChanged
包含日志: 是
代码:
int32_t AppForegroundStateObserverStub::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<AppStateData> processData(data.ReadParcelable<AppStateData>());
    if (processData == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessData is null.");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    OnAppStateChanged(*processData);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 50:5
Spell: 
包含日志: 是
代码:
    if (processData == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessData is null.");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 51:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ProcessData is null.");

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 59:38
Spell: AppForegroundStateObserverRecipient
包含日志: 否
代码:
AppForegroundStateObserverRecipient::AppForegroundStateObserverRecipient(RemoteDiedHandler handler) : handler_(handler)
{}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 62:43
Spell: OnRemoteDied
包含日志: 是
代码:
void AppForegroundStateObserverRecipient::OnRemoteDied(const wptr<IRemoteObject> &__attribute__((unused)) remote)
{
    TAG_LOGE(AAFwkTag::APPMGR, "Remote died.");
    if (handler_) {
        handler_(remote);
    }
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 64:5
Spell: 
包含日志: 是
代码:
    TAG_LOGE(AAFwkTag::APPMGR, "Remote died.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 65:5
Spell: 
包含日志: 否
代码:
    if (handler_) {
        handler_(remote);
    }

--------------------------------------------------------------------------------
