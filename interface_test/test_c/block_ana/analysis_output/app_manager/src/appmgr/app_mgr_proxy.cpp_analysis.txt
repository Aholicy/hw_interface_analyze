代码块类型: Namespace Declaration
位置: 25:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AppExecFwk {
constexpr int32_t CYCLE_LIMIT = 1000;
AppMgrProxy::AppMgrProxy(const sptr<IRemoteObject> &impl) : IRemoteProxy<IAppMgr>(impl)
{}

bool AppMgrProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(AppMgrProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

void AppMgrProxy::AttachApplication(const sptr<IRemoteObject> &obj)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (obj == nullptr || obj.GetRefPtr() == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "app scheduler null");
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, obj.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ATTACH_APPLICATION, data, reply, option);
}

int32_t AppMgrProxy::PreloadApplication(const std::string &bundleName, int32_t userId,
    AppExecFwk::PreloadMode preloadMode, int32_t appIndex)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "PreloadApplication Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String16, Str8ToStr16(bundleName));
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(preloadMode));
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appIndex);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRELOAD_APPLICATION, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::ApplicationForegrounded(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_FOREGROUNDED, data, reply, option);
}

void AppMgrProxy::ApplicationBackgrounded(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_BACKGROUNDED, data, reply, option);
}

void AppMgrProxy::ApplicationTerminated(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_TERMINATED, data, reply, option);
}

void AppMgrProxy::AbilityCleaned(const sptr<IRemoteObject> &token)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, token.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ABILITY_CLEANED, data, reply, option);
}

sptr<IAmsMgr> AppMgrProxy::GetAmsMgr()
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        return nullptr;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_MGR_INSTANCE, data, reply)) {
        return nullptr;
    }
    sptr<IRemoteObject> object = reply.ReadRemoteObject();
    sptr<IAmsMgr> amsMgr = iface_cast<IAmsMgr>(object);
    if (!amsMgr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Ability manager service instance is nullptr. ");
        return nullptr;
    }
    return amsMgr;
}

int32_t AppMgrProxy::ClearUpApplicationData(const std::string &bundleName, int32_t appCloneIndex, const int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "Called.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::ClearUpApplicationDataBySelf(int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA_BY_SELF, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetAllRunningProcesses(std::vector<RunningProcessInfo> &info)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RUNNING_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetRunningMultiAppInfoByBundleName(const std::string &bundleName,
    RunningMultiAppInfo &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_MULTIAPP_INFO_BY_BUNDLENAME, data, reply, option);
    std::unique_ptr<RunningMultiAppInfo> infoReply(reply.ReadParcelable<RunningMultiAppInfo>());
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }
    info = *infoReply;
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetAllRunningInstanceKeysBySelf(std::vector<std::string> &instanceKeys)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_SELF, data, reply, option);
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }
    int32_t result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetAllRunningInstanceKeysByBundleName(const std::string &bundleName,
    std::vector<std::string> &instanceKeys, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_BUNDLENAME, data, reply, option);
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }
    int32_t result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetRunningProcessesByBundleType(const BundleType bundleType,
    std::vector<RunningProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(bundleType));

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_BUNDLE_TYPE, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetAllRenderProcesses(std::vector<RenderProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RENDER_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RenderProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

#ifdef SUPPORT_CHILD_PROCESS
int AppMgrProxy::GetAllChildrenProcesses(std::vector<ChildProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::GET_ALL_CHILDREN_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<ChildProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}
#endif // SUPPORT_CHILD_PROCESS

int32_t AppMgrProxy::JudgeSandboxByPid(pid_t pid, bool &isSandbox)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::JUDGE_SANDBOX_BY_PID, data, reply, option);
    isSandbox = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsTerminatingByPid(pid_t pid, bool &isTerminating)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_TERMINATING_BY_PID, data, reply, option);
    isTerminating = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_USER_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetProcessRunningInformation(RunningProcessInfo &info)
{
    MessageParcel data;
    MessageParcel reply;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_PROCESS_RUNNING_INFORMATION, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    std::unique_ptr<RunningProcessInfo> infoReply(reply.ReadParcelable<RunningProcessInfo>());
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }
    info = *infoReply;
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyMemoryLevel(int32_t level)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, level);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_MEMORY_LEVEL, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyProcMemoryLevel(const std::map<pid_t, MemoryLevel> &procLevelMap)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    MemoryLevelInfo memoryLevelInfo(procLevelMap);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &memoryLevelInfo);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_PROC_MEMORY_LEVEL, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::DumpHeapMemory(const int32_t pid, OHOS::AppExecFwk::MallocInfo &mallocInfo)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpHeapMemory.");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageOption option(MessageOption::TF_SYNC);
    int32_t ret = SendRequest(AppMgrInterfaceCode::DUMP_HEAP_MEMORY_PROCESS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "AppMgrProxy SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    std::unique_ptr<MallocInfo> info(reply.ReadParcelable<MallocInfo>());
    if (info == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "MallocInfo ReadParcelable nullptr");
        return ERR_NULL_OBJECT;
    }
    mallocInfo = *info;
    return ret;
}

int32_t AppMgrProxy::DumpJsHeapMemory(OHOS::AppExecFwk::JsHeapDumpInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpJsHeapMemory.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &info);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::DUMP_JSHEAP_MEMORY_PROCESS, data, reply, option);
    return reply.ReadInt32();
}

bool AppMgrProxy::SendTransactCmd(AppMgrInterfaceCode code, MessageParcel &data, MessageParcel &reply)
{
    MessageOption option(MessageOption::TF_SYNC);
    int32_t result = SendRequest(code, data, reply, option);
    if (result != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "receive error transact code %{public}d in transact cmd %{public}d", result, code);
        return false;
    }
    return true;
}

void AppMgrProxy::AddAbilityStageDone(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_ADD_ABILITY_STAGE_INFO_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
    return;
}

void AppMgrProxy::StartupResidentProcess(const std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(bundleInfos.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");
        return;
    }

    for (auto &bundleInfo : bundleInfos) {
        if (!data.WriteParcelable(&bundleInfo)) {
            TAG_LOGE(AAFwkTag::APPMGR, "write bundle info failed");
            return;
        }
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::STARTUP_RESIDENT_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
    return;
}

template<typename T>
int AppMgrProxy::GetParcelableInfos(MessageParcel &reply, std::vector<T> &parcelableInfos)
{
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<T> info(reply.ReadParcelable<T>());
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed");
            return ERR_INVALID_VALUE;
        }
        parcelableInfos.emplace_back(*info);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "get parcelable infos success");
    return NO_ERROR;
}

int AppMgrProxy::RegisterApplicationStateObserver(
    const sptr<IApplicationStateObserver> &observer, const std::vector<std::string> &bundleNameList)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterApplicationStateObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteStringVector(bundleNameList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "bundleNameList write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::REGISTER_APPLICATION_STATE_OBSERVER,
        data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int AppMgrProxy::UnregisterApplicationStateObserver(
    const sptr<IApplicationStateObserver> &observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterApplicationStateObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APPLICATION_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterAbilityForegroundStateObserver(const sptr<IAbilityForegroundStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());
    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterAbilityForegroundStateObserver(const sptr<IAbilityForegroundStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());
    MessageParcel reply;
    MessageOption option;
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int AppMgrProxy::GetForegroundApplications(std::vector<AppStateData> &list)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_FOREGROUND_APPLICATIONS, data, reply, option);
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppStateData> info(reply.ReadParcelable<AppStateData>());
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        list.emplace_back(*info);
    }
    return reply.ReadInt32();
}

int AppMgrProxy::StartUserTestProcess(
    const AAFwk::Want &want, const sptr<IRemoteObject> &observer, const BundleInfo &bundleInfo, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &bundleInfo);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_USER_TEST_PROCESS, data, reply, option);
    return reply.ReadInt32();
}

int AppMgrProxy::FinishUserTest(const std::string &msg, const int64_t &resultCode, const std::string &bundleName)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_WRITE_RET_INT(data, String, msg);
    PARCEL_UTIL_WRITE_RET_INT(data, Int64, resultCode);
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::FINISH_USER_TEST, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::ScheduleAcceptWantDone(const int32_t recordId, const AAFwk::Want &want, const std::string &flag)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_ACCEPT_WANT_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
}

void AppMgrProxy::ScheduleNewProcessRequestDone(const int32_t recordId, const AAFwk::Want &want,
    const std::string &flag)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_NEW_PROCESS_REQUEST_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
}

int AppMgrProxy::GetAbilityRecordsByProcessID(const int pid, std::vector<sptr<IRemoteObject>> &tokens)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    data.WriteInt32(pid);
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ABILITY_RECORDS_BY_PROCESS_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        auto iRemote = reply.ReadRemoteObject();
        tokens.emplace_back(iRemote);
    }
    return reply.ReadInt32();
}

int AppMgrProxy::PreStartNWebSpawnProcess()
{
    TAG_LOGI(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRE_START_NWEBSPAWN_PROCESS, data, reply, option);
    auto result = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess failed, result: %{public}d", result);
    }
    return result;
}

int AppMgrProxy::StartRenderProcess(const std::string &renderParam,
                                    int32_t ipcFd, int32_t sharedFd,
                                    int32_t crashFd, pid_t &renderPid, bool isGPU)
{
    if (renderParam.empty() || ipcFd <= 0 || sharedFd <= 0 || crashFd <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, renderParam:%{private}s, ipcFd:%{public}d, "
            "sharedFd:%{public}d, crashFd:%{public}d", renderParam.c_str(), ipcFd, sharedFd, crashFd);
        return -1;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteString(renderParam)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want paramSize failed.");
        return -1;
    }

    if (!data.WriteFileDescriptor(ipcFd) || !data.WriteFileDescriptor(sharedFd) ||
        !data.WriteFileDescriptor(crashFd)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want fd failed, ipcFd:%{public}d, sharedFd:%{public}d, "
            "crashFd:%{public}d", ipcFd, sharedFd, crashFd);
        return -1;
    }

    if (!data.WriteBool(isGPU)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want processType failed.");
        return -1;
    }

    int32_t ret = SendRequest(AppMgrInterfaceCode::START_RENDER_PROCESS, data,
        reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    auto result = reply.ReadInt32();
    renderPid = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess failed, result: %{public}d", result);
    }
    return result;
}

void AppMgrProxy::AttachRenderProcess(const sptr<IRemoteObject> &renderScheduler)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    if (!renderScheduler) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler is null");
        return;
    }

    TAG_LOGD(AAFwkTag::APPMGR, "AttachRenderProcess start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(renderScheduler)) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::ATTACH_RENDER_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd ATTACH_RENDER_PROCESS failed");
        return;
    }
}

void AppMgrProxy::SaveBrowserChannel(sptr<IRemoteObject> browser)
{
    if (!browser) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser is null");
        return;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteRemoteObject(browser)) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SAVE_BROWSER_CHANNEL, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd SAVE_BROWSER_CHANNEL failed");
        return;
    }
}

int AppMgrProxy::GetRenderProcessTerminationStatus(pid_t renderPid, int &status)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(renderPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write renderPid failed.");
        return -1;
    }

    int32_t ret = SendRequest(AppMgrInterfaceCode::GET_RENDER_PROCESS_TERMINATION_STATUS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus SendRequest is failed, error code: %{public}d",
            ret);
        return ret;
    }

    auto result = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus failed, result: %{public}d", result);
        return result;
    }
    status = reply.ReadInt32();
    return 0;
}

int32_t AppMgrProxy::UpdateConfiguration(const Configuration &config, const int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfiguration");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");
        return ERR_INVALID_DATA;
    }
    int32_t ret = SendRequest(AppMgrInterfaceCode::UPDATE_CONFIGURATION, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UpdateConfigurationByBundleName(const Configuration &config, const std::string &name,
    int32_t appIndex)
{
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfigurationByBundleName");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteString(name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel name failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_INVALID_DATA;
    }
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    int32_t ret = SendRequest(AppMgrInterfaceCode::UPDATE_CONFIGURATION_BY_BUNDLE_NAME, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetConfiguration(Configuration& config)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel data failed");
        return ERR_INVALID_DATA;
    }
    int32_t ret = SendRequest(AppMgrInterfaceCode::GET_CONFIGURATION, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    std::unique_ptr<Configuration> info(reply.ReadParcelable<Configuration>());
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "read configuration failed.");
        return ERR_UNKNOWN_OBJECT;
    }
    config = *info;
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterConfigurationObserver(const sptr<IConfigurationObserver>& observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterConfigurationObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::REGISTER_CONFIGURATION_OBSERVER, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterConfigurationObserver(const sptr<IConfigurationObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterConfigurationObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::UNREGISTER_CONFIGURATION_OBSERVER,
        data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

bool AppMgrProxy::GetAppRunningStateByBundleName(const std::string &bundleName)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::GET_APP_RUNNING_STATE,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }

    return reply.ReadBool();
}

int32_t AppMgrProxy::NotifyLoadRepairPatch(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::NOTIFY_LOAD_REPAIR_PATCH,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyHotReloadPage(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::NOTIFY_HOT_RELOAD_PAGE,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}

#ifdef BGTASKMGR_CONTINUOUS_TASK_ENABLE
int32_t AppMgrProxy::SetContinuousTaskProcess(int32_t pid, bool isContinuousTask)
{
    TAG_LOGD(AAFwkTag::APPMGR, "SetContinuousTaskProcess start.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid write failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteBool(isContinuousTask)) {
        TAG_LOGE(AAFwkTag::APPMGR, "isContinuousTask write failed.");
        return ERR_INVALID_DATA;
    }

    auto ret = SendRequest(AppMgrInterfaceCode::SET_CONTINUOUSTASK_PROCESS,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}
#endif

int32_t AppMgrProxy::NotifyUnLoadRepairPatch(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_UNLOAD_REPAIR_PATCH, data, reply, option);
    return reply.ReadInt32();
}

bool AppMgrProxy::IsSharedBundleRunning(const std::string &bundleName, uint32_t versionCode)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteString(bundleName) || !data.WriteUint32(versionCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name or version code failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::IS_SHARED_BUNDLE_RUNNING,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return false;
    }

    return reply.ReadBool();
}

int32_t AppMgrProxy::StartNativeProcessForDebugger(const AAFwk::Want &want)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_PROCESS_FOR_DEBUGGER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetBundleNameByPid(const int pid, std::string &bundleName, int32_t &uid)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid write failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_BUNDLE_NAME_BY_PID, data, reply, option);
    bundleName = reply.ReadString();
    uid = reply.ReadInt32();
    return ERR_NONE;
}

int32_t AppMgrProxy::GetRunningProcessInfoByPid(const pid_t pid, OHOS::AppExecFwk::RunningProcessInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(static_cast<int32_t>(pid))) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_PROCESS_INFO_BY_PID, data, reply, option);

    std::unique_ptr<AppExecFwk::RunningProcessInfo> processInfo(reply.ReadParcelable<AppExecFwk::RunningProcessInfo>());
    if (processInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info failded");
        return ERR_INVALID_DATA;
    }
    info = *processInfo;
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyAppFault(const FaultData &faultData)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultData error.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyAppFaultBySA(const AppFaultDataBySA &faultData)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultDataBySA error.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT_BY_SA, data, reply, option);
    return reply.ReadInt32();
}

bool AppMgrProxy::SetAppFreezeFilter(int32_t pid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return false;
    }
    auto ret = SendRequest(AppMgrInterfaceCode::SET_APPFREEZE_FILTER,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }
    return reply.ReadBool();
}

int32_t AppMgrProxy::GetProcessMemoryByPid(const int32_t pid, int32_t &memorySize)
{
    TAG_LOGD(AAFwkTag::APPMGR, "GetProcessMemoryByPid start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_PROCESS_MEMORY_BY_PID, data, reply, option);
    memorySize = reply.ReadInt32();
    auto result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetRunningProcessInformation(
    const std::string &bundleName, int32_t userId, std::vector<RunningProcessInfo> &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "GetRunningProcessInformation start");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write userId failed.");
        return ERR_INVALID_DATA;
    }

    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendRequest(AppMgrInterfaceCode::GET_PIDS_BY_BUNDLENAME,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::ChangeAppGcState(pid_t pid, int32_t state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    MessageOption option(MessageOption::TF_ASYNC);
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid write failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHANGE_APP_GC_STATE, data, reply, option);
    return NO_ERROR;
}

int32_t AppMgrProxy::NotifyPageShow(const sptr<IRemoteObject> &token, const PageStateData &pageStateData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "call");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_SHOW, data, reply, option);
    return NO_ERROR;
}

int32_t AppMgrProxy::NotifyPageHide(const sptr<IRemoteObject> &token, const PageStateData &pageStateData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_HIDE, data, reply, option);
    return NO_ERROR;
}

int32_t AppMgrProxy::SendRequest(AppMgrInterfaceCode code, MessageParcel &data, MessageParcel &reply,
    MessageOption& option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_NULL_OBJECT;
    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);
}

int32_t AppMgrProxy::RegisterAppRunningStatusListener(const sptr<IRemoteObject> &listener)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterAppRunningStatusListener(const sptr<IRemoteObject> &listener)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterAppForegroundStateObserver(const sptr<IAppForegroundStateObserver> &observer)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }
    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterAppForegroundStateObserver(const sptr<IAppForegroundStateObserver> &observer)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsApplicationRunning(const std::string &bundleName, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    isRunning = false;
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APPLICATION_RUNNING, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsAppRunning(const std::string &bundleName, int32_t appCloneIndex, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsAppRunningByBundleNameAndUserId(const std::string &bundleName, int32_t userId, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING_BY_BUNDLE_NAME_AND_USER_ID, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

#ifdef SUPPORT_CHILD_PROCESS
int32_t AppMgrProxy::StartChildProcess(pid_t &childPid, const ChildProcessRequest &request)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (request.srcEntry.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, srcEntry:%{private}s", request.srcEntry.c_str());
        return ERR_INVALID_VALUE;
    }
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return IPC_PROXY_ERR;
    }
    if (!data.WriteParcelable(&request)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write param request failed.");
        return IPC_PROXY_ERR;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_CHILD_PROCESS, data, reply, option);
    auto result = reply.ReadInt32();
    if (result == ERR_OK) {
        childPid = reply.ReadInt32();
    }
    return result;
}

int32_t AppMgrProxy::GetChildProcessInfoForSelf(ChildProcessInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_CHILD_PROCCESS_INFO_FOR_SELF, data, reply, option);
    auto result = reply.ReadInt32();
    if (result == ERR_OK) {
        std::unique_ptr<ChildProcessInfo> infoReply(reply.ReadParcelable<ChildProcessInfo>());
        info = *infoReply;
    }
    return result;
}

void AppMgrProxy::AttachChildProcess(const sptr<IRemoteObject> &childScheduler)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (!childScheduler) {
        TAG_LOGE(AAFwkTag::APPMGR, "childScheduler is null");
        return;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, childScheduler.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::ATTACH_CHILD_PROCESS, data, reply, option);
}

void AppMgrProxy::ExitChildProcessSafely()
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::EXIT_CHILD_PROCESS_SAFELY, data, reply, option);
}
#endif // SUPPORT_CHILD_PROCESS

bool AppMgrProxy::IsFinalAppProcess()
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::IS_FINAL_APP_PROCESS,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request is failed, error code: %{public}d", ret);
        return false;
    }

    return reply.ReadBool();
}

int32_t AppMgrProxy::RegisterRenderStateObserver(const sptr<IRenderStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_RENDER_STATUS_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterRenderStateObserver(const sptr<IRenderStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_RENDER_STATUS_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UpdateRenderState(pid_t renderPid, int32_t state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, renderPid);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, state);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_RENDER_STATUS, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::SignRestartAppFlag(int32_t uid, const std::string &instanceKey)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, uid);
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SIGN_RESTART_APP_FLAG, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetAppRunningUniqueIdByPid(pid_t pid, std::string &appRunningUniqueId)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_APP_RUNNING_UNIQUE_ID_BY_PID, data, reply, option);
    auto result = reply.ReadInt32();
    if (result == ERR_OK) {
        appRunningUniqueId = reply.ReadString();
        TAG_LOGD(AAFwkTag::APPMGR, "appRunningUniqueId = %{public}s", appRunningUniqueId.c_str());
    }
    return result;
}

int32_t AppMgrProxy::GetAllUIExtensionRootHostPid(pid_t pid, std::vector<pid_t> &hostPids)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_ROOT_HOST_PID, data, reply, option);

    int32_t size = reply.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        hostPids.emplace_back(temp);
    }

    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetAllUIExtensionProviderPid(pid_t hostPid, std::vector<pid_t> &providerPids)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, hostPid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_PROVIDER_PID, data, reply, option);

    int32_t size = reply.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        providerPids.emplace_back(temp);
    }

    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyMemorySizeStateChanged(bool isMemorySizeSufficient)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isMemorySizeSufficient);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_MEMORY_SIZE_STATE_CHANGED, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::SetSupportedProcessCacheSelf(bool isSupport)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE_SELF, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::SetSupportedProcessCache(int32_t pid, bool isSupport)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::SetAppAssertionPauseState(bool flag)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Bool, flag);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::SET_APP_ASSERT_PAUSE_STATE_SELF, data, reply, option);
}

#ifdef SUPPORT_CHILD_PROCESS
int32_t AppMgrProxy::StartNativeChildProcess(const std::string &libName, int32_t childProcessCount,
    const sptr<IRemoteObject> &callback)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (libName.empty() || !callback) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, libName:%{private}s", libName.c_str());
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, libName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, childProcessCount);
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, callback);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_CHILD_PROCESS, data, reply, option);
    return reply.ReadInt32();
}
#endif // SUPPORT_CHILD_PROCESS

int32_t AppMgrProxy::CheckCallingIsUserTestMode(const pid_t pid, bool &isUserTest)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);
    int32_t ret = SendRequest(AppMgrInterfaceCode::CHECK_CALLING_IS_USER_TEST_MODE, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        isUserTest = false;
        return ret;
    }
    isUserTest = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PROCESS_DEPENDED_ON_WEB, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::KillProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::KILL_PROCESS_DEPENDED_ON_WEB, data, reply, option);
}

void AppMgrProxy::RestartResidentProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::RESTART_RESIDENT_PROCESS_DEPENDED_ON_WEB, data, reply, option);
}

int32_t AppMgrProxy::GetSupportedProcessCachePids(const std::string &bundleName,
    std::vector<int32_t> &pidList)
{
    TAG_LOGD(AAFwkTag::APPMGR, "Called.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_VALUE;
    }
    auto ret = SendRequest(AppMgrInterfaceCode::GET_SUPPORTED_PROCESS_CACHE_PIDS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    pidList.clear();
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        pidList.push_back(reply.ReadInt32());
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterKiaInterceptor(const sptr<IKiaInterceptor> &interceptor)
{
    if (interceptor == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "interceptor is nullptr.");
        return ERR_INVALID_VALUE;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteRemoteObject(interceptor->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interceptor failed.");
        return ERR_INVALID_VALUE;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_KIA_INTERCEPTOR, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::CheckIsKiaProcess(pid_t pid, bool &isKia)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_VALUE;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHECK_IS_KIA_PROCESS, data, reply, option);
    int32_t ret = reply.ReadInt32();
    if (ret != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed,ret=%{public}d.", ret);
        return ret;
    }
    isKia = reply.ReadBool();
    return ERR_OK;
}

int32_t AppMgrProxy::KillAppSelfWithInstanceKey(const std::string &instanceKey, bool clearPageStack,
    const std::string& reason)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, clearPageStack);
    PARCEL_UTIL_WRITE_RET_INT(data, String, reason);

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::KILL_APP_SELF_WITH_INSTANCE_KEY, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::UpdateInstanceKeyBySpecifiedId(int32_t specifiedId, std::string &instanceKey)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, specifiedId);
    PARCEL_UTIL_WRITE_NORET(data, String, instanceKey);

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);
}

int32_t AppMgrProxy::HasAppRecord(const AAFwk::Want &want, const AbilityInfo &abilityInfo, bool &result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &abilityInfo);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);
    result = reply.ReadBool();
    return ERR_OK;
}
}  // namespace AppExecFwk
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 26:11
Spell: AppExecFwk
包含日志: 是
代码:
namespace AppExecFwk {
constexpr int32_t CYCLE_LIMIT = 1000;
AppMgrProxy::AppMgrProxy(const sptr<IRemoteObject> &impl) : IRemoteProxy<IAppMgr>(impl)
{}

bool AppMgrProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(AppMgrProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

void AppMgrProxy::AttachApplication(const sptr<IRemoteObject> &obj)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (obj == nullptr || obj.GetRefPtr() == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "app scheduler null");
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, obj.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ATTACH_APPLICATION, data, reply, option);
}

int32_t AppMgrProxy::PreloadApplication(const std::string &bundleName, int32_t userId,
    AppExecFwk::PreloadMode preloadMode, int32_t appIndex)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "PreloadApplication Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String16, Str8ToStr16(bundleName));
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(preloadMode));
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appIndex);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRELOAD_APPLICATION, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::ApplicationForegrounded(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_FOREGROUNDED, data, reply, option);
}

void AppMgrProxy::ApplicationBackgrounded(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_BACKGROUNDED, data, reply, option);
}

void AppMgrProxy::ApplicationTerminated(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_TERMINATED, data, reply, option);
}

void AppMgrProxy::AbilityCleaned(const sptr<IRemoteObject> &token)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, token.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ABILITY_CLEANED, data, reply, option);
}

sptr<IAmsMgr> AppMgrProxy::GetAmsMgr()
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        return nullptr;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_MGR_INSTANCE, data, reply)) {
        return nullptr;
    }
    sptr<IRemoteObject> object = reply.ReadRemoteObject();
    sptr<IAmsMgr> amsMgr = iface_cast<IAmsMgr>(object);
    if (!amsMgr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Ability manager service instance is nullptr. ");
        return nullptr;
    }
    return amsMgr;
}

int32_t AppMgrProxy::ClearUpApplicationData(const std::string &bundleName, int32_t appCloneIndex, const int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "Called.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::ClearUpApplicationDataBySelf(int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA_BY_SELF, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetAllRunningProcesses(std::vector<RunningProcessInfo> &info)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RUNNING_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetRunningMultiAppInfoByBundleName(const std::string &bundleName,
    RunningMultiAppInfo &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_MULTIAPP_INFO_BY_BUNDLENAME, data, reply, option);
    std::unique_ptr<RunningMultiAppInfo> infoReply(reply.ReadParcelable<RunningMultiAppInfo>());
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }
    info = *infoReply;
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetAllRunningInstanceKeysBySelf(std::vector<std::string> &instanceKeys)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_SELF, data, reply, option);
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }
    int32_t result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetAllRunningInstanceKeysByBundleName(const std::string &bundleName,
    std::vector<std::string> &instanceKeys, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_BUNDLENAME, data, reply, option);
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }
    int32_t result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetRunningProcessesByBundleType(const BundleType bundleType,
    std::vector<RunningProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(bundleType));

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_BUNDLE_TYPE, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetAllRenderProcesses(std::vector<RenderProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RENDER_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RenderProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

#ifdef SUPPORT_CHILD_PROCESS
int AppMgrProxy::GetAllChildrenProcesses(std::vector<ChildProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::GET_ALL_CHILDREN_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<ChildProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}
#endif // SUPPORT_CHILD_PROCESS

int32_t AppMgrProxy::JudgeSandboxByPid(pid_t pid, bool &isSandbox)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::JUDGE_SANDBOX_BY_PID, data, reply, option);
    isSandbox = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsTerminatingByPid(pid_t pid, bool &isTerminating)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_TERMINATING_BY_PID, data, reply, option);
    isTerminating = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_USER_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetProcessRunningInformation(RunningProcessInfo &info)
{
    MessageParcel data;
    MessageParcel reply;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_PROCESS_RUNNING_INFORMATION, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    std::unique_ptr<RunningProcessInfo> infoReply(reply.ReadParcelable<RunningProcessInfo>());
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }
    info = *infoReply;
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyMemoryLevel(int32_t level)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, level);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_MEMORY_LEVEL, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyProcMemoryLevel(const std::map<pid_t, MemoryLevel> &procLevelMap)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    MemoryLevelInfo memoryLevelInfo(procLevelMap);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &memoryLevelInfo);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_PROC_MEMORY_LEVEL, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::DumpHeapMemory(const int32_t pid, OHOS::AppExecFwk::MallocInfo &mallocInfo)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpHeapMemory.");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageOption option(MessageOption::TF_SYNC);
    int32_t ret = SendRequest(AppMgrInterfaceCode::DUMP_HEAP_MEMORY_PROCESS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "AppMgrProxy SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    std::unique_ptr<MallocInfo> info(reply.ReadParcelable<MallocInfo>());
    if (info == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "MallocInfo ReadParcelable nullptr");
        return ERR_NULL_OBJECT;
    }
    mallocInfo = *info;
    return ret;
}

int32_t AppMgrProxy::DumpJsHeapMemory(OHOS::AppExecFwk::JsHeapDumpInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpJsHeapMemory.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &info);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::DUMP_JSHEAP_MEMORY_PROCESS, data, reply, option);
    return reply.ReadInt32();
}

bool AppMgrProxy::SendTransactCmd(AppMgrInterfaceCode code, MessageParcel &data, MessageParcel &reply)
{
    MessageOption option(MessageOption::TF_SYNC);
    int32_t result = SendRequest(code, data, reply, option);
    if (result != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "receive error transact code %{public}d in transact cmd %{public}d", result, code);
        return false;
    }
    return true;
}

void AppMgrProxy::AddAbilityStageDone(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_ADD_ABILITY_STAGE_INFO_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
    return;
}

void AppMgrProxy::StartupResidentProcess(const std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(bundleInfos.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");
        return;
    }

    for (auto &bundleInfo : bundleInfos) {
        if (!data.WriteParcelable(&bundleInfo)) {
            TAG_LOGE(AAFwkTag::APPMGR, "write bundle info failed");
            return;
        }
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::STARTUP_RESIDENT_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
    return;
}

template<typename T>
int AppMgrProxy::GetParcelableInfos(MessageParcel &reply, std::vector<T> &parcelableInfos)
{
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<T> info(reply.ReadParcelable<T>());
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed");
            return ERR_INVALID_VALUE;
        }
        parcelableInfos.emplace_back(*info);
    }
    TAG_LOGD(AAFwkTag::APPMGR, "get parcelable infos success");
    return NO_ERROR;
}

int AppMgrProxy::RegisterApplicationStateObserver(
    const sptr<IApplicationStateObserver> &observer, const std::vector<std::string> &bundleNameList)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterApplicationStateObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteStringVector(bundleNameList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "bundleNameList write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::REGISTER_APPLICATION_STATE_OBSERVER,
        data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int AppMgrProxy::UnregisterApplicationStateObserver(
    const sptr<IApplicationStateObserver> &observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterApplicationStateObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APPLICATION_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterAbilityForegroundStateObserver(const sptr<IAbilityForegroundStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());
    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterAbilityForegroundStateObserver(const sptr<IAbilityForegroundStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());
    MessageParcel reply;
    MessageOption option;
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int AppMgrProxy::GetForegroundApplications(std::vector<AppStateData> &list)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_FOREGROUND_APPLICATIONS, data, reply, option);
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppStateData> info(reply.ReadParcelable<AppStateData>());
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        list.emplace_back(*info);
    }
    return reply.ReadInt32();
}

int AppMgrProxy::StartUserTestProcess(
    const AAFwk::Want &want, const sptr<IRemoteObject> &observer, const BundleInfo &bundleInfo, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &bundleInfo);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_USER_TEST_PROCESS, data, reply, option);
    return reply.ReadInt32();
}

int AppMgrProxy::FinishUserTest(const std::string &msg, const int64_t &resultCode, const std::string &bundleName)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_WRITE_RET_INT(data, String, msg);
    PARCEL_UTIL_WRITE_RET_INT(data, Int64, resultCode);
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::FINISH_USER_TEST, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::ScheduleAcceptWantDone(const int32_t recordId, const AAFwk::Want &want, const std::string &flag)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_ACCEPT_WANT_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
}

void AppMgrProxy::ScheduleNewProcessRequestDone(const int32_t recordId, const AAFwk::Want &want,
    const std::string &flag)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_NEW_PROCESS_REQUEST_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
}

int AppMgrProxy::GetAbilityRecordsByProcessID(const int pid, std::vector<sptr<IRemoteObject>> &tokens)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    data.WriteInt32(pid);
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ABILITY_RECORDS_BY_PROCESS_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        auto iRemote = reply.ReadRemoteObject();
        tokens.emplace_back(iRemote);
    }
    return reply.ReadInt32();
}

int AppMgrProxy::PreStartNWebSpawnProcess()
{
    TAG_LOGI(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRE_START_NWEBSPAWN_PROCESS, data, reply, option);
    auto result = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess failed, result: %{public}d", result);
    }
    return result;
}

int AppMgrProxy::StartRenderProcess(const std::string &renderParam,
                                    int32_t ipcFd, int32_t sharedFd,
                                    int32_t crashFd, pid_t &renderPid, bool isGPU)
{
    if (renderParam.empty() || ipcFd <= 0 || sharedFd <= 0 || crashFd <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, renderParam:%{private}s, ipcFd:%{public}d, "
            "sharedFd:%{public}d, crashFd:%{public}d", renderParam.c_str(), ipcFd, sharedFd, crashFd);
        return -1;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteString(renderParam)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want paramSize failed.");
        return -1;
    }

    if (!data.WriteFileDescriptor(ipcFd) || !data.WriteFileDescriptor(sharedFd) ||
        !data.WriteFileDescriptor(crashFd)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want fd failed, ipcFd:%{public}d, sharedFd:%{public}d, "
            "crashFd:%{public}d", ipcFd, sharedFd, crashFd);
        return -1;
    }

    if (!data.WriteBool(isGPU)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want processType failed.");
        return -1;
    }

    int32_t ret = SendRequest(AppMgrInterfaceCode::START_RENDER_PROCESS, data,
        reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    auto result = reply.ReadInt32();
    renderPid = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess failed, result: %{public}d", result);
    }
    return result;
}

void AppMgrProxy::AttachRenderProcess(const sptr<IRemoteObject> &renderScheduler)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    if (!renderScheduler) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler is null");
        return;
    }

    TAG_LOGD(AAFwkTag::APPMGR, "AttachRenderProcess start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(renderScheduler)) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::ATTACH_RENDER_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd ATTACH_RENDER_PROCESS failed");
        return;
    }
}

void AppMgrProxy::SaveBrowserChannel(sptr<IRemoteObject> browser)
{
    if (!browser) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser is null");
        return;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteRemoteObject(browser)) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SAVE_BROWSER_CHANNEL, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd SAVE_BROWSER_CHANNEL failed");
        return;
    }
}

int AppMgrProxy::GetRenderProcessTerminationStatus(pid_t renderPid, int &status)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(renderPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write renderPid failed.");
        return -1;
    }

    int32_t ret = SendRequest(AppMgrInterfaceCode::GET_RENDER_PROCESS_TERMINATION_STATUS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus SendRequest is failed, error code: %{public}d",
            ret);
        return ret;
    }

    auto result = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus failed, result: %{public}d", result);
        return result;
    }
    status = reply.ReadInt32();
    return 0;
}

int32_t AppMgrProxy::UpdateConfiguration(const Configuration &config, const int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfiguration");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");
        return ERR_INVALID_DATA;
    }
    int32_t ret = SendRequest(AppMgrInterfaceCode::UPDATE_CONFIGURATION, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UpdateConfigurationByBundleName(const Configuration &config, const std::string &name,
    int32_t appIndex)
{
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfigurationByBundleName");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteString(name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel name failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_INVALID_DATA;
    }
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    int32_t ret = SendRequest(AppMgrInterfaceCode::UPDATE_CONFIGURATION_BY_BUNDLE_NAME, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetConfiguration(Configuration& config)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel data failed");
        return ERR_INVALID_DATA;
    }
    int32_t ret = SendRequest(AppMgrInterfaceCode::GET_CONFIGURATION, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    std::unique_ptr<Configuration> info(reply.ReadParcelable<Configuration>());
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "read configuration failed.");
        return ERR_UNKNOWN_OBJECT;
    }
    config = *info;
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterConfigurationObserver(const sptr<IConfigurationObserver>& observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterConfigurationObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::REGISTER_CONFIGURATION_OBSERVER, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterConfigurationObserver(const sptr<IConfigurationObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterConfigurationObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::UNREGISTER_CONFIGURATION_OBSERVER,
        data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

bool AppMgrProxy::GetAppRunningStateByBundleName(const std::string &bundleName)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::GET_APP_RUNNING_STATE,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }

    return reply.ReadBool();
}

int32_t AppMgrProxy::NotifyLoadRepairPatch(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::NOTIFY_LOAD_REPAIR_PATCH,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyHotReloadPage(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::NOTIFY_HOT_RELOAD_PAGE,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}

#ifdef BGTASKMGR_CONTINUOUS_TASK_ENABLE
int32_t AppMgrProxy::SetContinuousTaskProcess(int32_t pid, bool isContinuousTask)
{
    TAG_LOGD(AAFwkTag::APPMGR, "SetContinuousTaskProcess start.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "uid write failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteBool(isContinuousTask)) {
        TAG_LOGE(AAFwkTag::APPMGR, "isContinuousTask write failed.");
        return ERR_INVALID_DATA;
    }

    auto ret = SendRequest(AppMgrInterfaceCode::SET_CONTINUOUSTASK_PROCESS,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}
#endif

int32_t AppMgrProxy::NotifyUnLoadRepairPatch(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_UNLOAD_REPAIR_PATCH, data, reply, option);
    return reply.ReadInt32();
}

bool AppMgrProxy::IsSharedBundleRunning(const std::string &bundleName, uint32_t versionCode)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteString(bundleName) || !data.WriteUint32(versionCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name or version code failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::IS_SHARED_BUNDLE_RUNNING,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return false;
    }

    return reply.ReadBool();
}

int32_t AppMgrProxy::StartNativeProcessForDebugger(const AAFwk::Want &want)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_PROCESS_FOR_DEBUGGER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetBundleNameByPid(const int pid, std::string &bundleName, int32_t &uid)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid write failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_BUNDLE_NAME_BY_PID, data, reply, option);
    bundleName = reply.ReadString();
    uid = reply.ReadInt32();
    return ERR_NONE;
}

int32_t AppMgrProxy::GetRunningProcessInfoByPid(const pid_t pid, OHOS::AppExecFwk::RunningProcessInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(static_cast<int32_t>(pid))) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_PROCESS_INFO_BY_PID, data, reply, option);

    std::unique_ptr<AppExecFwk::RunningProcessInfo> processInfo(reply.ReadParcelable<AppExecFwk::RunningProcessInfo>());
    if (processInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info failded");
        return ERR_INVALID_DATA;
    }
    info = *processInfo;
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyAppFault(const FaultData &faultData)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultData error.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyAppFaultBySA(const AppFaultDataBySA &faultData)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultDataBySA error.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT_BY_SA, data, reply, option);
    return reply.ReadInt32();
}

bool AppMgrProxy::SetAppFreezeFilter(int32_t pid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return false;
    }
    auto ret = SendRequest(AppMgrInterfaceCode::SET_APPFREEZE_FILTER,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }
    return reply.ReadBool();
}

int32_t AppMgrProxy::GetProcessMemoryByPid(const int32_t pid, int32_t &memorySize)
{
    TAG_LOGD(AAFwkTag::APPMGR, "GetProcessMemoryByPid start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_PROCESS_MEMORY_BY_PID, data, reply, option);
    memorySize = reply.ReadInt32();
    auto result = reply.ReadInt32();
    return result;
}

int32_t AppMgrProxy::GetRunningProcessInformation(
    const std::string &bundleName, int32_t userId, std::vector<RunningProcessInfo> &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "GetRunningProcessInformation start");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write userId failed.");
        return ERR_INVALID_DATA;
    }

    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendRequest(AppMgrInterfaceCode::GET_PIDS_BY_BUNDLENAME,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::ChangeAppGcState(pid_t pid, int32_t state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    MessageOption option(MessageOption::TF_ASYNC);
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid write failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHANGE_APP_GC_STATE, data, reply, option);
    return NO_ERROR;
}

int32_t AppMgrProxy::NotifyPageShow(const sptr<IRemoteObject> &token, const PageStateData &pageStateData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "call");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_SHOW, data, reply, option);
    return NO_ERROR;
}

int32_t AppMgrProxy::NotifyPageHide(const sptr<IRemoteObject> &token, const PageStateData &pageStateData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_HIDE, data, reply, option);
    return NO_ERROR;
}

int32_t AppMgrProxy::SendRequest(AppMgrInterfaceCode code, MessageParcel &data, MessageParcel &reply,
    MessageOption& option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_NULL_OBJECT;
    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);
}

int32_t AppMgrProxy::RegisterAppRunningStatusListener(const sptr<IRemoteObject> &listener)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterAppRunningStatusListener(const sptr<IRemoteObject> &listener)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterAppForegroundStateObserver(const sptr<IAppForegroundStateObserver> &observer)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }
    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterAppForegroundStateObserver(const sptr<IAppForegroundStateObserver> &observer)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsApplicationRunning(const std::string &bundleName, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    isRunning = false;
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APPLICATION_RUNNING, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsAppRunning(const std::string &bundleName, int32_t appCloneIndex, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::IsAppRunningByBundleNameAndUserId(const std::string &bundleName, int32_t userId, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING_BY_BUNDLE_NAME_AND_USER_ID, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

#ifdef SUPPORT_CHILD_PROCESS
int32_t AppMgrProxy::StartChildProcess(pid_t &childPid, const ChildProcessRequest &request)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (request.srcEntry.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, srcEntry:%{private}s", request.srcEntry.c_str());
        return ERR_INVALID_VALUE;
    }
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return IPC_PROXY_ERR;
    }
    if (!data.WriteParcelable(&request)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write param request failed.");
        return IPC_PROXY_ERR;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_CHILD_PROCESS, data, reply, option);
    auto result = reply.ReadInt32();
    if (result == ERR_OK) {
        childPid = reply.ReadInt32();
    }
    return result;
}

int32_t AppMgrProxy::GetChildProcessInfoForSelf(ChildProcessInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_CHILD_PROCCESS_INFO_FOR_SELF, data, reply, option);
    auto result = reply.ReadInt32();
    if (result == ERR_OK) {
        std::unique_ptr<ChildProcessInfo> infoReply(reply.ReadParcelable<ChildProcessInfo>());
        info = *infoReply;
    }
    return result;
}

void AppMgrProxy::AttachChildProcess(const sptr<IRemoteObject> &childScheduler)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (!childScheduler) {
        TAG_LOGE(AAFwkTag::APPMGR, "childScheduler is null");
        return;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, childScheduler.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::ATTACH_CHILD_PROCESS, data, reply, option);
}

void AppMgrProxy::ExitChildProcessSafely()
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::EXIT_CHILD_PROCESS_SAFELY, data, reply, option);
}
#endif // SUPPORT_CHILD_PROCESS

bool AppMgrProxy::IsFinalAppProcess()
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::IS_FINAL_APP_PROCESS,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request is failed, error code: %{public}d", ret);
        return false;
    }

    return reply.ReadBool();
}

int32_t AppMgrProxy::RegisterRenderStateObserver(const sptr<IRenderStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_RENDER_STATUS_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UnregisterRenderStateObserver(const sptr<IRenderStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_RENDER_STATUS_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::UpdateRenderState(pid_t renderPid, int32_t state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, renderPid);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, state);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_RENDER_STATUS, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::SignRestartAppFlag(int32_t uid, const std::string &instanceKey)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, uid);
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SIGN_RESTART_APP_FLAG, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetAppRunningUniqueIdByPid(pid_t pid, std::string &appRunningUniqueId)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_APP_RUNNING_UNIQUE_ID_BY_PID, data, reply, option);
    auto result = reply.ReadInt32();
    if (result == ERR_OK) {
        appRunningUniqueId = reply.ReadString();
        TAG_LOGD(AAFwkTag::APPMGR, "appRunningUniqueId = %{public}s", appRunningUniqueId.c_str());
    }
    return result;
}

int32_t AppMgrProxy::GetAllUIExtensionRootHostPid(pid_t pid, std::vector<pid_t> &hostPids)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_ROOT_HOST_PID, data, reply, option);

    int32_t size = reply.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        hostPids.emplace_back(temp);
    }

    return reply.ReadInt32();
}

int32_t AppMgrProxy::GetAllUIExtensionProviderPid(pid_t hostPid, std::vector<pid_t> &providerPids)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, hostPid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_PROVIDER_PID, data, reply, option);

    int32_t size = reply.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        providerPids.emplace_back(temp);
    }

    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyMemorySizeStateChanged(bool isMemorySizeSufficient)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isMemorySizeSufficient);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_MEMORY_SIZE_STATE_CHANGED, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::SetSupportedProcessCacheSelf(bool isSupport)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE_SELF, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::SetSupportedProcessCache(int32_t pid, bool isSupport)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::SetAppAssertionPauseState(bool flag)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Bool, flag);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::SET_APP_ASSERT_PAUSE_STATE_SELF, data, reply, option);
}

#ifdef SUPPORT_CHILD_PROCESS
int32_t AppMgrProxy::StartNativeChildProcess(const std::string &libName, int32_t childProcessCount,
    const sptr<IRemoteObject> &callback)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (libName.empty() || !callback) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, libName:%{private}s", libName.c_str());
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, libName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, childProcessCount);
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, callback);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_CHILD_PROCESS, data, reply, option);
    return reply.ReadInt32();
}
#endif // SUPPORT_CHILD_PROCESS

int32_t AppMgrProxy::CheckCallingIsUserTestMode(const pid_t pid, bool &isUserTest)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);
    int32_t ret = SendRequest(AppMgrInterfaceCode::CHECK_CALLING_IS_USER_TEST_MODE, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        isUserTest = false;
        return ret;
    }
    isUserTest = reply.ReadBool();
    return reply.ReadInt32();
}

int32_t AppMgrProxy::NotifyProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PROCESS_DEPENDED_ON_WEB, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::KillProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::KILL_PROCESS_DEPENDED_ON_WEB, data, reply, option);
}

void AppMgrProxy::RestartResidentProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::RESTART_RESIDENT_PROCESS_DEPENDED_ON_WEB, data, reply, option);
}

int32_t AppMgrProxy::GetSupportedProcessCachePids(const std::string &bundleName,
    std::vector<int32_t> &pidList)
{
    TAG_LOGD(AAFwkTag::APPMGR, "Called.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_VALUE;
    }
    auto ret = SendRequest(AppMgrInterfaceCode::GET_SUPPORTED_PROCESS_CACHE_PIDS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    pidList.clear();
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        pidList.push_back(reply.ReadInt32());
    }
    return reply.ReadInt32();
}

int32_t AppMgrProxy::RegisterKiaInterceptor(const sptr<IKiaInterceptor> &interceptor)
{
    if (interceptor == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "interceptor is nullptr.");
        return ERR_INVALID_VALUE;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteRemoteObject(interceptor->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interceptor failed.");
        return ERR_INVALID_VALUE;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_KIA_INTERCEPTOR, data, reply, option);
    return reply.ReadInt32();
}

int32_t AppMgrProxy::CheckIsKiaProcess(pid_t pid, bool &isKia)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_VALUE;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHECK_IS_KIA_PROCESS, data, reply, option);
    int32_t ret = reply.ReadInt32();
    if (ret != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed,ret=%{public}d.", ret);
        return ret;
    }
    isKia = reply.ReadBool();
    return ERR_OK;
}

int32_t AppMgrProxy::KillAppSelfWithInstanceKey(const std::string &instanceKey, bool clearPageStack,
    const std::string& reason)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, clearPageStack);
    PARCEL_UTIL_WRITE_RET_INT(data, String, reason);

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::KILL_APP_SELF_WITH_INSTANCE_KEY, data, reply, option);
    return reply.ReadInt32();
}

void AppMgrProxy::UpdateInstanceKeyBySpecifiedId(int32_t specifiedId, std::string &instanceKey)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, specifiedId);
    PARCEL_UTIL_WRITE_NORET(data, String, instanceKey);

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);
}

int32_t AppMgrProxy::HasAppRecord(const AAFwk::Want &want, const AbilityInfo &abilityInfo, bool &result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &abilityInfo);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);
    result = reply.ReadBool();
    return ERR_OK;
}
}  // namespace AppExecFwk

--------------------------------------------------------------------------------
代码块类型: Constructor Declaration
位置: 28:14
Spell: AppMgrProxy
包含日志: 否
代码:
AppMgrProxy::AppMgrProxy(const sptr<IRemoteObject> &impl) : IRemoteProxy<IAppMgr>(impl)
{}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 31:19
Spell: WriteInterfaceToken
包含日志: 是
代码:
bool AppMgrProxy::WriteInterfaceToken(MessageParcel &data)
{
    if (!data.WriteInterfaceToken(AppMgrProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 33:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInterfaceToken(AppMgrProxy::GetDescriptor())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 34:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 40:19
Spell: AttachApplication
包含日志: 是
代码:
void AppMgrProxy::AttachApplication(const sptr<IRemoteObject> &obj)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (obj == nullptr || obj.GetRefPtr() == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "app scheduler null");
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, obj.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ATTACH_APPLICATION, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 45:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 48:5
Spell: 
包含日志: 是
代码:
    if (obj == nullptr || obj.GetRefPtr() == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "app scheduler null");
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 49:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "app scheduler null");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 51:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, obj.GetRefPtr());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 51:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, obj.GetRefPtr());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 51:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, obj.GetRefPtr());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 53:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ATTACH_APPLICATION, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 53:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ATTACH_APPLICATION, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 53:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ATTACH_APPLICATION, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 56:22
Spell: PreloadApplication
包含日志: 是
代码:
int32_t AppMgrProxy::PreloadApplication(const std::string &bundleName, int32_t userId,
    AppExecFwk::PreloadMode preloadMode, int32_t appIndex)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "PreloadApplication Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String16, Str8ToStr16(bundleName));
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(preloadMode));
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appIndex);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRELOAD_APPLICATION, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 59:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 63:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "PreloadApplication Write interface token failed.");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 64:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "PreloadApplication Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String16, Str8ToStr16(bundleName));

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 67:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String16, Str8ToStr16(bundleName));

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 67:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String16, Str8ToStr16(bundleName));

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 68:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 68:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 68:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 69:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(preloadMode));

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 69:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(preloadMode));

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 69:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(preloadMode));

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 70:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appIndex);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 70:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appIndex);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 70:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appIndex);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 72:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRELOAD_APPLICATION, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 72:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRELOAD_APPLICATION, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 72:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRELOAD_APPLICATION, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 76:19
Spell: ApplicationForegrounded
包含日志: 否
代码:
void AppMgrProxy::ApplicationForegrounded(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_FOREGROUNDED, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 81:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 84:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 84:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 84:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 86:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_FOREGROUNDED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 86:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_FOREGROUNDED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 86:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_FOREGROUNDED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 89:19
Spell: ApplicationBackgrounded
包含日志: 否
代码:
void AppMgrProxy::ApplicationBackgrounded(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_BACKGROUNDED, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 94:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 97:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 97:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 97:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 99:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_BACKGROUNDED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 99:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_BACKGROUNDED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 99:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_BACKGROUNDED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 102:19
Spell: ApplicationTerminated
包含日志: 否
代码:
void AppMgrProxy::ApplicationTerminated(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_TERMINATED, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 107:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 110:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 110:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 110:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, recordId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 112:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_TERMINATED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 112:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_TERMINATED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 112:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_APPLICATION_TERMINATED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 115:19
Spell: AbilityCleaned
包含日志: 否
代码:
void AppMgrProxy::AbilityCleaned(const sptr<IRemoteObject> &token)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, token.GetRefPtr());

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ABILITY_CLEANED, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 120:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 123:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, token.GetRefPtr());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 123:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, token.GetRefPtr());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 123:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, RemoteObject, token.GetRefPtr());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 125:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ABILITY_CLEANED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 125:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ABILITY_CLEANED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 125:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::APP_ABILITY_CLEANED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 128:28
Spell: GetAmsMgr
包含日志: 是
代码:
sptr<IAmsMgr> AppMgrProxy::GetAmsMgr()
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        return nullptr;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_MGR_INSTANCE, data, reply)) {
        return nullptr;
    }
    sptr<IRemoteObject> object = reply.ReadRemoteObject();
    sptr<IAmsMgr> amsMgr = iface_cast<IAmsMgr>(object);
    if (!amsMgr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Ability manager service instance is nullptr. ");
        return nullptr;
    }
    return amsMgr;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 132:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 135:5
Spell: 
包含日志: 否
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_MGR_INSTANCE, data, reply)) {
        return nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 140:5
Spell: 
包含日志: 是
代码:
    if (!amsMgr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Ability manager service instance is nullptr. ");
        return nullptr;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 141:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Ability manager service instance is nullptr. ");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 147:22
Spell: ClearUpApplicationData
包含日志: 是
代码:
int32_t AppMgrProxy::ClearUpApplicationData(const std::string &bundleName, int32_t appCloneIndex, const int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "Called.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 149:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "Called.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 153:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 156:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 156:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 156:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 157:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 157:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 157:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 158:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 158:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 158:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 160:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 160:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 160:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 164:22
Spell: ClearUpApplicationDataBySelf
包含日志: 是
代码:
int32_t AppMgrProxy::ClearUpApplicationDataBySelf(int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA_BY_SELF, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 166:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 170:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 173:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 173:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 173:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 175:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA_BY_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 175:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA_BY_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 175:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_CLEAR_UP_APPLICATION_DATA_BY_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 179:22
Spell: GetAllRunningProcesses
包含日志: 是
代码:
int32_t AppMgrProxy::GetAllRunningProcesses(std::vector<RunningProcessInfo> &info)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RUNNING_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 185:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 188:5
Spell: 
包含日志: 否
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RUNNING_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 192:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 193:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 200:22
Spell: GetRunningMultiAppInfoByBundleName
包含日志: 是
代码:
int32_t AppMgrProxy::GetRunningMultiAppInfoByBundleName(const std::string &bundleName,
    RunningMultiAppInfo &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_MULTIAPP_INFO_BY_BUNDLENAME, data, reply, option);
    std::unique_ptr<RunningMultiAppInfo> infoReply(reply.ReadParcelable<RunningMultiAppInfo>());
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }
    info = *infoReply;
    int result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 206:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 209:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 209:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 209:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 211:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_MULTIAPP_INFO_BY_BUNDLENAME, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 211:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_MULTIAPP_INFO_BY_BUNDLENAME, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 211:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_MULTIAPP_INFO_BY_BUNDLENAME, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 213:5
Spell: 
包含日志: 是
代码:
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 214:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 222:22
Spell: GetAllRunningInstanceKeysBySelf
包含日志: 否
代码:
int32_t AppMgrProxy::GetAllRunningInstanceKeysBySelf(std::vector<std::string> &instanceKeys)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_SELF, data, reply, option);
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }
    int32_t result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 227:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 231:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 231:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 231:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 232:5
Spell: 
包含日志: 否
代码:
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 239:22
Spell: GetAllRunningInstanceKeysByBundleName
包含日志: 否
代码:
int32_t AppMgrProxy::GetAllRunningInstanceKeysByBundleName(const std::string &bundleName,
    std::vector<std::string> &instanceKeys, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_BUNDLENAME, data, reply, option);
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }
    int32_t result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 245:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 248:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 248:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 248:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 249:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 249:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 249:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 251:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_BUNDLENAME, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 251:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_BUNDLENAME, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 251:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_All_RUNNING_INSTANCE_KEYS_BY_BUNDLENAME, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 252:5
Spell: 
包含日志: 否
代码:
    if (!reply.ReadStringVector(&instanceKeys)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 259:22
Spell: GetRunningProcessesByBundleType
包含日志: 是
代码:
int32_t AppMgrProxy::GetRunningProcessesByBundleType(const BundleType bundleType,
    std::vector<RunningProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(bundleType));

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_BUNDLE_TYPE, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 265:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 268:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(bundleType));

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 268:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(bundleType));

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 268:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, static_cast<int32_t>(bundleType));

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 270:5
Spell: 
包含日志: 否
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_BUNDLE_TYPE, data, reply)) {
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 274:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 275:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 282:22
Spell: GetAllRenderProcesses
包含日志: 是
代码:
int32_t AppMgrProxy::GetAllRenderProcesses(std::vector<RenderProcessInfo> &info)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RENDER_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RenderProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 287:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 290:5
Spell: 
包含日志: 否
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ALL_RENDER_PROCESSES, data, reply)) {
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 294:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 295:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 324:22
Spell: JudgeSandboxByPid
包含日志: 否
代码:
int32_t AppMgrProxy::JudgeSandboxByPid(pid_t pid, bool &isSandbox)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::JUDGE_SANDBOX_BY_PID, data, reply, option);
    isSandbox = reply.ReadBool();
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 329:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 332:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 332:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 332:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 334:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::JUDGE_SANDBOX_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 334:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::JUDGE_SANDBOX_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 334:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::JUDGE_SANDBOX_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 339:22
Spell: IsTerminatingByPid
包含日志: 否
代码:
int32_t AppMgrProxy::IsTerminatingByPid(pid_t pid, bool &isTerminating)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_TERMINATING_BY_PID, data, reply, option);
    isTerminating = reply.ReadBool();
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 344:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 347:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 347:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 347:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 349:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_TERMINATING_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 349:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_TERMINATING_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 349:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_TERMINATING_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 354:22
Spell: GetProcessRunningInfosByUserId
包含日志: 是
代码:
int32_t AppMgrProxy::GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_USER_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    int result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 360:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 363:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 363:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 363:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 365:5
Spell: 
包含日志: 否
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_RUNNING_PROCESSES_BY_USER_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 369:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 370:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 377:22
Spell: GetProcessRunningInformation
包含日志: 是
代码:
int32_t AppMgrProxy::GetProcessRunningInformation(RunningProcessInfo &info)
{
    MessageParcel data;
    MessageParcel reply;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_PROCESS_RUNNING_INFORMATION, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    std::unique_ptr<RunningProcessInfo> infoReply(reply.ReadParcelable<RunningProcessInfo>());
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }
    info = *infoReply;
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 382:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 385:5
Spell: 
包含日志: 否
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_PROCESS_RUNNING_INFORMATION, data, reply)) {
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 389:5
Spell: 
包含日志: 是
代码:
    if (infoReply == nullptr) {
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 390:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "reply ReadParcelable is nullptr");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 397:22
Spell: NotifyMemoryLevel
包含日志: 否
代码:
int32_t AppMgrProxy::NotifyMemoryLevel(int32_t level)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, level);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_MEMORY_LEVEL, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 403:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 406:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, level);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 406:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, level);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 406:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, level);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 408:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_MEMORY_LEVEL, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 408:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_MEMORY_LEVEL, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 408:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_MEMORY_LEVEL, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 412:22
Spell: NotifyProcMemoryLevel
包含日志: 否
代码:
int32_t AppMgrProxy::NotifyProcMemoryLevel(const std::map<pid_t, MemoryLevel> &procLevelMap)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    MemoryLevelInfo memoryLevelInfo(procLevelMap);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &memoryLevelInfo);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_PROC_MEMORY_LEVEL, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 418:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 422:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &memoryLevelInfo);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 422:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &memoryLevelInfo);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 422:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &memoryLevelInfo);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 424:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_PROC_MEMORY_LEVEL, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 424:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_PROC_MEMORY_LEVEL, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 424:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::APP_NOTIFY_PROC_MEMORY_LEVEL, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 428:22
Spell: DumpHeapMemory
包含日志: 是
代码:
int32_t AppMgrProxy::DumpHeapMemory(const int32_t pid, OHOS::AppExecFwk::MallocInfo &mallocInfo)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpHeapMemory.");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageOption option(MessageOption::TF_SYNC);
    int32_t ret = SendRequest(AppMgrInterfaceCode::DUMP_HEAP_MEMORY_PROCESS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "AppMgrProxy SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    std::unique_ptr<MallocInfo> info(reply.ReadParcelable<MallocInfo>());
    if (info == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "MallocInfo ReadParcelable nullptr");
        return ERR_NULL_OBJECT;
    }
    mallocInfo = *info;
    return ret;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 430:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpHeapMemory.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 433:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 436:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 436:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 436:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 440:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "AppMgrProxy SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 441:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "AppMgrProxy SendRequest is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 446:5
Spell: 
包含日志: 是
代码:
    if (info == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "MallocInfo ReadParcelable nullptr");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 447:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "MallocInfo ReadParcelable nullptr");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 454:22
Spell: DumpJsHeapMemory
包含日志: 是
代码:
int32_t AppMgrProxy::DumpJsHeapMemory(OHOS::AppExecFwk::JsHeapDumpInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpJsHeapMemory.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &info);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::DUMP_JSHEAP_MEMORY_PROCESS, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 456:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AppMgrProxy::DumpJsHeapMemory.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 460:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 463:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &info);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 463:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &info);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 463:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &info);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 465:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::DUMP_JSHEAP_MEMORY_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 465:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::DUMP_JSHEAP_MEMORY_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 465:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::DUMP_JSHEAP_MEMORY_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 469:19
Spell: SendTransactCmd
包含日志: 是
代码:
bool AppMgrProxy::SendTransactCmd(AppMgrInterfaceCode code, MessageParcel &data, MessageParcel &reply)
{
    MessageOption option(MessageOption::TF_SYNC);
    int32_t result = SendRequest(code, data, reply, option);
    if (result != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "receive error transact code %{public}d in transact cmd %{public}d", result, code);
        return false;
    }
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 473:5
Spell: 
包含日志: 是
代码:
    if (result != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "receive error transact code %{public}d in transact cmd %{public}d", result, code);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 474:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "receive error transact code %{public}d in transact cmd %{public}d", result, code);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 480:19
Spell: AddAbilityStageDone
包含日志: 是
代码:
void AppMgrProxy::AddAbilityStageDone(const int32_t recordId)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::APP_ADD_ABILITY_STAGE_INFO_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
    return;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 484:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 485:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 489:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(recordId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 490:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 494:5
Spell: 
包含日志: 是
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_ADD_ABILITY_STAGE_INFO_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 495:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 501:19
Spell: StartupResidentProcess
包含日志: 是
代码:
void AppMgrProxy::StartupResidentProcess(const std::vector<AppExecFwk::BundleInfo> &bundleInfos)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(bundleInfos.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");
        return;
    }

    for (auto &bundleInfo : bundleInfos) {
        if (!data.WriteParcelable(&bundleInfo)) {
            TAG_LOGE(AAFwkTag::APPMGR, "write bundle info failed");
            return;
        }
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::STARTUP_RESIDENT_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
    return;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 505:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 506:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 510:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(bundleInfos.size())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 511:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 522:5
Spell: 
包含日志: 是
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::STARTUP_RESIDENT_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 523:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 533:5
Spell: 
包含日志: 是
代码:
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 534:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 537:5
Spell: 
包含日志: 是
代码:
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<T> info(reply.ReadParcelable<T>());
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed");
            return ERR_INVALID_VALUE;
        }
        parcelableInfos.emplace_back(*info);
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 539:9
Spell: 
包含日志: 是
代码:
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed");
            return ERR_INVALID_VALUE;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 540:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 545:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "get parcelable infos success");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 549:18
Spell: RegisterApplicationStateObserver
包含日志: 是
代码:
int AppMgrProxy::RegisterApplicationStateObserver(
    const sptr<IApplicationStateObserver> &observer, const std::vector<std::string> &bundleNameList)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterApplicationStateObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteStringVector(bundleNameList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "bundleNameList write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::REGISTER_APPLICATION_STATE_OBSERVER,
        data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 552:5
Spell: 
包含日志: 是
代码:
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 553:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 556:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterApplicationStateObserver start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 560:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 563:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 564:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 567:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteStringVector(bundleNameList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "bundleNameList write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 568:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "bundleNameList write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 574:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 575:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 581:18
Spell: UnregisterApplicationStateObserver
包含日志: 是
代码:
int AppMgrProxy::UnregisterApplicationStateObserver(
    const sptr<IApplicationStateObserver> &observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterApplicationStateObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APPLICATION_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 584:5
Spell: 
包含日志: 是
代码:
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 585:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 588:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterApplicationStateObserver start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 592:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 595:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 595:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 595:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 597:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APPLICATION_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 597:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APPLICATION_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 597:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APPLICATION_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 601:22
Spell: RegisterAbilityForegroundStateObserver
包含日志: 是
代码:
int32_t AppMgrProxy::RegisterAbilityForegroundStateObserver(const sptr<IAbilityForegroundStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());
    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 603:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 605:5
Spell: 
包含日志: 是
代码:
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 606:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 611:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 614:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 614:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 614:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 618:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 618:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 618:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 622:22
Spell: UnregisterAbilityForegroundStateObserver
包含日志: 是
代码:
int32_t AppMgrProxy::UnregisterAbilityForegroundStateObserver(const sptr<IAbilityForegroundStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());
    MessageParcel reply;
    MessageOption option;
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 624:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 625:5
Spell: 
包含日志: 是
代码:
    if (observer == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 626:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 631:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 634:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 634:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 634:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer->AsObject());

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 637:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 637:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 637:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_ABILITY_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 641:18
Spell: GetForegroundApplications
包含日志: 是
代码:
int AppMgrProxy::GetForegroundApplications(std::vector<AppStateData> &list)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_FOREGROUND_APPLICATIONS, data, reply, option);
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppStateData> info(reply.ReadParcelable<AppStateData>());
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        list.emplace_back(*info);
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 646:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 649:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_FOREGROUND_APPLICATIONS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 649:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_FOREGROUND_APPLICATIONS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 649:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_FOREGROUND_APPLICATIONS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 651:5
Spell: 
包含日志: 是
代码:
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 652:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 655:5
Spell: 
包含日志: 是
代码:
    for (int32_t i = 0; i < infoSize; i++) {
        std::unique_ptr<AppStateData> info(reply.ReadParcelable<AppStateData>());
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }
        list.emplace_back(*info);
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 657:9
Spell: 
包含日志: 是
代码:
        if (!info) {
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");
            return ERR_INVALID_VALUE;
        }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 658:13
Spell: 
包含日志: 是
代码:
            TAG_LOGE(AAFwkTag::APPMGR, "Read Parcelable infos failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 666:18
Spell: StartUserTestProcess
包含日志: 否
代码:
int AppMgrProxy::StartUserTestProcess(
    const AAFwk::Want &want, const sptr<IRemoteObject> &observer, const BundleInfo &bundleInfo, int32_t userId)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &bundleInfo);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_USER_TEST_PROCESS, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 673:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 676:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 676:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 676:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 677:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 677:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 677:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, RemoteObject, observer);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 678:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &bundleInfo);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 678:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &bundleInfo);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 678:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &bundleInfo);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 679:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 679:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 679:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 681:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_USER_TEST_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 681:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_USER_TEST_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 681:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_USER_TEST_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 685:18
Spell: FinishUserTest
包含日志: 否
代码:
int AppMgrProxy::FinishUserTest(const std::string &msg, const int64_t &resultCode, const std::string &bundleName)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_WRITE_RET_INT(data, String, msg);
    PARCEL_UTIL_WRITE_RET_INT(data, Int64, resultCode);
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::FINISH_USER_TEST, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 691:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 695:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, msg);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 695:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, msg);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 695:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, msg);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 696:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int64, resultCode);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 696:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int64, resultCode);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 696:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int64, resultCode);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 697:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 697:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 697:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 699:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::FINISH_USER_TEST, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 699:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::FINISH_USER_TEST, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 699:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::FINISH_USER_TEST, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 703:19
Spell: ScheduleAcceptWantDone
包含日志: 是
代码:
void AppMgrProxy::ScheduleAcceptWantDone(const int32_t recordId, const AAFwk::Want &want, const std::string &flag)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_ACCEPT_WANT_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 707:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 708:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 712:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 713:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 717:5
Spell: 
包含日志: 是
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_ACCEPT_WANT_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 718:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 723:19
Spell: ScheduleNewProcessRequestDone
包含日志: 是
代码:
void AppMgrProxy::ScheduleNewProcessRequestDone(const int32_t recordId, const AAFwk::Want &want,
    const std::string &flag)
{
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_NEW_PROCESS_REQUEST_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 728:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 729:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 733:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(recordId) || !data.WriteParcelable(&want) || !data.WriteString(flag)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 734:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 738:5
Spell: 
包含日志: 是
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::SCHEDULE_NEW_PROCESS_REQUEST_DONE, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 739:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 744:18
Spell: GetAbilityRecordsByProcessID
包含日志: 是
代码:
int AppMgrProxy::GetAbilityRecordsByProcessID(const int pid, std::vector<sptr<IRemoteObject>> &tokens)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    data.WriteInt32(pid);
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ABILITY_RECORDS_BY_PROCESS_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        auto iRemote = reply.ReadRemoteObject();
        tokens.emplace_back(iRemote);
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 750:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 754:5
Spell: 
包含日志: 否
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::APP_GET_ABILITY_RECORDS_BY_PROCESS_ID, data, reply)) {
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 758:5
Spell: 
包含日志: 是
代码:
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 759:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 762:5
Spell: 
包含日志: 否
代码:
    for (int32_t i = 0; i < infoSize; i++) {
        auto iRemote = reply.ReadRemoteObject();
        tokens.emplace_back(iRemote);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 769:18
Spell: PreStartNWebSpawnProcess
包含日志: 是
代码:
int AppMgrProxy::PreStartNWebSpawnProcess()
{
    TAG_LOGI(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRE_START_NWEBSPAWN_PROCESS, data, reply, option);
    auto result = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess failed, result: %{public}d", result);
    }
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 771:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 775:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 776:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 780:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRE_START_NWEBSPAWN_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 780:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRE_START_NWEBSPAWN_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 780:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::PRE_START_NWEBSPAWN_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 782:5
Spell: 
包含日志: 是
代码:
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess failed, result: %{public}d", result);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 783:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "PreStartNWebSpawnProcess failed, result: %{public}d", result);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 788:18
Spell: StartRenderProcess
包含日志: 是
代码:
int AppMgrProxy::StartRenderProcess(const std::string &renderParam,
                                    int32_t ipcFd, int32_t sharedFd,
                                    int32_t crashFd, pid_t &renderPid, bool isGPU)
{
    if (renderParam.empty() || ipcFd <= 0 || sharedFd <= 0 || crashFd <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, renderParam:%{private}s, ipcFd:%{public}d, "
            "sharedFd:%{public}d, crashFd:%{public}d", renderParam.c_str(), ipcFd, sharedFd, crashFd);
        return -1;
    }

    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteString(renderParam)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want paramSize failed.");
        return -1;
    }

    if (!data.WriteFileDescriptor(ipcFd) || !data.WriteFileDescriptor(sharedFd) ||
        !data.WriteFileDescriptor(crashFd)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want fd failed, ipcFd:%{public}d, sharedFd:%{public}d, "
            "crashFd:%{public}d", ipcFd, sharedFd, crashFd);
        return -1;
    }

    if (!data.WriteBool(isGPU)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want processType failed.");
        return -1;
    }

    int32_t ret = SendRequest(AppMgrInterfaceCode::START_RENDER_PROCESS, data,
        reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    auto result = reply.ReadInt32();
    renderPid = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess failed, result: %{public}d", result);
    }
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 792:5
Spell: 
包含日志: 是
代码:
    if (renderParam.empty() || ipcFd <= 0 || sharedFd <= 0 || crashFd <= 0) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, renderParam:%{private}s, ipcFd:%{public}d, "
            "sharedFd:%{public}d, crashFd:%{public}d", renderParam.c_str(), ipcFd, sharedFd, crashFd);
        return -1;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 793:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid params, renderParam:%{private}s, ipcFd:%{public}d, "
            "sharedFd:%{public}d, crashFd:%{public}d", renderParam.c_str(), ipcFd, sharedFd, crashFd);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 801:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 802:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 806:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(renderParam)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want paramSize failed.");
        return -1;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 807:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want paramSize failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 811:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteFileDescriptor(ipcFd) || !data.WriteFileDescriptor(sharedFd) ||
        !data.WriteFileDescriptor(crashFd)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want fd failed, ipcFd:%{public}d, sharedFd:%{public}d, "
            "crashFd:%{public}d", ipcFd, sharedFd, crashFd);
        return -1;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 813:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want fd failed, ipcFd:%{public}d, sharedFd:%{public}d, "
            "crashFd:%{public}d", ipcFd, sharedFd, crashFd);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 818:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteBool(isGPU)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want processType failed.");
        return -1;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 819:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want processType failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 825:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 826:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess SendRequest is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 832:5
Spell: 
包含日志: 是
代码:
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess failed, result: %{public}d", result);
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 833:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "StartRenderProcess failed, result: %{public}d", result);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 838:19
Spell: AttachRenderProcess
包含日志: 是
代码:
void AppMgrProxy::AttachRenderProcess(const sptr<IRemoteObject> &renderScheduler)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    if (!renderScheduler) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler is null");
        return;
    }

    TAG_LOGD(AAFwkTag::APPMGR, "AttachRenderProcess start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return;
    }
    if (!data.WriteRemoteObject(renderScheduler)) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::ATTACH_RENDER_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd ATTACH_RENDER_PROCESS failed");
        return;
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 841:5
Spell: 
包含日志: 是
代码:
    if (!renderScheduler) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler is null");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 842:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler is null");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 846:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "AttachRenderProcess start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 850:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 853:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(renderScheduler)) {
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler write failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 854:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "renderScheduler write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 858:5
Spell: 
包含日志: 是
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::ATTACH_RENDER_PROCESS, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd ATTACH_RENDER_PROCESS failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 859:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd ATTACH_RENDER_PROCESS failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 864:19
Spell: SaveBrowserChannel
包含日志: 是
代码:
void AppMgrProxy::SaveBrowserChannel(sptr<IRemoteObject> browser)
{
    if (!browser) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser is null");
        return;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

    if (!data.WriteRemoteObject(browser)) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser write failed.");
        return;
    }

    if (!SendTransactCmd(AppMgrInterfaceCode::SAVE_BROWSER_CHANNEL, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd SAVE_BROWSER_CHANNEL failed");
        return;
    }
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 866:5
Spell: 
包含日志: 是
代码:
    if (!browser) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser is null");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 867:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "browser is null");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 873:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 874:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 878:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(browser)) {
        TAG_LOGE(AAFwkTag::APPMGR, "browser write failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 879:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "browser write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 883:5
Spell: 
包含日志: 是
代码:
    if (!SendTransactCmd(AppMgrInterfaceCode::SAVE_BROWSER_CHANNEL, data, reply)) {
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd SAVE_BROWSER_CHANNEL failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 884:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "SendTransactCmd SAVE_BROWSER_CHANNEL failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 889:18
Spell: GetRenderProcessTerminationStatus
包含日志: 是
代码:
int AppMgrProxy::GetRenderProcessTerminationStatus(pid_t renderPid, int &status)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(renderPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write renderPid failed.");
        return -1;
    }

    int32_t ret = SendRequest(AppMgrInterfaceCode::GET_RENDER_PROCESS_TERMINATION_STATUS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus SendRequest is failed, error code: %{public}d",
            ret);
        return ret;
    }

    auto result = reply.ReadInt32();
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus failed, result: %{public}d", result);
        return result;
    }
    status = reply.ReadInt32();
    return 0;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 894:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 895:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 899:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(renderPid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write renderPid failed.");
        return -1;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 900:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write renderPid failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 905:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus SendRequest is failed, error code: %{public}d",
            ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 906:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus SendRequest is failed, error code: %{public}d",
            ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 912:5
Spell: 
包含日志: 是
代码:
    if (result != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus failed, result: %{public}d", result);
        return result;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 913:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "GetRenderProcessTerminationStatus failed, result: %{public}d", result);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 920:22
Spell: UpdateConfiguration
包含日志: 是
代码:
int32_t AppMgrProxy::UpdateConfiguration(const Configuration &config, const int32_t userId)
{
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfiguration");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");
        return ERR_INVALID_DATA;
    }
    int32_t ret = SendRequest(AppMgrInterfaceCode::UPDATE_CONFIGURATION, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 922:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfiguration");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 926:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 929:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 930:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 933:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 934:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel userId failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 938:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 939:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 945:22
Spell: UpdateConfigurationByBundleName
包含日志: 是
代码:
int32_t AppMgrProxy::UpdateConfigurationByBundleName(const Configuration &config, const std::string &name,
    int32_t appIndex)
{
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfigurationByBundleName");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteString(name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel name failed");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_INVALID_DATA;
    }
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    int32_t ret = SendRequest(AppMgrInterfaceCode::UPDATE_CONFIGURATION_BY_BUNDLE_NAME, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 948:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "AppMgrProxy UpdateConfigurationByBundleName");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 950:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 953:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&config)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 954:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel config failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 957:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(name)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel name failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 958:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel name failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 961:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(appIndex)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 962:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel appIndex failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 968:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 969:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 975:22
Spell: GetConfiguration
包含日志: 是
代码:
int32_t AppMgrProxy::GetConfiguration(Configuration& config)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel data failed");
        return ERR_INVALID_DATA;
    }
    int32_t ret = SendRequest(AppMgrInterfaceCode::GET_CONFIGURATION, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

    std::unique_ptr<Configuration> info(reply.ReadParcelable<Configuration>());
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "read configuration failed.");
        return ERR_UNKNOWN_OBJECT;
    }
    config = *info;
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 980:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel data failed");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 981:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel data failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 985:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 986:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 991:5
Spell: 
包含日志: 是
代码:
    if (!info) {
        TAG_LOGE(AAFwkTag::APPMGR, "read configuration failed.");
        return ERR_UNKNOWN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 992:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "read configuration failed.");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 999:22
Spell: RegisterConfigurationObserver
包含日志: 是
代码:
int32_t AppMgrProxy::RegisterConfigurationObserver(const sptr<IConfigurationObserver>& observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterConfigurationObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::REGISTER_CONFIGURATION_OBSERVER, data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1001:5
Spell: 
包含日志: 是
代码:
    if (!observer) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1002:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "observer null");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1005:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "RegisterConfigurationObserver start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1009:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1013:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1014:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1019:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1020:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1026:22
Spell: UnregisterConfigurationObserver
包含日志: 是
代码:
int32_t AppMgrProxy::UnregisterConfigurationObserver(const sptr<IConfigurationObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterConfigurationObserver start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    auto error = SendRequest(AppMgrInterfaceCode::UNREGISTER_CONFIGURATION_OBSERVER,
        data, reply, option);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1028:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "UnregisterConfigurationObserver start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1032:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1036:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1037:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "observer write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1043:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1044:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1050:19
Spell: GetAppRunningStateByBundleName
包含日志: 是
代码:
bool AppMgrProxy::GetAppRunningStateByBundleName(const std::string &bundleName)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::GET_APP_RUNNING_STATE,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }

    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1053:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1055:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1056:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1060:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1061:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1069:5
Spell: 
包含日志: 是
代码:
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1070:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1077:22
Spell: NotifyLoadRepairPatch
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyLoadRepairPatch(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::NOTIFY_LOAD_REPAIR_PATCH,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1080:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1082:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1083:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1087:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1088:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Write bundle name failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1092:5
Spell: 
包含日志: 是
代码:
    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1093:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1101:5
Spell: 
包含日志: 是
代码:
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Send request failed with error code %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1102:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "NotifyLoadRepairPatch, Send request failed with error code %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1109:22
Spell: NotifyHotReloadPage
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyHotReloadPage(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::NOTIFY_HOT_RELOAD_PAGE,
        data, reply, option);
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1112:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1114:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1115:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1119:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1120:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1124:5
Spell: 
包含日志: 是
代码:
    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1125:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1133:5
Spell: 
包含日志: 是
代码:
    if (ret != 0) {
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1134:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1175:22
Spell: NotifyUnLoadRepairPatch
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyUnLoadRepairPatch(const std::string &bundleName, const sptr<IQuickFixCallback> &callback)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_UNLOAD_REPAIR_PATCH, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1178:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1180:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1181:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1185:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write bundle name failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1186:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Notify unload patch, Write bundle name failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1190:5
Spell: 
包含日志: 是
代码:
    if (callback == nullptr || !data.WriteRemoteObject(callback->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1191:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write callback failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1198:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_UNLOAD_REPAIR_PATCH, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1198:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_UNLOAD_REPAIR_PATCH, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1198:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_UNLOAD_REPAIR_PATCH, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1202:19
Spell: IsSharedBundleRunning
包含日志: 是
代码:
bool AppMgrProxy::IsSharedBundleRunning(const std::string &bundleName, uint32_t versionCode)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteString(bundleName) || !data.WriteUint32(versionCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name or version code failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::IS_SHARED_BUNDLE_RUNNING,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return false;
    }

    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1205:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1207:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1208:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1211:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(bundleName) || !data.WriteUint32(versionCode)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name or version code failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1212:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write bundle name or version code failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1220:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1221:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1228:22
Spell: StartNativeProcessForDebugger
包含日志: 是
代码:
int32_t AppMgrProxy::StartNativeProcessForDebugger(const AAFwk::Want &want)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_PROCESS_FOR_DEBUGGER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1231:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1232:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1235:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&want)) {
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1236:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want write failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1243:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_PROCESS_FOR_DEBUGGER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1243:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_PROCESS_FOR_DEBUGGER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1243:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::START_NATIVE_PROCESS_FOR_DEBUGGER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1247:22
Spell: GetBundleNameByPid
包含日志: 是
代码:
int32_t AppMgrProxy::GetBundleNameByPid(const int pid, std::string &bundleName, int32_t &uid)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid write failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_BUNDLE_NAME_BY_PID, data, reply, option);
    bundleName = reply.ReadString();
    uid = reply.ReadInt32();
    return ERR_NONE;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1253:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1254:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1258:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "pid write failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1259:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "pid write failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1263:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_BUNDLE_NAME_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1263:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_BUNDLE_NAME_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1263:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_BUNDLE_NAME_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1269:22
Spell: GetRunningProcessInfoByPid
包含日志: 是
代码:
int32_t AppMgrProxy::GetRunningProcessInfoByPid(const pid_t pid, OHOS::AppExecFwk::RunningProcessInfo &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(static_cast<int32_t>(pid))) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_PROCESS_INFO_BY_PID, data, reply, option);

    std::unique_ptr<AppExecFwk::RunningProcessInfo> processInfo(reply.ReadParcelable<AppExecFwk::RunningProcessInfo>());
    if (processInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info failded");
        return ERR_INVALID_DATA;
    }
    info = *processInfo;
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1271:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1275:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1279:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(static_cast<int32_t>(pid))) {
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1280:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "parcel WriteInt32 failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1284:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_PROCESS_INFO_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1284:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_PROCESS_INFO_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1284:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_RUNNING_PROCESS_INFO_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1287:5
Spell: 
包含日志: 是
代码:
    if (processInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info failded");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1288:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "recv process info failded");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1295:22
Spell: NotifyAppFault
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyAppFault(const FaultData &faultData)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultData error.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1297:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1300:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1301:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1305:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultData error.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1306:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultData error.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1313:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1313:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1313:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1317:22
Spell: NotifyAppFaultBySA
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyAppFaultBySA(const AppFaultDataBySA &faultData)
{
    TAG_LOGI(AAFwkTag::APPMGR, "called");
    MessageParcel data;

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultDataBySA error.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT_BY_SA, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1319:5
Spell: 
包含日志: 是
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1322:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1323:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1327:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&faultData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultDataBySA error.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1328:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write FaultDataBySA error.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1335:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT_BY_SA, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1335:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT_BY_SA, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1335:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_APP_FAULT_BY_SA, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1339:19
Spell: SetAppFreezeFilter
包含日志: 是
代码:
bool AppMgrProxy::SetAppFreezeFilter(int32_t pid)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return false;
    }
    auto ret = SendRequest(AppMgrInterfaceCode::SET_APPFREEZE_FILTER,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }
    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1341:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1345:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1346:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1349:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1350:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1355:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1356:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1362:22
Spell: GetProcessMemoryByPid
包含日志: 是
代码:
int32_t AppMgrProxy::GetProcessMemoryByPid(const int32_t pid, int32_t &memorySize)
{
    TAG_LOGD(AAFwkTag::APPMGR, "GetProcessMemoryByPid start");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_PROCESS_MEMORY_BY_PID, data, reply, option);
    memorySize = reply.ReadInt32();
    auto result = reply.ReadInt32();
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1364:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "GetProcessMemoryByPid start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1368:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1369:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1373:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1374:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1378:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_PROCESS_MEMORY_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1378:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_PROCESS_MEMORY_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1378:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_PROCESS_MEMORY_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1384:22
Spell: GetRunningProcessInformation
包含日志: 是
代码:
int32_t AppMgrProxy::GetRunningProcessInformation(
    const std::string &bundleName, int32_t userId, std::vector<RunningProcessInfo> &info)
{
    TAG_LOGD(AAFwkTag::APPMGR, "GetRunningProcessInformation start");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_DATA;
    }

    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write userId failed.");
        return ERR_INVALID_DATA;
    }

    MessageOption option(MessageOption::TF_SYNC);
    auto ret = SendRequest(AppMgrInterfaceCode::GET_PIDS_BY_BUNDLENAME,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    auto error = GetParcelableInfos<RunningProcessInfo>(reply, info);
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1387:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "GetRunningProcessInformation start");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1390:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1391:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1395:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1396:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1400:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(userId)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write userId failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1401:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write userId failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1408:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1409:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1414:5
Spell: 
包含日志: 是
代码:
    if (error != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);
        return error;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1415:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "GetParcelableInfos fail, error: %{public}d", error);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1421:22
Spell: ChangeAppGcState
包含日志: 是
代码:
int32_t AppMgrProxy::ChangeAppGcState(pid_t pid, int32_t state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    MessageOption option(MessageOption::TF_ASYNC);
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid write failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State write failed.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHANGE_APP_GC_STATE, data, reply, option);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1423:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1426:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1427:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1431:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Pid write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1432:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Pid write failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1435:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(state)) {
        TAG_LOGE(AAFwkTag::APPMGR, "State write failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1436:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "State write failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1440:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHANGE_APP_GC_STATE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1440:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHANGE_APP_GC_STATE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1440:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHANGE_APP_GC_STATE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1444:22
Spell: NotifyPageShow
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyPageShow(const sptr<IRemoteObject> &token, const PageStateData &pageStateData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "call");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_SHOW, data, reply, option);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1446:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "call");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1451:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1452:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1455:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1456:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1459:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1460:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1464:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_SHOW, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1464:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_SHOW, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1464:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_SHOW, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1468:22
Spell: NotifyPageHide
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyPageHide(const sptr<IRemoteObject> &token, const PageStateData &pageStateData)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_HIDE, data, reply, option);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1470:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1475:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1476:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1479:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(token)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1480:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Failed to write token");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1483:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteParcelable(&pageStateData)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1484:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write PageStateData error.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1488:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_HIDE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1488:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_HIDE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1488:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PAGE_HIDE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1492:22
Spell: SendRequest
包含日志: 是
代码:
int32_t AppMgrProxy::SendRequest(AppMgrInterfaceCode code, MessageParcel &data, MessageParcel &reply,
    MessageOption& option)
{
    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_NULL_OBJECT;
    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1496:5
Spell: 
包含日志: 是
代码:
    if (remote == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");
        return ERR_NULL_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1497:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1504:22
Spell: RegisterAppRunningStatusListener
包含日志: 是
代码:
int32_t AppMgrProxy::RegisterAppRunningStatusListener(const sptr<IRemoteObject> &listener)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1507:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1508:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1511:5
Spell: 
包含日志: 是
代码:
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1512:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1519:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1519:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1519:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1523:22
Spell: UnregisterAppRunningStatusListener
包含日志: 是
代码:
int32_t AppMgrProxy::UnregisterAppRunningStatusListener(const sptr<IRemoteObject> &listener)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1526:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1527:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1530:5
Spell: 
包含日志: 是
代码:
    if (listener == nullptr || !data.WriteRemoteObject(listener)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1531:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write listener failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1538:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1538:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1538:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_RUNNING_STATUS_LISTENER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1542:22
Spell: RegisterAppForegroundStateObserver
包含日志: 是
代码:
int32_t AppMgrProxy::RegisterAppForegroundStateObserver(const sptr<IAppForegroundStateObserver> &observer)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }
    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1545:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1548:5
Spell: 
包含日志: 是
代码:
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1549:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1555:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1555:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1555:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1559:22
Spell: UnregisterAppForegroundStateObserver
包含日志: 是
代码:
int32_t AppMgrProxy::UnregisterAppForegroundStateObserver(const sptr<IAppForegroundStateObserver> &observer)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1562:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1565:5
Spell: 
包含日志: 是
代码:
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1566:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1573:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1573:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1573:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_APP_FOREGROUND_STATE_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1577:22
Spell: IsApplicationRunning
包含日志: 是
代码:
int32_t AppMgrProxy::IsApplicationRunning(const std::string &bundleName, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    isRunning = false;
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APPLICATION_RUNNING, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1580:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1585:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1586:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1589:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1589:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1589:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1591:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APPLICATION_RUNNING, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1591:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APPLICATION_RUNNING, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1591:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APPLICATION_RUNNING, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1596:22
Spell: IsAppRunning
包含日志: 是
代码:
int32_t AppMgrProxy::IsAppRunning(const std::string &bundleName, int32_t appCloneIndex, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1599:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1601:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1602:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1605:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1605:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1605:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1606:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1606:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1606:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, appCloneIndex);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1611:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1611:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1611:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1616:22
Spell: IsAppRunningByBundleNameAndUserId
包含日志: 是
代码:
int32_t AppMgrProxy::IsAppRunningByBundleNameAndUserId(const std::string &bundleName, int32_t userId, bool &isRunning)
{
    HITRACE_METER_NAME(HITRACE_TAG_ABILITY_MANAGER, __PRETTY_FUNCTION__);
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING_BY_BUNDLE_NAME_AND_USER_ID, data, reply, option);
    isRunning = reply.ReadBool();
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1619:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1621:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1622:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1625:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1625:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1625:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, bundleName);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1626:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1626:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1626:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, userId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1631:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING_BY_BUNDLE_NAME_AND_USER_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1631:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING_BY_BUNDLE_NAME_AND_USER_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1631:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::IS_APP_RUNNING_BY_BUNDLE_NAME_AND_USER_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1719:19
Spell: IsFinalAppProcess
包含日志: 是
代码:
bool AppMgrProxy::IsFinalAppProcess()
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

    MessageParcel reply;
    MessageOption option;
    auto ret = SendRequest(AppMgrInterfaceCode::IS_FINAL_APP_PROCESS,
        data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request is failed, error code: %{public}d", ret);
        return false;
    }

    return reply.ReadBool();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1721:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1723:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1724:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1732:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request is failed, error code: %{public}d", ret);
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1733:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1740:22
Spell: RegisterRenderStateObserver
包含日志: 是
代码:
int32_t AppMgrProxy::RegisterRenderStateObserver(const sptr<IRenderStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_RENDER_STATUS_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1742:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1744:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1745:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1748:5
Spell: 
包含日志: 是
代码:
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1749:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1756:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_RENDER_STATUS_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1756:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_RENDER_STATUS_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1756:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_RENDER_STATUS_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1760:22
Spell: UnregisterRenderStateObserver
包含日志: 是
代码:
int32_t AppMgrProxy::UnregisterRenderStateObserver(const sptr<IRenderStateObserver> &observer)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_RENDER_STATUS_OBSERVER, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1762:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1764:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1765:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1768:5
Spell: 
包含日志: 是
代码:
    if (observer == nullptr || !data.WriteRemoteObject(observer->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1769:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Observer is null or Write Remote failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1776:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_RENDER_STATUS_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1776:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_RENDER_STATUS_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1776:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UNREGISTER_RENDER_STATUS_OBSERVER, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1780:22
Spell: UpdateRenderState
包含日志: 是
代码:
int32_t AppMgrProxy::UpdateRenderState(pid_t renderPid, int32_t state)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, renderPid);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, state);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_RENDER_STATUS, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1782:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1784:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1785:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1788:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, renderPid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1788:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, renderPid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1788:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, renderPid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1789:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, state);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1789:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, state);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1789:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, state);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1794:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_RENDER_STATUS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1794:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_RENDER_STATUS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1794:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_RENDER_STATUS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1798:22
Spell: SignRestartAppFlag
包含日志: 是
代码:
int32_t AppMgrProxy::SignRestartAppFlag(int32_t uid, const std::string &instanceKey)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, uid);
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SIGN_RESTART_APP_FLAG, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1800:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1804:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1805:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1808:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, uid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1808:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, uid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1808:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, uid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1809:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1809:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1809:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1811:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SIGN_RESTART_APP_FLAG, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1811:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SIGN_RESTART_APP_FLAG, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1811:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SIGN_RESTART_APP_FLAG, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1815:22
Spell: GetAppRunningUniqueIdByPid
包含日志: 是
代码:
int32_t AppMgrProxy::GetAppRunningUniqueIdByPid(pid_t pid, std::string &appRunningUniqueId)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_APP_RUNNING_UNIQUE_ID_BY_PID, data, reply, option);
    auto result = reply.ReadInt32();
    if (result == ERR_OK) {
        appRunningUniqueId = reply.ReadString();
        TAG_LOGD(AAFwkTag::APPMGR, "appRunningUniqueId = %{public}s", appRunningUniqueId.c_str());
    }
    return result;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1817:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1821:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1822:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1825:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1825:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1825:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1827:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_APP_RUNNING_UNIQUE_ID_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1827:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_APP_RUNNING_UNIQUE_ID_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1827:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_APP_RUNNING_UNIQUE_ID_BY_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1829:5
Spell: 
包含日志: 是
代码:
    if (result == ERR_OK) {
        appRunningUniqueId = reply.ReadString();
        TAG_LOGD(AAFwkTag::APPMGR, "appRunningUniqueId = %{public}s", appRunningUniqueId.c_str());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1831:9
Spell: 
包含日志: 是
代码:
        TAG_LOGD(AAFwkTag::APPMGR, "appRunningUniqueId = %{public}s", appRunningUniqueId.c_str());

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1836:22
Spell: GetAllUIExtensionRootHostPid
包含日志: 是
代码:
int32_t AppMgrProxy::GetAllUIExtensionRootHostPid(pid_t pid, std::vector<pid_t> &hostPids)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }

    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_ROOT_HOST_PID, data, reply, option);

    int32_t size = reply.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        hostPids.emplace_back(temp);
    }

    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1839:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1840:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1844:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1844:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1844:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1849:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_ROOT_HOST_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1849:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_ROOT_HOST_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1849:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_ROOT_HOST_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1852:5
Spell: 
包含日志: 是
代码:
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1853:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 1857:5
Spell: 
包含日志: 否
代码:
    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        hostPids.emplace_back(temp);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1865:22
Spell: GetAllUIExtensionProviderPid
包含日志: 是
代码:
int32_t AppMgrProxy::GetAllUIExtensionProviderPid(pid_t hostPid, std::vector<pid_t> &providerPids)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, hostPid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_PROVIDER_PID, data, reply, option);

    int32_t size = reply.ReadInt32();
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        providerPids.emplace_back(temp);
    }

    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1868:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1869:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write remote object failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1872:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, hostPid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1872:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, hostPid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1872:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, hostPid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1877:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_PROVIDER_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1877:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_PROVIDER_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1877:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::GET_ALL_UI_EXTENSION_PROVIDER_PID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1880:5
Spell: 
包含日志: 是
代码:
    if (size > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1881:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Vector is too large.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 1885:5
Spell: 
包含日志: 否
代码:
    for (int32_t i = 0; i < size; i++) {
        pid_t temp = reply.ReadInt32();
        providerPids.emplace_back(temp);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1893:22
Spell: NotifyMemorySizeStateChanged
包含日志: 否
代码:
int32_t AppMgrProxy::NotifyMemorySizeStateChanged(bool isMemorySizeSufficient)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isMemorySizeSufficient);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_MEMORY_SIZE_STATE_CHANGED, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1896:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1899:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isMemorySizeSufficient);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1899:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isMemorySizeSufficient);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1899:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isMemorySizeSufficient);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1904:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_MEMORY_SIZE_STATE_CHANGED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1904:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_MEMORY_SIZE_STATE_CHANGED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1904:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_MEMORY_SIZE_STATE_CHANGED, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1908:22
Spell: SetSupportedProcessCacheSelf
包含日志: 是
代码:
int32_t AppMgrProxy::SetSupportedProcessCacheSelf(bool isSupport)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE_SELF, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1910:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1912:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1913:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1916:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1916:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1916:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1921:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1921:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1921:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1925:22
Spell: SetSupportedProcessCache
包含日志: 是
代码:
int32_t AppMgrProxy::SetSupportedProcessCache(int32_t pid, bool isSupport)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

    MessageParcel reply;
    MessageOption option;

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1927:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1929:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_DATA;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1930:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1933:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1933:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1933:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, isSupport);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1934:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1934:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1934:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1939:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1939:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1939:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::SET_SUPPORTED_PROCESS_CACHE, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1943:19
Spell: SetAppAssertionPauseState
包含日志: 是
代码:
void AppMgrProxy::SetAppAssertionPauseState(bool flag)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Bool, flag);

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::SET_APP_ASSERT_PAUSE_STATE_SELF, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1945:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1949:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1950:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1953:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Bool, flag);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1953:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Bool, flag);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1953:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Bool, flag);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1955:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::SET_APP_ASSERT_PAUSE_STATE_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1955:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::SET_APP_ASSERT_PAUSE_STATE_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1955:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::SET_APP_ASSERT_PAUSE_STATE_SELF, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 1984:22
Spell: CheckCallingIsUserTestMode
包含日志: 是
代码:
int32_t AppMgrProxy::CheckCallingIsUserTestMode(const pid_t pid, bool &isUserTest)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);
    int32_t ret = SendRequest(AppMgrInterfaceCode::CHECK_CALLING_IS_USER_TEST_MODE, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        isUserTest = false;
        return ret;
    }
    isUserTest = reply.ReadBool();
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1989:5
Spell: 
包含日志: 否
代码:
    if (!WriteInterfaceToken(data)) {
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1992:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1992:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1992:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Int32, pid);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 1994:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);
        isUserTest = false;
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 1995:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2003:22
Spell: NotifyProcessDependedOnWeb
包含日志: 是
代码:
int32_t AppMgrProxy::NotifyProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PROCESS_DEPENDED_ON_WEB, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2008:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2009:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2013:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2013:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2013:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::NOTIFY_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2017:19
Spell: KillProcessDependedOnWeb
包含日志: 是
代码:
void AppMgrProxy::KillProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::KILL_PROCESS_DEPENDED_ON_WEB, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2022:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2023:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2027:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::KILL_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2027:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::KILL_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2027:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::KILL_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2030:19
Spell: RestartResidentProcessDependedOnWeb
包含日志: 是
代码:
void AppMgrProxy::RestartResidentProcessDependedOnWeb()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_ASYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::RESTART_RESIDENT_PROCESS_DEPENDED_ON_WEB, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2035:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2036:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2040:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::RESTART_RESIDENT_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2040:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::RESTART_RESIDENT_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2040:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::RESTART_RESIDENT_PROCESS_DEPENDED_ON_WEB, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2043:22
Spell: GetSupportedProcessCachePids
包含日志: 是
代码:
int32_t AppMgrProxy::GetSupportedProcessCachePids(const std::string &bundleName,
    std::vector<int32_t> &pidList)
{
    TAG_LOGD(AAFwkTag::APPMGR, "Called.");
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_VALUE;
    }
    auto ret = SendRequest(AppMgrInterfaceCode::GET_SUPPORTED_PROCESS_CACHE_PIDS, data, reply, option);
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

    pidList.clear();
    int32_t infoSize = reply.ReadInt32();
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }
    for (int32_t i = 0; i < infoSize; i++) {
        pidList.push_back(reply.ReadInt32());
    }
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2046:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "Called.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2050:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2051:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2054:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteString(bundleName)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2055:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write bundleName failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2059:5
Spell: 
包含日志: 是
代码:
    if (ret != NO_ERROR) {
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2060:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code %{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2066:5
Spell: 
包含日志: 是
代码:
    if (infoSize > CYCLE_LIMIT) {
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2067:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

--------------------------------------------------------------------------------
代码块类型: Loop Block (for)
位置: 2070:5
Spell: 
包含日志: 否
代码:
    for (int32_t i = 0; i < infoSize; i++) {
        pidList.push_back(reply.ReadInt32());
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2076:22
Spell: RegisterKiaInterceptor
包含日志: 是
代码:
int32_t AppMgrProxy::RegisterKiaInterceptor(const sptr<IKiaInterceptor> &interceptor)
{
    if (interceptor == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "interceptor is nullptr.");
        return ERR_INVALID_VALUE;
    }
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteRemoteObject(interceptor->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interceptor failed.");
        return ERR_INVALID_VALUE;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_KIA_INTERCEPTOR, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2078:5
Spell: 
包含日志: 是
代码:
    if (interceptor == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "interceptor is nullptr.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2079:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "interceptor is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2085:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2086:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2090:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteRemoteObject(interceptor->AsObject())) {
        TAG_LOGE(AAFwkTag::APPMGR, "write interceptor failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2091:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write interceptor failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2095:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_KIA_INTERCEPTOR, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2095:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_KIA_INTERCEPTOR, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2095:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::REGISTER_KIA_INTERCEPTOR, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2099:22
Spell: CheckIsKiaProcess
包含日志: 是
代码:
int32_t AppMgrProxy::CheckIsKiaProcess(pid_t pid, bool &isKia)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_VALUE;
    }

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHECK_IS_KIA_PROCESS, data, reply, option);
    int32_t ret = reply.ReadInt32();
    if (ret != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed,ret=%{public}d.", ret);
        return ret;
    }
    isKia = reply.ReadBool();
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2104:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2105:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2109:5
Spell: 
包含日志: 是
代码:
    if (!data.WriteInt32(pid)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2110:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2114:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHECK_IS_KIA_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2114:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHECK_IS_KIA_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2114:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::CHECK_IS_KIA_PROCESS, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2116:5
Spell: 
包含日志: 是
代码:
    if (ret != ERR_OK) {
        TAG_LOGE(AAFwkTag::APPMGR, "failed,ret=%{public}d.", ret);
        return ret;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2117:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "failed,ret=%{public}d.", ret);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2124:22
Spell: KillAppSelfWithInstanceKey
包含日志: 是
代码:
int32_t AppMgrProxy::KillAppSelfWithInstanceKey(const std::string &instanceKey, bool clearPageStack,
    const std::string& reason)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, clearPageStack);
    PARCEL_UTIL_WRITE_RET_INT(data, String, reason);

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::KILL_APP_SELF_WITH_INSTANCE_KEY, data, reply, option);
    return reply.ReadInt32();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2128:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2129:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2132:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2132:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2132:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2133:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, clearPageStack);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2133:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, clearPageStack);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2133:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Bool, clearPageStack);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2134:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, reason);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2134:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, reason);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2134:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, String, reason);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2138:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::KILL_APP_SELF_WITH_INSTANCE_KEY, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2138:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::KILL_APP_SELF_WITH_INSTANCE_KEY, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2138:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::KILL_APP_SELF_WITH_INSTANCE_KEY, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2142:19
Spell: UpdateInstanceKeyBySpecifiedId
包含日志: 是
代码:
void AppMgrProxy::UpdateInstanceKeyBySpecifiedId(int32_t specifiedId, std::string &instanceKey)
{
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }
    PARCEL_UTIL_WRITE_NORET(data, Int32, specifiedId);
    PARCEL_UTIL_WRITE_NORET(data, String, instanceKey);

    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2145:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2146:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2149:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, specifiedId);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2149:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, specifiedId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2149:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, Int32, specifiedId);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2150:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2150:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2150:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_NORET(data, String, instanceKey);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2154:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2154:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2154:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_NORET(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 2157:22
Spell: HasAppRecord
包含日志: 是
代码:
int32_t AppMgrProxy::HasAppRecord(const AAFwk::Want &want, const AbilityInfo &abilityInfo, bool &result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option;
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &abilityInfo);

    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);
    result = reply.ReadBool();
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2162:5
Spell: 
包含日志: 是
代码:
    if (!WriteInterfaceToken(data)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");
        return ERR_FLATTEN_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2163:9
Spell: 
包含日志: 是
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2166:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2166:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2166:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &want);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2167:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &abilityInfo);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2167:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &abilityInfo);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2167:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_WRITE_RET_INT(data, Parcelable, &abilityInfo);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2169:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 2169:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 2169:5
Spell: 
包含日志: 否
代码:
    PARCEL_UTIL_SENDREQ_RET_INT(AppMgrInterfaceCode::UPDATE_INSTANCE_KEY_BY_SPECIFIED_ID, data, reply, option);

--------------------------------------------------------------------------------
