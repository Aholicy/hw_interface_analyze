代码块类型: Namespace Declaration
位置: 20:11
Spell: OHOS
包含日志: 否
代码:
namespace OHOS {
namespace AbilityRuntime {
void ConnectionObserverStubImpl::OnExtensionConnected(const ConnectionData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleExtensionConnected(data);
}

void ConnectionObserverStubImpl::OnExtensionDisconnected(const ConnectionData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleExtensionDisconnected(data);
}

#ifdef WITH_DLP
void ConnectionObserverStubImpl::OnDlpAbilityOpened(const DlpStateData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleDlpAbilityOpened(data);
}

void ConnectionObserverStubImpl::OnDlpAbilityClosed(const DlpStateData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleDlpAbilityClosed(data);
}
#endif // WITH_DLP
}  // namespace AbilityRuntime
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 21:11
Spell: AbilityRuntime
包含日志: 否
代码:
namespace AbilityRuntime {
void ConnectionObserverStubImpl::OnExtensionConnected(const ConnectionData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleExtensionConnected(data);
}

void ConnectionObserverStubImpl::OnExtensionDisconnected(const ConnectionData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleExtensionDisconnected(data);
}

#ifdef WITH_DLP
void ConnectionObserverStubImpl::OnDlpAbilityOpened(const DlpStateData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleDlpAbilityOpened(data);
}

void ConnectionObserverStubImpl::OnDlpAbilityClosed(const DlpStateData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleDlpAbilityClosed(data);
}
#endif // WITH_DLP
}  // namespace AbilityRuntime

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 22:34
Spell: OnExtensionConnected
包含日志: 否
代码:
void ConnectionObserverStubImpl::OnExtensionConnected(const ConnectionData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleExtensionConnected(data);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 25:5
Spell: 
包含日志: 否
代码:
    if (!owner) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 31:34
Spell: OnExtensionDisconnected
包含日志: 否
代码:
void ConnectionObserverStubImpl::OnExtensionDisconnected(const ConnectionData &data)
{
    auto owner = owner_.lock();
    if (!owner) {
        return;
    }
    owner->HandleExtensionDisconnected(data);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 34:5
Spell: 
包含日志: 否
代码:
    if (!owner) {
        return;
    }

--------------------------------------------------------------------------------
