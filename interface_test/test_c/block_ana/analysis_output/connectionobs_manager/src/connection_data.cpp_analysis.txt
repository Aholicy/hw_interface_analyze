代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AbilityRuntime {
using namespace OHOS::AppExecFwk;
bool ConnectionData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteInt32(extensionPid)) {
        return false;
    }

    if (!parcel.WriteInt32(extensionUid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionBundleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionModuleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionName))) {
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(extensionType))) {
        return false;
    }

    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

    return true;
}

bool ConnectionData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(extensionPid)) {
        return false;
    }

    if (!parcel.ReadInt32(extensionUid)) {
        return false;
    }

    std::u16string strValue;
    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionBundleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionModuleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionName = Str16ToStr8(strValue);

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        return false;
    }
    extensionType = static_cast<ExtensionAbilityType>(type);

    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }
    callerName = Str16ToStr8(strValue);

    return true;
}

ConnectionData *ConnectionData::Unmarshalling(Parcel &parcel)
{
    ConnectionData *data = new ConnectionData();
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }
    return data;
}
}  // namespace AbilityRuntime
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AbilityRuntime
包含日志: 是
代码:
namespace AbilityRuntime {
using namespace OHOS::AppExecFwk;
bool ConnectionData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteInt32(extensionPid)) {
        return false;
    }

    if (!parcel.WriteInt32(extensionUid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionBundleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionModuleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionName))) {
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(extensionType))) {
        return false;
    }

    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

    return true;
}

bool ConnectionData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(extensionPid)) {
        return false;
    }

    if (!parcel.ReadInt32(extensionUid)) {
        return false;
    }

    std::u16string strValue;
    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionBundleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionModuleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionName = Str16ToStr8(strValue);

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        return false;
    }
    extensionType = static_cast<ExtensionAbilityType>(type);

    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }
    callerName = Str16ToStr8(strValue);

    return true;
}

ConnectionData *ConnectionData::Unmarshalling(Parcel &parcel)
{
    ConnectionData *data = new ConnectionData();
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }
    return data;
}
}  // namespace AbilityRuntime

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 24:22
Spell: Marshalling
包含日志: 否
代码:
bool ConnectionData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteInt32(extensionPid)) {
        return false;
    }

    if (!parcel.WriteInt32(extensionUid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionBundleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionModuleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(extensionName))) {
        return false;
    }

    if (!parcel.WriteInt32(static_cast<int32_t>(extensionType))) {
        return false;
    }

    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 26:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(extensionPid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 30:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(extensionUid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 34:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(extensionBundleName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 38:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(extensionModuleName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 42:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(extensionName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 46:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(static_cast<int32_t>(extensionType))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 50:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 54:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 58:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 65:22
Spell: ReadFromParcel
包含日志: 是
代码:
bool ConnectionData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(extensionPid)) {
        return false;
    }

    if (!parcel.ReadInt32(extensionUid)) {
        return false;
    }

    std::u16string strValue;
    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionBundleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionModuleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    extensionName = Str16ToStr8(strValue);

    int type = 0;
    if (!parcel.ReadInt32(type)) {
        return false;
    }
    extensionType = static_cast<ExtensionAbilityType>(type);

    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }
    callerName = Str16ToStr8(strValue);

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 67:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadInt32(extensionPid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 71:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadInt32(extensionUid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 76:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadString16(strValue)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 81:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadString16(strValue)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 86:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadString16(strValue)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 92:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadInt32(type)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 97:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 98:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 102:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 103:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 107:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 108:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 116:33
Spell: Unmarshalling
包含日志: 否
代码:
ConnectionData *ConnectionData::Unmarshalling(Parcel &parcel)
{
    ConnectionData *data = new ConnectionData();
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }
    return data;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 119:5
Spell: 
包含日志: 否
代码:
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }

--------------------------------------------------------------------------------
