代码块类型: Method Declaration
位置: 26:39
Spell: RegisterObserver
包含日志: 否
代码:
int32_t ConnectionObserverClientImpl::RegisterObserver(const std::shared_ptr<ConnectionObserver> &observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");
        return ERR_INVALID_OBSERVER;
    }

    auto proxy = GetServiceProxy();

    std::lock_guard<std::mutex> guard(observerLock_);
    if (!RegisterObserverToServiceLocked(proxy)) {
        TAG_LOGE(AAFwkTag::CONNECTION, "register failed");
        return ERR_REGISTER_FAILED;
    }

    return AddObserversLocked(observer);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 28:5
Spell: 
包含日志: 否
代码:
    if (!observer) {
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");
        return ERR_INVALID_OBSERVER;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 29:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 36:5
Spell: 
包含日志: 否
代码:
    if (!RegisterObserverToServiceLocked(proxy)) {
        TAG_LOGE(AAFwkTag::CONNECTION, "register failed");
        return ERR_REGISTER_FAILED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 37:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "register failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 44:39
Spell: UnregisterObserver
包含日志: 否
代码:
int32_t ConnectionObserverClientImpl::UnregisterObserver(const std::shared_ptr<ConnectionObserver> &observer)
{
    if (!observer) {
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");
        return ERR_INVALID_OBSERVER;
    }

    auto proxy = GetServiceProxy();

    std::lock_guard<std::mutex> guard(observerLock_);
    auto ret = RemoveObserversLocked(observer);
    if (userObservers_.empty()) {
        UnregisterFromServiceLocked(proxy);
    }

    return ret;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 46:5
Spell: 
包含日志: 否
代码:
    if (!observer) {
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");
        return ERR_INVALID_OBSERVER;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 47:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 55:5
Spell: 
包含日志: 否
代码:
    if (userObservers_.empty()) {
        UnregisterFromServiceLocked(proxy);
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 75:39
Spell: GetConnectionData
包含日志: 否
代码:
int32_t ConnectionObserverClientImpl::GetConnectionData(std::vector<ConnectionData> &connectionData)
{
    auto proxy = GetServiceProxy();
    if (!proxy) {
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");
        return ERR_NO_PROXY;
    }

    return proxy->GetConnectionData(connectionData);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 78:5
Spell: 
包含日志: 否
代码:
    if (!proxy) {
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");
        return ERR_NO_PROXY;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 79:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "invalid observer");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 86:36
Spell: HandleExtensionConnected
包含日志: 否
代码:
void ConnectionObserverClientImpl::HandleExtensionConnected(const ConnectionData &data)
{
    auto observers = GetObservers();
    for (auto it = observers.begin(); it != observers.end(); ++it) {
        auto observer = *it;
        if (observer) {
            observer->OnExtensionConnected(data);
        }
    }
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 97:36
Spell: HandleExtensionDisconnected
包含日志: 否
代码:
void ConnectionObserverClientImpl::HandleExtensionDisconnected(const ConnectionData &data)
{
    auto observers = GetObservers();
    for (auto it = observers.begin(); it != observers.end(); ++it) {
        auto observer = *it;
        if (observer) {
            observer->OnExtensionDisconnected(data);
        }
    }
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 132:36
Spell: RegisterObserverToServiceLocked
包含日志: 否
代码:
bool ConnectionObserverClientImpl::RegisterObserverToServiceLocked(const std::shared_ptr<ServiceProxyAdapter> &proxy)
{
    if (isRegistered_) {
        return true;
    }

    if (!proxy) {
        TAG_LOGE(AAFwkTag::CONNECTION, "fail to get service");
        return false;
    }

    if (!observer_) {
        observer_ = sptr<IConnectionObserver>(new (std::nothrow) ConnectionObserverStubImpl(shared_from_this()));
    }

    if (proxy->RegisterObserver(observer_) != ERR_OK) {
        TAG_LOGE(AAFwkTag::CONNECTION, "register observer failed");
        return false;
    }
    isRegistered_ = true;
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 134:5
Spell: 
包含日志: 否
代码:
    if (isRegistered_) {
        return true;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 138:5
Spell: 
包含日志: 否
代码:
    if (!proxy) {
        TAG_LOGE(AAFwkTag::CONNECTION, "fail to get service");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 139:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "fail to get service");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 143:5
Spell: 
包含日志: 否
代码:
    if (!observer_) {
        observer_ = sptr<IConnectionObserver>(new (std::nothrow) ConnectionObserverStubImpl(shared_from_this()));
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 147:5
Spell: 
包含日志: 否
代码:
    if (proxy->RegisterObserver(observer_) != ERR_OK) {
        TAG_LOGE(AAFwkTag::CONNECTION, "register observer failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 148:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "register observer failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 155:36
Spell: UnregisterFromServiceLocked
包含日志: 否
代码:
void ConnectionObserverClientImpl::UnregisterFromServiceLocked(const std::shared_ptr<ServiceProxyAdapter> &proxy)
{
    if (!isRegistered_ || !observer_) {
        return;
    }

    if (!proxy) {
        return;
    }

    if (proxy->UnregisterObserver(observer_) != ERR_OK) {
        TAG_LOGE(AAFwkTag::CONNECTION, "unregister observer failed");
        return;
    }
    isRegistered_ = false;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 157:5
Spell: 
包含日志: 否
代码:
    if (!isRegistered_ || !observer_) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 161:5
Spell: 
包含日志: 否
代码:
    if (!proxy) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 165:5
Spell: 
包含日志: 否
代码:
    if (proxy->UnregisterObserver(observer_) != ERR_OK) {
        TAG_LOGE(AAFwkTag::CONNECTION, "unregister observer failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 166:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "unregister observer failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 172:39
Spell: AddObserversLocked
包含日志: 否
代码:
int32_t ConnectionObserverClientImpl::AddObserversLocked(const std::shared_ptr<ConnectionObserver> &observer)
{
    if (userObservers_.find(observer) != userObservers_.end()) {
        TAG_LOGE(AAFwkTag::CONNECTION, "observer already registered");
        return ERR_OBSERVER_ALREADY_REGISTERED;
    }
    userObservers_.emplace(observer);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 174:5
Spell: 
包含日志: 否
代码:
    if (userObservers_.find(observer) != userObservers_.end()) {
        TAG_LOGE(AAFwkTag::CONNECTION, "observer already registered");
        return ERR_OBSERVER_ALREADY_REGISTERED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 175:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "observer already registered");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 182:39
Spell: RemoveObserversLocked
包含日志: 否
代码:
int32_t ConnectionObserverClientImpl::RemoveObserversLocked(const std::shared_ptr<ConnectionObserver> &observer)
{
    if (userObservers_.find(observer) == userObservers_.end()) {
        TAG_LOGE(AAFwkTag::CONNECTION, "no such observer");
        return ERR_OBSERVER_NOT_REGISTERED;
    }
    userObservers_.erase(observer);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 184:5
Spell: 
包含日志: 否
代码:
    if (userObservers_.find(observer) == userObservers_.end()) {
        TAG_LOGE(AAFwkTag::CONNECTION, "no such observer");
        return ERR_OBSERVER_NOT_REGISTERED;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 185:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "no such observer");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 192:68
Spell: GetServiceProxy
包含日志: 否
代码:
std::shared_ptr<ServiceProxyAdapter> ConnectionObserverClientImpl::GetServiceProxy()
{
    std::lock_guard<std::mutex> guard(proxyLock_);
    if (!serviceAdapter_) {
        ConnectLocked();
    }
    return serviceAdapter_;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 195:5
Spell: 
包含日志: 否
代码:
    if (!serviceAdapter_) {
        ConnectLocked();
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 201:36
Spell: ConnectLocked
包含日志: 否
代码:
void ConnectionObserverClientImpl::ConnectLocked()
{
    if (serviceAdapter_ != nullptr) {
        return;
    }
    sptr<ISystemAbilityManager> systemManager = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
    if (systemManager == nullptr) {
        TAG_LOGE(AAFwkTag::CONNECTION, "get system ability registry failed");
        return;
    }
    sptr<IRemoteObject> remoteObj = systemManager->GetSystemAbility(ABILITY_MGR_SERVICE_ID);
    if (remoteObj == nullptr) {
        TAG_LOGE(AAFwkTag::CONNECTION, "connect AMS failed");
        return;
    }

    deathRecipient_ = sptr<IRemoteObject::DeathRecipient>(
        new (std::nothrow) ServiceDeathRecipient(shared_from_this()));
    if (deathRecipient_ == nullptr) {
        TAG_LOGE(AAFwkTag::CONNECTION, "create AbilityMgrDeathRecipient failed");
        return;
    }
    if ((remoteObj->IsProxyObject()) && (!remoteObj->AddDeathRecipient(deathRecipient_))) {
        TAG_LOGE(AAFwkTag::CONNECTION, "Add death recipient failed");
        return;
    }

    serviceAdapter_ = std::make_shared<ServiceProxyAdapter>(remoteObj);
    TAG_LOGI(AAFwkTag::CONNECTION, "Connect AMS success");
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 203:5
Spell: 
包含日志: 否
代码:
    if (serviceAdapter_ != nullptr) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 207:5
Spell: 
包含日志: 否
代码:
    if (systemManager == nullptr) {
        TAG_LOGE(AAFwkTag::CONNECTION, "get system ability registry failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 208:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "get system ability registry failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 212:5
Spell: 
包含日志: 否
代码:
    if (remoteObj == nullptr) {
        TAG_LOGE(AAFwkTag::CONNECTION, "connect AMS failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 213:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "connect AMS failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 219:5
Spell: 
包含日志: 否
代码:
    if (deathRecipient_ == nullptr) {
        TAG_LOGE(AAFwkTag::CONNECTION, "create AbilityMgrDeathRecipient failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 220:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "create AbilityMgrDeathRecipient failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 223:5
Spell: 
包含日志: 否
代码:
    if ((remoteObj->IsProxyObject()) && (!remoteObj->AddDeathRecipient(deathRecipient_))) {
        TAG_LOGE(AAFwkTag::CONNECTION, "Add death recipient failed");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 224:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "Add death recipient failed");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 229:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::CONNECTION, "Connect AMS success");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 232:36
Spell: HandleRemoteDied
包含日志: 否
代码:
void ConnectionObserverClientImpl::HandleRemoteDied(const wptr<IRemoteObject> &remote)
{
    if (!ResetProxy(remote)) {
        return;
    }
    NotifyServiceDiedToObservers();
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 234:5
Spell: 
包含日志: 否
代码:
    if (!ResetProxy(remote)) {
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 240:36
Spell: ResetProxy
包含日志: 否
代码:
bool ConnectionObserverClientImpl::ResetProxy(const wptr<IRemoteObject> &remote)
{
    std::lock_guard<std::mutex> guard(proxyLock_);
    if (serviceAdapter_ == nullptr) {
        return false;
    }

    auto proxyObject = serviceAdapter_->GetProxyObject();
    if ((proxyObject != nullptr) && (proxyObject == remote.promote())) {
        proxyObject->RemoveDeathRecipient(deathRecipient_);
        serviceAdapter_ = nullptr;
        return true;
    }

    return false;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 243:5
Spell: 
包含日志: 否
代码:
    if (serviceAdapter_ == nullptr) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 248:5
Spell: 
包含日志: 否
代码:
    if ((proxyObject != nullptr) && (proxyObject == remote.promote())) {
        proxyObject->RemoveDeathRecipient(deathRecipient_);
        serviceAdapter_ = nullptr;
        return true;
    }

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 257:36
Spell: ResetStatus
包含日志: 否
代码:
void ConnectionObserverClientImpl::ResetStatus()
{
    std::lock_guard<std::mutex> guard(observerLock_);
    isRegistered_ = false;
    userObservers_.clear();
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 264:36
Spell: NotifyServiceDiedToObservers
包含日志: 否
代码:
void ConnectionObserverClientImpl::NotifyServiceDiedToObservers()
{
    auto observers = GetObservers();
    ResetStatus();
    for (auto it = observers.begin(); it != observers.end(); ++it) {
        auto observer = *it;
        if (observer) {
            observer->OnServiceDied();
        }
    }
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 276:87
Spell: GetObservers
包含日志: 否
代码:
std::unordered_set<std::shared_ptr<ConnectionObserver>> ConnectionObserverClientImpl::GetObservers()
{
    std::lock_guard<std::mutex> guard(observerLock_);
    return userObservers_;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 282:59
Spell: OnRemoteDied
包含日志: 否
代码:
void ConnectionObserverClientImpl::ServiceDeathRecipient::OnRemoteDied(const wptr<IRemoteObject> &remote)
{
    TAG_LOGI(AAFwkTag::CONNECTION, "called");
    auto owner = owner_.lock();
    if (!owner) {
        TAG_LOGE(AAFwkTag::CONNECTION, "OnRemoteDied");
        return;
    }
    owner->HandleRemoteDied(remote);
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 284:5
Spell: 
包含日志: 否
代码:
    TAG_LOGI(AAFwkTag::CONNECTION, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 286:5
Spell: 
包含日志: 否
代码:
    if (!owner) {
        TAG_LOGE(AAFwkTag::CONNECTION, "OnRemoteDied");
        return;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 287:9
Spell: 
包含日志: 否
代码:
        TAG_LOGE(AAFwkTag::CONNECTION, "OnRemoteDied");

--------------------------------------------------------------------------------
