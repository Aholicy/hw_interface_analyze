代码块类型: Namespace Declaration
位置: 21:11
Spell: OHOS
包含日志: 是
代码:
namespace OHOS {
namespace AbilityRuntime {
bool DlpStateData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteInt32(targetPid)) {
        return false;
    }

    if (!parcel.WriteInt32(targetUid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetBundleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetModuleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetAbilityName))) {
        return false;
    }

    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

    TAG_LOGD(AAFwkTag::CONNECTION, "end");
    return true;
}

bool DlpStateData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(targetPid)) {
        return false;
    }

    if (!parcel.ReadInt32(targetUid)) {
        return false;
    }

    std::u16string strValue;
    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetBundleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetModuleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetAbilityName = Str16ToStr8(strValue);

    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }
    callerName = Str16ToStr8(strValue);

    return true;
}

DlpStateData *DlpStateData::Unmarshalling(Parcel &parcel)
{
    DlpStateData *data = new DlpStateData();
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }
    return data;
}
}  // namespace AbilityRuntime
}  // namespace OHOS

--------------------------------------------------------------------------------
代码块类型: Namespace Declaration
位置: 22:11
Spell: AbilityRuntime
包含日志: 是
代码:
namespace AbilityRuntime {
bool DlpStateData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteInt32(targetPid)) {
        return false;
    }

    if (!parcel.WriteInt32(targetUid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetBundleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetModuleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetAbilityName))) {
        return false;
    }

    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

    TAG_LOGD(AAFwkTag::CONNECTION, "end");
    return true;
}

bool DlpStateData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(targetPid)) {
        return false;
    }

    if (!parcel.ReadInt32(targetUid)) {
        return false;
    }

    std::u16string strValue;
    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetBundleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetModuleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetAbilityName = Str16ToStr8(strValue);

    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }
    callerName = Str16ToStr8(strValue);

    return true;
}

DlpStateData *DlpStateData::Unmarshalling(Parcel &parcel)
{
    DlpStateData *data = new DlpStateData();
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }
    return data;
}
}  // namespace AbilityRuntime

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 23:20
Spell: Marshalling
包含日志: 是
代码:
bool DlpStateData::Marshalling(Parcel &parcel) const
{
    if (!parcel.WriteInt32(targetPid)) {
        return false;
    }

    if (!parcel.WriteInt32(targetUid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetBundleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetModuleName))) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(targetAbilityName))) {
        return false;
    }

    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

    TAG_LOGD(AAFwkTag::CONNECTION, "end");
    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 25:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(targetPid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 29:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(targetUid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 33:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(targetBundleName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 37:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(targetModuleName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 41:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(targetAbilityName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 45:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(callerUid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 49:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteInt32(callerPid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 53:5
Spell: 
包含日志: 否
代码:
    if (!parcel.WriteString16(Str8ToStr16(callerName))) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 57:5
Spell: 
包含日志: 是
代码:
    TAG_LOGD(AAFwkTag::CONNECTION, "end");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 61:20
Spell: ReadFromParcel
包含日志: 是
代码:
bool DlpStateData::ReadFromParcel(Parcel &parcel)
{
    if (!parcel.ReadInt32(targetPid)) {
        return false;
    }

    if (!parcel.ReadInt32(targetUid)) {
        return false;
    }

    std::u16string strValue;
    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetBundleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetModuleName = Str16ToStr8(strValue);

    if (!parcel.ReadString16(strValue)) {
        return false;
    }
    targetAbilityName = Str16ToStr8(strValue);

    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }
    callerName = Str16ToStr8(strValue);

    return true;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 63:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadInt32(targetPid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 67:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadInt32(targetUid)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 72:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadString16(strValue)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 77:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadString16(strValue)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 82:5
Spell: 
包含日志: 否
代码:
    if (!parcel.ReadString16(strValue)) {
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 87:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(callerUid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 88:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 92:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadInt32(callerPid)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 93:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 97:5
Spell: 
包含日志: 是
代码:
    if (!parcel.ReadString16(strValue)) {
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");
        return false;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do)
位置: 98:9
Spell: 
包含日志: 是
代码:
        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
位置: 106:29
Spell: Unmarshalling
包含日志: 否
代码:
DlpStateData *DlpStateData::Unmarshalling(Parcel &parcel)
{
    DlpStateData *data = new DlpStateData();
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }
    return data;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
位置: 109:5
Spell: 
包含日志: 否
代码:
    if (!data->ReadFromParcel(parcel)) {
        delete data;
        data = nullptr;
    }

--------------------------------------------------------------------------------
