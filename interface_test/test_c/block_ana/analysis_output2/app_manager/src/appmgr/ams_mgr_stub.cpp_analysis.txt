代码块类型: Function Call
块名称: CreateMemberFuncMap
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:41:5
复杂度: 0
定义变量: AAFWK_SERVICE_ERR_OFFSET
使用变量: __x, IF_PROT_DEFAULT
关键位置: 否
日志评分: 0
代码:
    CreateMemberFuncMap();

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: CreateMemberFuncMap
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:46:18
复杂度: 0
定义变量: __caches, APP_LIFECYCLE_TIMEOUT
使用变量: __loc, _S_get_c_name, DEFAULT
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
void AmsMgrStub::CreateMemberFuncMap() {}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: OnRemoteRequest
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:48:17
复杂度: 2
定义变量: 
使用变量: __out
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int AmsMgrStub::OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    if (code != static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID)) {
        TAG_LOGI(AAFwkTag::APPMGR, "OnReceived, code: %{public}u, flags: %{public}d", code,
            option.GetFlags());
    }
    std::u16string descriptor = AmsMgrStub::GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");
        return ERR_INVALID_STATE;
    }
    return OnRemoteRequestInner(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:50:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (code != static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID)) {
        TAG_LOGI(AAFwkTag::APPMGR, "OnReceived, code: %{public}u, flags: %{public}d", code,
            option.GetFlags());
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:51:9
复杂度: 0
定义变量: __n, __put, alpha, digit, __buf_len, BUSSINESS_THREAD_BLOCK_6S, logTag
使用变量: __n, __high, uselocale, __put, __libc_single_threaded, __refs, _Base, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGI(AAFwkTag::APPMGR, "OnReceived, code: %{public}u, flags: %{public}d", code,
            option.GetFlags());

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadInterfaceToken
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:55:39
复杂度: 0
定义变量: 
使用变量: __base, __buf_len, __remaining, data
关键位置: 否
日志评分: 0
代码:
    std::u16string remoteDescriptor = data.ReadInterfaceToken();

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:56:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (descriptor != remoteDescriptor) {
        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");
        return ERR_INVALID_STATE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:57:9
复杂度: 0
定义变量: __tmp, __elem0, cntrl, logTag
使用变量: , __tmp, __i, __last, __len, __str, _Cache, PTHREAD_MUTEX_ERRORCHECK_NP, _IScntrl, current_exception, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:58:9
复杂度: 0
定义变量: __ret, __first, punct
使用变量: , __tmp, __first, __last, __len, __s, __base, PTHREAD_MUTEX_NORMAL, _ISpunct, _Base, ERR_INVALID_STATE
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return ERR_INVALID_STATE;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:60:5
复杂度: 0
定义变量: __len, __endptr
使用变量: , __value, __tmp, __n, __i, __pos, __low, __m, __b3, __loc, code, data, reply, option
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return OnRemoteRequestInner(code, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: OnRemoteRequestInner
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:60:12
复杂度: 0
定义变量: __len, __endptr
使用变量: , __tmp, __n, __i, __pos, __low, __m, __b3, code, data, reply, option
关键位置: 否
日志评分: 0
代码:
    return OnRemoteRequestInner(code, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: OnRemoteRequestInner
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:63:21
复杂度: 4
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __throw_length_error, rethrow_exception
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::OnRemoteRequestInner(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    int retCode = ERR_OK;
    retCode = OnRemoteRequestInnerFirst(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerSecond(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerThird(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    retCode = OnRemoteRequestInnerFourth(code, data, reply, option);
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }
    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: OnRemoteRequestInnerFirst
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:67:15
复杂度: 0
定义变量: __maxlen
使用变量: , value, __t, __x, __c, __args, __f, __m, __s, __put, _S_get_c_name, __cvt, __intptr, __align, __gd, code, data, reply, option
关键位置: 否
日志评分: 0
代码:
    retCode = OnRemoteRequestInnerFirst(code, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:68:5
复杂度: 1
定义变量: 
使用变量: __s, __loc
关键位置: 是
日志评分: -2
  - Conditional Block (if) 缺少日志: 得分 -2
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:69:9
复杂度: 0
定义变量: 
使用变量: , __it, __first, __pos, __low, __high, __space, retCode
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return retCode;

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: OnRemoteRequestInnerSecond
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:71:15
复杂度: 0
定义变量: __digits, __mp
使用变量: , __n, __first, __val, __str, __mem, __ISwupper, _Intl, _Lp, _Base, code, data, reply, option
关键位置: 否
日志评分: 0
代码:
    retCode = OnRemoteRequestInnerSecond(code, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:72:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Conditional Block (if) 缺少日志: 得分 -2
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:73:9
复杂度: 0
定义变量: __tmp, __outnext
使用变量: , __p, __first, __last, __s, __diff, __tmp_data, __ISwalpha, __outstr, retCode
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return retCode;

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: OnRemoteRequestInnerThird
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:75:15
复杂度: 0
定义变量: __max
使用变量: , __is_signed, __tmp, __first, __last, __fn, __s, __min, __next, __state, __ISwxdigit, _S_dec, _S_oct, _S_hex, __cvt, _Base, code, data, reply, option
关键位置: 否
日志评分: 0
代码:
    retCode = OnRemoteRequestInnerThird(code, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:76:5
复杂度: 1
定义变量: 
使用变量: __outnext
关键位置: 是
日志评分: -2
  - Conditional Block (if) 缺少日志: 得分 -2
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:77:9
复杂度: 0
定义变量: __testoff
使用变量: __ISwprint, __outnext, retCode
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return retCode;

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: OnRemoteRequestInnerFourth
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:79:15
复杂度: 0
定义变量: __parent, MAX_TRANSACTION_ID
使用变量: , __n, __last, __next, __ISwblank, partial, _Lp, _Base, code, data, reply, option
关键位置: 否
日志评分: 0
代码:
    retCode = OnRemoteRequestInnerFourth(code, data, reply, option);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:80:5
复杂度: 1
定义变量: 
使用变量: __tmp
关键位置: 是
日志评分: -2
  - Conditional Block (if) 缺少日志: 得分 -2
代码:
    if (retCode != AAFwk::ERR_CODE_NOT_EXIST) {
        return retCode;
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:81:9
复杂度: 0
定义变量: 
使用变量: __x, __tmp, __str, __ISwpunct, retCode
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return retCode;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: OnRemoteRequestInnerFirst
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:86:21
复杂度: 14
定义变量: 
使用变量: , __tmp, __first, __len, __u, __location, __ret, __c1, __throw_system_error
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerFirst(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::LOAD_ABILITY):
            return HandleLoadAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::TERMINATE_ABILITY):
            return HandleTerminateAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_ABILITY_STATE):
            return HandleUpdateAbilityState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_EXTENSION_STATE):
            return HandleUpdateExtensionState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_STATE_CALLBACK):
            return HandleRegisterAppStateCallback(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PEOCESS_BY_ABILITY_TOKEN):
            return HandleKillProcessByAbilityToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_USERID):
            return HandleKillProcessesByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESS_WITH_ACCOUNT):
            return HandleKillProcessWithAccount(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION):
            return HandleKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ABILITY_ATTACH_TIMEOUT):
            return HandleAbilityAttachTimeOut(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::PREPARE_TERMINATE_ABILITY):
            return HandlePrepareTerminate(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_BYUID):
            return HandleKillApplicationByUid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_SELF):
            return HandleKillApplicationSelf(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_RUNNING_PROCESS_INFO_BY_TOKEN):
            return HandleGetRunningProcessInfoByToken(data, reply);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:89:5
复杂度: 14
定义变量: 
使用变量: , __n, __first, __result, __count, __nh, __ret, __s, __builtin_va_start, __builtin_va_end, __mem, __outstr
关键位置: 是
日志评分: -2
  - Switch Block 缺少日志: 得分 -2
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::LOAD_ABILITY):
            return HandleLoadAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::TERMINATE_ABILITY):
            return HandleTerminateAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_ABILITY_STATE):
            return HandleUpdateAbilityState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_EXTENSION_STATE):
            return HandleUpdateExtensionState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_STATE_CALLBACK):
            return HandleRegisterAppStateCallback(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PEOCESS_BY_ABILITY_TOKEN):
            return HandleKillProcessByAbilityToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_USERID):
            return HandleKillProcessesByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESS_WITH_ACCOUNT):
            return HandleKillProcessWithAccount(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION):
            return HandleKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ABILITY_ATTACH_TIMEOUT):
            return HandleAbilityAttachTimeOut(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::PREPARE_TERMINATE_ABILITY):
            return HandlePrepareTerminate(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_BYUID):
            return HandleKillApplicationByUid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_APPLICATION_SELF):
            return HandleKillApplicationSelf(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_RUNNING_PROCESS_INFO_BY_TOKEN):
            return HandleGetRunningProcessInfoByToken(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:91:13
复杂度: 0
定义变量: __digits, __c, __left
使用变量: , __len, __ret, __ils, __h, __out, _Base, __atime, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleLoadAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleLoadAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:91:20
复杂度: 0
定义变量: __digits, __c
使用变量: , __h, __out, _Base, __atime, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleLoadAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:93:13
复杂度: 0
定义变量: __args, __a0
使用变量: , __t, __n, __i, __len, __nh, __position, __ret, __s, __grouping, _Pn, NORMAL, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleTerminateAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleTerminateAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:93:20
复杂度: 0
定义变量: __args, __a0
使用变量: , __t, __i, __len, _Pn, NORMAL, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleTerminateAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:95:13
复杂度: 0
定义变量: __curr_symbol, __b0
使用变量: , __digits, _Nm, __a, __b, __tmp, __n, __i, __p, __first, __last, __val, __num, __result, __out, __w, __mp, _Qn, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleUpdateAbilityState(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleUpdateAbilityState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:95:20
复杂度: 0
定义变量: __b0
使用变量: , _Nm, __a, __b, __n, __i, __p, __first, __val, __num, __out, __w, __mp, _Qn, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleUpdateAbilityState(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:97:13
复杂度: 0
定义变量: __ret, __comp, __negative_sign
使用变量: , __tmp, __n, __p, __result, __c, __args, __old_size, __size, __m, __s, __fmt, __builtin_vsnprintf, __out, __mp, __tn, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleUpdateExtensionState(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleUpdateExtensionState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:97:20
复杂度: 0
定义变量: __comp
使用变量: , __tmp, __n, __p, __c, __args, __old_size, __size, __m, __s, __fmt, __builtin_vsnprintf, __out, __mp, __tn, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleUpdateExtensionState(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:99:13
复杂度: 0
定义变量: nothrow, __tmp_capacity, ctype, __g, is_always_lock_free
使用变量: , __b, __n, __i, __val, __result, __c, __s, __out, __w, __mp, __mem, __exchange_and_add_single, __truename, __outchars, __element, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleRegisterAppStateCallback(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleRegisterAppStateCallback
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:99:20
复杂度: 0
定义变量: nothrow, __tmp_capacity, ctype, __g, is_always_lock_free
使用变量: , __b, __n, __i, __val, __c, __s, __out, __w, __mp, __mem, __outchars, __element, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleRegisterAppStateCallback(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:101:13
复杂度: 0
定义变量: collate, __grouping, __fn
使用变量: , __a, __b, __i, __val, _Default, __mem, __exchange_and_add, __np, __g_size, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillProcessByAbilityToken(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillProcessByAbilityToken
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:101:20
复杂度: 0
定义变量: collate, __fn
使用变量: __a, __b, __i, __val, _Default, __mem, __np, __g_size, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillProcessByAbilityToken(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:103:13
复杂度: 0
定义变量: __max, monetary
使用变量: , __n, min, __pos, __s, _Copy, _CopyAssignment, memory_order_seq_cst, _Base, tag, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillProcessesByUserId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillProcessesByUserId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:103:20
复杂度: 0
定义变量: __max, monetary
使用变量: , __n, __pos, _Copy, _CopyAssignment, memory_order_seq_cst, _Base, tag, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillProcessesByUserId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:105:13
复杂度: 0
定义变量: all
使用变量: , __max, __a, __p, __first, __last, __first1, __first2, __num, __nh, __uselocale, __old, __b0, __gthread_active_p, ctype, numeric, collate, __refs, __a0, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillProcessWithAccount(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillProcessWithAccount
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:105:20
复杂度: 0
定义变量: all
使用变量: __p, __first, __first1, __first2, __num, __nh, __old, __b0, ctype, numeric, collate, __refs, __a0, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillProcessWithAccount(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:107:13
复杂度: 0
定义变量: 
使用变量: , _Nm, __x, __comp, __arr, __np, _S_get_c_name, __g_size, memory_order_seq_cst, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillApplication(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillApplication
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:107:20
复杂度: 0
定义变量: 
使用变量: , _Nm, __x, __comp, __np, _S_get_c_name, __g_size, memory_order_seq_cst, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillApplication(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:109:13
复杂度: 0
定义变量: value, __ct, offset
使用变量: , __t, __n, __first, __last, __val, __position, __cmp, PTHREAD_RWLOCK_PREFER_READER_NP, __mem, __loc, __grouping, _Pn, _Qn, DEFAULT, tag, GetOffset, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleAbilityAttachTimeOut(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleAbilityAttachTimeOut
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:109:20
复杂度: 0
定义变量: value, __ct
使用变量: , __t, __n, __first, __last, __val, __position, __cmp, PTHREAD_RWLOCK_PREFER_READER_NP, __mem, __loc, __grouping, _Pn, _Qn, DEFAULT, tag, GetOffset, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleAbilityAttachTimeOut(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:111:13
复杂度: 0
定义变量: par
使用变量: , __max, __x, __tmp, __p, __first, __val, __args, __u, __s, npos, nothrow, __gthread_mutex_trylock, __mem, _S_atoms_out, memory_order_seq_cst, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandlePrepareTerminate(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandlePrepareTerminate
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:111:20
复杂度: 0
定义变量: par
使用变量: , __max, __x, __tmp, __p, __first, __val, __args, __u, __s, __mem, _S_atoms_out, memory_order_seq_cst, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandlePrepareTerminate(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:113:13
复杂度: 0
定义变量: __tmp, __found, unseq
使用变量: , __tmp, __sz, __len, __out, __mp, _S_atoms_in, memory_order_acq_rel, memory_order_acquire, offset, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillApplicationByUid(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillApplicationByUid
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:113:20
复杂度: 0
定义变量: __found, unseq
使用变量: __tmp, __sz, __len, __mp, _S_atoms_in, memory_order_acquire, offset, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillApplicationByUid(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:115:13
复杂度: 0
定义变量: __i
使用变量: , __x, __a, __tmp, __i, __sz, __fn, __nh, __arg, allocator_arg, _S_iend, memory_order_seq_cst, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillApplicationSelf(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillApplicationSelf
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:115:20
复杂度: 0
定义变量: 
使用变量: , __x, __a, __tmp, __i, __sz, __fn, __arg, _S_iend, memory_order_seq_cst, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillApplicationSelf(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:117:13
复杂度: 0
定义变量: __i, __ret, _M_max_size, __fn
使用变量: , __x, __i, __p, __it1, __it2, __lo1, __hi1, __lo2, __hi2, __o, __grouping, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleGetRunningProcessInfoByToken(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleGetRunningProcessInfoByToken
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:117:20
复杂度: 0
定义变量: __i, __ret, _M_max_size
使用变量: , __x, __p, __it2, __lo1, __lo2, __hi2, __o, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleGetRunningProcessInfoByToken(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:119:5
复杂度: 0
定义变量: __size
使用变量: , __x, __n, __i, __sz, __p, __y, __first, __last, __fn, __count, __ret, __s, PTHREAD_MUTEX_TIMED_NP, __loc, __falsename, _Base, __gthread_recursive_mutex_trylock, ERR_CODE_NOT_EXIST
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return AAFwk::ERR_CODE_NOT_EXIST;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: OnRemoteRequestInnerSecond
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:122:21
复杂度: 17
定义变量: 
使用变量: , __ptr, __is_constant_evaluated, __builtin_unreachable, __builtin_operator_delete, __u, __nh, __pos, __ne_ptr
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerSecond(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::SET_ABILITY_FOREGROUNDING_FLAG):
            return HandleSetAbilityForegroundingFlagToAppRecord(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_ABILITY):
            return HandleStartSpecifiedAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_START_SPECIFIED_ABILITY_RESPONSE):
            return HandleRegisterStartSpecifiedAbilityResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_APPLICATION_INFO_BY_PROCESS_ID):
            return HandleGetApplicationInfoByProcessID(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::NOTIFY_APP_MGR_RECORD_EXIT_REASON):
            return HandleNotifyAppMgrRecordExitReason(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_APPLICATION_INFO_INSTALLED):
            return HandleUpdateApplicationInfoInstalled(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_CURRENT_USER_ID):
            return HandleSetCurrentUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ENABLE_START_PROCESS_FLAG_BY_USER_ID):
            return HandleSetEnableStartProcessFlagByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID):
            return HandleGetBundleNameByPid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_DEBUG_LISTENER):
            return HandleRegisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UNREGISTER_APP_DEBUG_LISTENER):
            return HandleUnregisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_APP_DEBUG):
            return HandleAttachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::DETACH_APP_DEBUG):
            return HandleDetachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_APP_WAITING_DEBUG):
            return HandleSetAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CANCEL_APP_WAITING_DEBUG):
            return HandleCancelAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_WAITING_DEBUG_APP):
            return HandleGetWaitingDebugApp(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_WAITING_DEBUG_APP):
            return HandleIsWaitingDebugApp(data, reply);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:125:5
复杂度: 17
定义变量: 
使用变量: , __x, __first, __builtin_operator_delete, __node, __position, __ret, __size, __m, __capacity, __dest, __atomic_thread_fence, __atomic_signal_fence, __throw_concurrence_lock_error, __xnode
关键位置: 是
日志评分: -2
  - Switch Block 缺少日志: 得分 -2
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::SET_ABILITY_FOREGROUNDING_FLAG):
            return HandleSetAbilityForegroundingFlagToAppRecord(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_ABILITY):
            return HandleStartSpecifiedAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_START_SPECIFIED_ABILITY_RESPONSE):
            return HandleRegisterStartSpecifiedAbilityResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_APPLICATION_INFO_BY_PROCESS_ID):
            return HandleGetApplicationInfoByProcessID(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::NOTIFY_APP_MGR_RECORD_EXIT_REASON):
            return HandleNotifyAppMgrRecordExitReason(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_APPLICATION_INFO_INSTALLED):
            return HandleUpdateApplicationInfoInstalled(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_CURRENT_USER_ID):
            return HandleSetCurrentUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ENABLE_START_PROCESS_FLAG_BY_USER_ID):
            return HandleSetEnableStartProcessFlagByUserId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::Get_BUNDLE_NAME_BY_PID):
            return HandleGetBundleNameByPid(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_APP_DEBUG_LISTENER):
            return HandleRegisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UNREGISTER_APP_DEBUG_LISTENER):
            return HandleUnregisterAppDebugListener(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_APP_DEBUG):
            return HandleAttachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::DETACH_APP_DEBUG):
            return HandleDetachAppDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_APP_WAITING_DEBUG):
            return HandleSetAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CANCEL_APP_WAITING_DEBUG):
            return HandleCancelAppWaitingDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::GET_WAITING_DEBUG_APP):
            return HandleGetWaitingDebugApp(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_WAITING_DEBUG_APP):
            return HandleIsWaitingDebugApp(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:127:13
复杂度: 0
定义变量: 
使用变量: , __t, __a, __b, __position, __m, __cont, __s, _M_max_align, operator&, memory_order_release, __memory_order_mask, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleSetAbilityForegroundingFlagToAppRecord(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleSetAbilityForegroundingFlagToAppRecord
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:127:20
复杂度: 0
定义变量: 
使用变量: , __t, __a, __b, __cont, _M_max_align, memory_order_release, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleSetAbilityForegroundingFlagToAppRecord(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:129:13
复杂度: 0
定义变量: __state, tagNames
使用变量: __x, __tmp, __p, relaxed, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleStartSpecifiedAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleStartSpecifiedAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:129:20
复杂度: 0
定义变量: 
使用变量: __x, __tmp, __p, relaxed, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleStartSpecifiedAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:131:13
复杂度: 0
定义变量: __lock
使用变量: , __it, __a, __b, __n, __p, __first, __last, __val, __state, __shift, __outstr, __cvt, _Base, tagNames, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleRegisterStartSpecifiedAbilityResponse(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleRegisterStartSpecifiedAbilityResponse
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:131:20
复杂度: 0
定义变量: 
使用变量: , __a, __b, __n, __p, __first, __last, __val, __state, __shift, __outstr, __cvt, _Base, tagNames, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleRegisterStartSpecifiedAbilityResponse(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:133:13
复杂度: 0
定义变量: 
使用变量: __m, __s, __xnode, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleGetApplicationInfoByProcessID(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleGetApplicationInfoByProcessID
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:133:20
复杂度: 0
定义变量: 
使用变量: __m, __xnode, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleGetApplicationInfoByProcessID(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:135:13
复杂度: 0
定义变量: __hi
使用变量: , __x, __a, __b, __i, __p, __y, __nh, __j, __i1, __i2, __hi1, __hi2, __o, __m2, __m1, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleNotifyAppMgrRecordExitReason(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleNotifyAppMgrRecordExitReason
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:135:20
复杂度: 0
定义变量: __hi
使用变量: , __x, __a, __b, __i, __p, __nh, __i1, __i2, __hi1, __hi2, __o, __m2, __m1, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleNotifyAppMgrRecordExitReason(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:137:13
复杂度: 0
定义变量: __node
使用变量: , __first, __last, __result, __k, __m, __s, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleUpdateApplicationInfoInstalled(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleUpdateApplicationInfoInstalled
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:137:20
复杂度: 0
定义变量: __node
使用变量: , __first, __last, __result, __k, __m, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleUpdateApplicationInfoInstalled(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:139:13
复杂度: 0
定义变量: npos, __parent, tagNames
使用变量: , __x, __a, __p, __f, __fn, __cont, __holeIndex, memory_order_seq_cst, __xnode, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleSetCurrentUserId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleSetCurrentUserId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:139:20
复杂度: 0
定义变量: npos
使用变量: , __x, __a, __f, __fn, __cont, __holeIndex, memory_order_seq_cst, __xnode, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleSetCurrentUserId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:141:13
复杂度: 0
定义变量: __state, registration, offset
使用变量: , __r, __tmp, __pos, __position, __l, _Lp, Get, __gthread_cond_destroy, tag, GetOffset, DELEGATOR, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleSetEnableStartProcessFlagByUserId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleSetEnableStartProcessFlagByUserId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:141:20
复杂度: 0
定义变量: registration
使用变量: , __r, __tmp, __pos, __l, _Lp, Get, __gthread_cond_destroy, tag, GetOffset, DELEGATOR, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleSetEnableStartProcessFlagByUserId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:143:13
复杂度: 0
定义变量: stdin
使用变量: , __x, __a, __b, __y, __nh, __pos, __parent, operator|, __ineof, __sbin, __sbout, _Intl, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleGetBundleNameByPid(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleGetBundleNameByPid
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:143:20
复杂度: 0
定义变量: 
使用变量: __x, __b, __y, __nh, operator|, __ineof, __sbin, __sbout, _Intl, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleGetBundleNameByPid(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:145:13
复杂度: 0
定义变量: __i, stderr, __ne_ptr, __loc, __x0
使用变量: , __x, __tmp, __p, __c, __ret, __m, npos, __capacity, __i1, __i2, __old_capacity, __ne_ptr, __io, offset, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleRegisterAppDebugListener(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleRegisterAppDebugListener
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:145:20
复杂度: 0
定义变量: __i, __x0
使用变量: , __x, __c, __m, __capacity, __i1, __i2, __old_capacity, __io, offset, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleRegisterAppDebugListener(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:147:13
复杂度: 0
定义变量: __y0
使用变量: , __a, __b, __y, __first, __last, __result, __c, __old_capacity, operator&, _Base, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleUnregisterAppDebugListener(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleUnregisterAppDebugListener
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:147:20
复杂度: 0
定义变量: __y0
使用变量: __b, __y, __first, __last, __result, __c, __old_capacity, operator&, _Base, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleUnregisterAppDebugListener(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:149:13
复杂度: 0
定义变量: __lc, __x0y0
使用变量: , __loc, __uc, _Lp, __x0, __y0, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleAttachAppDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleAttachAppDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:149:20
复杂度: 0
定义变量: __lc, __x0y0
使用变量: __loc, __uc, _Lp, __x0, __y0, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleAttachAppDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:151:13
复杂度: 0
定义变量: registration, __x1y0
使用变量: , __a, __b, __i, __p, __first, __cont, __facets, operator^, memory_order_seq_cst, __y0, __x1, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleDetachAppDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleDetachAppDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:151:20
复杂度: 0
定义变量: registration, __x1y0
使用变量: , __b, __i, __p, __first, __facets, operator^, memory_order_seq_cst, __y0, __x1, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleDetachAppDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:153:13
复杂度: 0
定义变量: __pos, _Nd, __mix
使用变量: , __p, __y, __comp, __position, __x0y1, __x1y0, tagNames, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleSetAppWaitingDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleSetAppWaitingDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:153:20
复杂度: 0
定义变量: _Nd, __mix
使用变量: , __p, __comp, __position, __x0y1, __x1y0, tagNames, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleSetAppWaitingDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:155:13
复杂度: 0
定义变量: __size, __loc, __mix_hi
使用变量: , __a, __n, __y, __last2, __m, __capacity, __i1, __i2, __hf, __eql, __p1, __io, __m1, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleCancelAppWaitingDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleCancelAppWaitingDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:155:20
复杂度: 0
定义变量: __loc, __mix_hi
使用变量: __a, __y, __last2, __m, __capacity, __i1, __i2, __eql, __io, __m1, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleCancelAppWaitingDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:157:13
复杂度: 0
定义变量: __ret, __lit, __mandatory_sign
使用变量: , __a, __b, __first2, __pos, __position, __x_copy, __predicate, __shift, __lc, __mix_hi, __mix_lo, __x1y1, __x0y0, debugApp, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleGetWaitingDebugApp(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleGetWaitingDebugApp
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:157:20
复杂度: 0
定义变量: __lit
使用变量: , __a, __b, __first2, __pos, __position, __x_copy, __predicate, __shift, __lc, __mix_hi, __mix_lo, __x1y1, __x0y0, debugApp, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleGetWaitingDebugApp(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:159:13
复杂度: 0
定义变量: __r, registration, __hi
使用变量: , __x, __obj, __other, __pos, __ret, __s, __loc, __facets, memory_order_seq_cst, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleIsWaitingDebugApp(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleIsWaitingDebugApp
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:159:20
复杂度: 0
定义变量: registration, __hi
使用变量: , __obj, __other, __s, __facets, memory_order_seq_cst, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleIsWaitingDebugApp(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:161:5
复杂度: 0
定义变量: __max_digits10, __testeof, _S_timezones, __ns, tagNames
使用变量: , __old_val, __n, __first, __end, __beg, __lc, __throw_concurrence_unlock_error, broker, ERR_CODE_NOT_EXIST
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return AAFwk::ERR_CODE_NOT_EXIST;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: OnRemoteRequestInnerThird
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:164:21
复杂度: 15
定义变量: 
使用变量: , __i, __is_constant_evaluated, __builtin_unreachable, __res, __pos, __position, __old
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerThird(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_NON_PERSIST_WAITING_DEBUG_FLAG):
            return HandleClearNonPersistWaitingDebugFlag(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_DEBUG_RESPONSE):
            return HandleRegisterAbilityDebugResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_ATTACH_DEBUG):
            return HandleIsAttachDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_PROCESS_BY_TOKEN):
            return HandleClearProcessByToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_PIDS):
            return HandleKillProcessesByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_PID_TO_PARENT):
            return HandleAttachPidToParent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_MEMORY_SIZE_SUFFICIENT):
            return HandleIsMemorySizeSufficent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_ENABLE_STATE):
            return HandleSetKeepAliveEnableState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACHED_TO_STATUS_BAR):
            return HandleAttachedToStatusBar(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::GET_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_PROCESS):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_MS_DELEGATE):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::BLOCK_PROCESS_CACHE_BY_PIDS):
            return HandleBlockProcessCacheByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_KILLED_FOR_UPGRADE_WEB):
            return HandleIsKilledForUpgradeWeb(data, reply);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:167:5
复杂度: 15
定义变量: 
使用变量: , __i, __p, __first, __last, __is_constant_evaluated, __builtin_unreachable, __first1, __alloc, __xtrc, __found_mantissa, __atomic_thread_fence, __r1z, __r0z, __throw_system_error
关键位置: 是
日志评分: -2
  - Switch Block 缺少日志: 得分 -2
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_NON_PERSIST_WAITING_DEBUG_FLAG):
            return HandleClearNonPersistWaitingDebugFlag(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_DEBUG_RESPONSE):
            return HandleRegisterAbilityDebugResponse(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_ATTACH_DEBUG):
            return HandleIsAttachDebug(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAR_PROCESS_BY_TOKEN):
            return HandleClearProcessByToken(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_BY_PIDS):
            return HandleKillProcessesByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACH_PID_TO_PARENT):
            return HandleAttachPidToParent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_MEMORY_SIZE_SUFFICIENT):
            return HandleIsMemorySizeSufficent(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_ENABLE_STATE):
            return HandleSetKeepAliveEnableState(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::ATTACHED_TO_STATUS_BAR):
            return HandleAttachedToStatusBar(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::UPDATE_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::GET_CONFIGURATION):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::START_SPECIFIED_PROCESS):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::REGISTER_ABILITY_MS_DELEGATE):
            return 0;
        case static_cast<uint32_t>(IAmsMgr::Message::BLOCK_PROCESS_CACHE_BY_PIDS):
            return HandleBlockProcessCacheByPids(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_KILLED_FOR_UPGRADE_WEB):
            return HandleIsKilledForUpgradeWeb(data, reply);
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:169:13
复杂度: 0
定义变量: 
使用变量: , __r, __n, __d, __last1, __c, __l, __m, __lc, IPCRPC_SUB_MODULE_CODE, swap, __clock, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleClearNonPersistWaitingDebugFlag(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleClearNonPersistWaitingDebugFlag
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:169:20
复杂度: 0
定义变量: 
使用变量: , __n, __d, __c, __l, __m, __lc, IPCRPC_SUB_MODULE_CODE, swap, __clock, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleClearNonPersistWaitingDebugFlag(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:171:13
复杂度: 0
定义变量: __p, _S_timezones
使用变量: __a, __b, __d, __n1, _S_local_capacity, __p1, __param, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleRegisterAbilityDebugResponse(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleRegisterAbilityDebugResponse
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:171:20
复杂度: 0
定义变量: __p, _S_timezones
使用变量: __a, __b, __d, __n1, _S_local_capacity, __p1, __param, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleRegisterAbilityDebugResponse(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:173:13
复杂度: 0
定义变量: __is_signed, __n, __d1, __a, tagNames
使用变量: , __r, __d, __last1, __c, __end, __l, __m, __cont, __beg, operator&, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleIsAttachDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleIsAttachDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:173:20
复杂度: 0
定义变量: __is_signed, __d1
使用变量: , __r, __d, __last1, __c, __end, __m, operator&, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleIsAttachDebug(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:175:13
复杂度: 0
定义变量: _Nd
使用变量: , __r, __x, __a, __p, __len, __args, __fn, _S_red, __end, __capacity, memory_order_seq_cst, tagNames, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleClearProcessByToken(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleClearProcessByToken
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:175:20
复杂度: 0
定义变量: _Nd
使用变量: , __r, __x, __a, __p, __len, __args, __fn, _S_red, __capacity, memory_order_seq_cst, tagNames, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleClearProcessByToken(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:177:13
复杂度: 0
定义变量: __p, __comp, __r1x
使用变量: , __a, __n, __i, __last, __d1, __u, __node, __arg, __pos, __j, __n1, __beg, ldiv, __hf, __eql, __lc, __gthread_cond_signal, __atime, multiThread, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillProcessesByPids(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillProcessesByPids
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:177:20
复杂度: 0
定义变量: __p, __comp, __r1x
使用变量: , __a, __n, __i, __d1, __u, __node, __arg, __pos, __j, __n1, __beg, ldiv, __hf, __eql, __lc, __gthread_cond_signal, __atime, multiThread, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillProcessesByPids(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:179:13
复杂度: 0
定义变量: __max_exponent10, __r1y
使用变量: , __a, __first, __last, __lhs, __rhs, __c, _Lp, __r1x, __n0, _Base, _Digs, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleAttachPidToParent(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleAttachPidToParent
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:179:20
复杂度: 0
定义变量: __max_exponent10, __r1y
使用变量: , __a, __first, __last, __lhs, __rhs, __c, _Lp, __r1x, __n0, _Base, _Digs, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleAttachPidToParent(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:181:13
复杂度: 0
定义变量: __r, __assignable, __r1, BASE_DEFAULT
使用变量: , __ptr, _Idx, __len, __args, __s, __which, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleIsMemorySizeSufficent(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleIsMemorySizeSufficent
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:181:20
复杂度: 0
定义变量: __r1, BASE_DEFAULT
使用变量: , __ptr, _Idx, __len, __args, __s, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleIsMemorySizeSufficent(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:183:13
复杂度: 0
定义变量: __lock, BASE_JSENV
使用变量: __x, __a, __b, __p, __d, __len, __position, __m, __cont, operator|, __testeof, symbol, __r1y, __r1z, _Base, __rtime, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleSetKeepAliveEnableState(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleSetKeepAliveEnableState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:183:20
复杂度: 0
定义变量: BASE_JSENV
使用变量: __b, __p, __len, __m, __cont, operator|, symbol, __r1y, __r1z, __rtime, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleSetKeepAliveEnableState(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:185:13
复杂度: 0
定义变量: __n, BASE_EXT
使用变量: , __first, __last, __first1, __result, __c, __node, __m, __lc, __r1y, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleAttachedToStatusBar(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleAttachedToStatusBar
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:185:20
复杂度: 0
定义变量: BASE_EXT
使用变量: , __last, __result, __c, __m, __lc, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleAttachedToStatusBar(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:187:13
复杂度: 0
定义变量: BASE_LOCAL_CALL
使用变量: __r, __a, __arg, __exchange_and_add_dispatch
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return 0;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:189:13
复杂度: 0
定义变量: 
使用变量: _S_word_bit
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return 0;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:191:13
复杂度: 0
定义变量: __num_erase, offset
使用变量: , __a, __builtin_constant_p, npos
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return 0;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:193:13
复杂度: 0
定义变量: __pend
使用变量: __x, __n, base
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return 0;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:195:13
复杂度: 0
定义变量: __cur, __qend, __q0
使用变量: , _Nm, __p, __first, __is_constant_evaluated, __from, __two, __alloc, __arr, tag, BASE_APPDFR, GetDomainName1, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleBlockProcessCacheByPids(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleBlockProcessCacheByPids
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:195:20
复杂度: 0
定义变量: __cur, __qend, __q0
使用变量: , _Nm, __p, __first, __from, __two, __alloc, __arr, tag, GetDomainName1, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleBlockProcessCacheByPids(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:197:13
复杂度: 0
定义变量: in_place, __last1
使用变量: , __n, __from, __len, __end, __beg, __mandatory_sign, _Pow, jitEnabled, tag, BASE_DELEGATOR, GetDomainName3, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleIsKilledForUpgradeWeb(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleIsKilledForUpgradeWeb
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:197:20
复杂度: 0
定义变量: in_place, __last1
使用变量: , __from, __end, _Pow, jitEnabled, tag, GetDomainName3, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleIsKilledForUpgradeWeb(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:199:5
复杂度: 0
定义变量: __last2
使用变量: , __b, __n, __another, _M_get_pointer, _S_word_bit, sign, BASE_WANTAGENT, GetDomainName5, ERR_CODE_NOT_EXIST
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return AAFwk::ERR_CODE_NOT_EXIST;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: OnRemoteRequestInnerFourth
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:202:21
复杂度: 9
定义变量: __cmp
使用变量: , __guard, __found_grouping, __date
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::OnRemoteRequestInnerFourth(uint32_t code, MessageParcel &data,
    MessageParcel &reply, MessageOption &option)
{
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_CONTAINS_ONLY_UI_EXTENSION):
            return HandleIsProcessContainsOnlyUIAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION):
            return HandleForceKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAN_UIABILITY_BY_USER_REQUEST):
            return HandleCleanAbilityByUserRequest(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION_BY_ACCESS_TOKEN_ID):
            return HandleKillProcessesByAccessTokenId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_ATTACHED):
            return HandleIsProcessAttached(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_CALLER_KILLING):
            return HandleIsCallerKilling(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_DKV):
            return HandleSetKeepAliveDkv(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_IN_BATCH):
            return HandleKillProcessesInBatch(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SEND_APP_SPAWN_UNINSTALL_DEBUG_HAP_MSG):
            return HandleSendAppSpawnUninstallDebugHapMsg(data);
    }
    return AAFwk::ERR_CODE_NOT_EXIST;
}

--------------------------------------------------------------------------------
代码块类型: Switch Block
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:205:5
复杂度: 9
定义变量: __n
使用变量: , __i, __is_constant_evaluated, __builtin_unreachable, __first1, __first2, __other, __size, __dnew, __prev, __throw_concurrence_lock_error, __throw_concurrence_unlock_error, __now
关键位置: 是
日志评分: -2
  - Switch Block 缺少日志: 得分 -2
代码:
    switch (static_cast<uint32_t>(code)) {
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_CONTAINS_ONLY_UI_EXTENSION):
            return HandleIsProcessContainsOnlyUIAbility(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION):
            return HandleForceKillApplication(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::CLEAN_UIABILITY_BY_USER_REQUEST):
            return HandleCleanAbilityByUserRequest(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::FORCE_KILL_APPLICATION_BY_ACCESS_TOKEN_ID):
            return HandleKillProcessesByAccessTokenId(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_PROCESS_ATTACHED):
            return HandleIsProcessAttached(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::IS_CALLER_KILLING):
            return HandleIsCallerKilling(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SET_KEEP_ALIVE_DKV):
            return HandleSetKeepAliveDkv(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::KILL_PROCESSES_IN_BATCH):
            return HandleKillProcessesInBatch(data, reply);
        case static_cast<uint32_t>(IAmsMgr::Message::SEND_APP_SPAWN_UNINSTALL_DEBUG_HAP_MSG):
            return HandleSendAppSpawnUninstallDebugHapMsg(data);
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:207:13
复杂度: 0
定义变量: 
使用变量: , __r, __x, __first, __h, __q, __next, operator&, showbase, __io, _S_min_alignment, _Nd, _Nd_u, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleIsProcessContainsOnlyUIAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleIsProcessContainsOnlyUIAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:207:20
复杂度: 0
定义变量: 
使用变量: , __x, __first, __q, operator&, showbase, _S_min_alignment, _Nd, _Nd_u, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleIsProcessContainsOnlyUIAbility(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:209:13
复杂度: 0
定义变量: __diff, __found_grouping, defer_lock
使用变量: , __a, __p, __first, __comp, allocator_arg, _Nd, _Nd_u, _Base, _Dig, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleForceKillApplication(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleForceKillApplication
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:209:20
复杂度: 0
定义变量: defer_lock
使用变量: , __a, __first, __comp, _Nd, _Nd_u, _Base, _Dig, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleForceKillApplication(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:211:13
复杂度: 0
定义变量: __prev, digits
使用变量: , __val, __first1, __first2, __last1, __cur, sign, _Base, _Dig, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleCleanAbilityByUserRequest(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleCleanAbilityByUserRequest
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:211:20
复杂度: 0
定义变量: digits
使用变量: , __val, __first1, __first2, __last1, __cur, sign, _Base, _Dig, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleCleanAbilityByUserRequest(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:213:13
复杂度: 0
定义变量: 
使用变量: , __t, __a, __p, __last, __comp, __first2, __last2, __f, __end, npos, __beg, __prev, __umap, __cur, __urng, _S_is_eof, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillProcessesByAccessTokenId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillProcessesByAccessTokenId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:213:20
复杂度: 0
定义变量: 
使用变量: , __t, __a, __p, __last, __comp, __first2, __last2, __f, __end, __beg, __prev, __umap, __cur, __urng, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillProcessesByAccessTokenId(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:215:13
复杂度: 0
定义变量: __value, adopt_lock
使用变量: , __x, __p, __first, __last, __e, __c, __f, __diff, __functor, iostream_category, _Lp, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleIsProcessAttached(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleIsProcessAttached
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:215:20
复杂度: 0
定义变量: adopt_lock
使用变量: , __x, __p, __first, __last, __e, __c, __f, __diff, iostream_category, _Lp, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleIsProcessAttached(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:217:13
复杂度: 0
定义变量: __tmp
使用变量: , __value, __n, __i, __last, __other, __cmp, __il, _S_local_capacity, __unary_pred, __loc, _Nd, _Nd_ull, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleIsCallerKilling(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleIsCallerKilling
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:217:20
复杂度: 0
定义变量: 
使用变量: , __value, __i, __last, __other, __cmp, __il, _S_local_capacity, __unary_pred, _Nd, _Nd_ull, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleIsCallerKilling(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:219:13
复杂度: 0
定义变量: __diff, __shift, max_digits10
使用变量: , __first, __last, __d, __rhs, __from, __c, __builtin_clzll, __count, __end, __uhead, __s1, __s2, __beg, __eof, __state, _Nd, _Nd_ull, _Lp, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleSetKeepAliveDkv(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleSetKeepAliveDkv
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:219:20
复杂度: 0
定义变量: __shift, max_digits10
使用变量: , __d, __rhs, __from, __c, __builtin_clzll, __count, __end, __uhead, __s1, __s2, __beg, __eof, __state, _Nd, _Nd_ull, _Lp, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleSetKeepAliveDkv(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:221:13
复杂度: 0
定义变量: __size, __coshift
使用变量: , __a, __n, __f, __hint, __beg, __shift, __digit, _Lp, __coshift_, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleKillProcessesInBatch(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleKillProcessesInBatch
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:221:20
复杂度: 0
定义变量: __coshift
使用变量: , __n, __f, __hint, __beg, __shift, _Lp, __coshift_, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleKillProcessesInBatch(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:223:13
复杂度: 0
定义变量: __n, MAX_RAWDATA_SIZE, __c2, is_signed
使用变量: , _Nm, __n, __p, __c, _S_local_capacity, __lc, __coshift, data
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleSendAppSpawnUninstallDebugHapMsg(data);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleSendAppSpawnUninstallDebugHapMsg
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:223:20
复杂度: 0
定义变量: MAX_RAWDATA_SIZE, __c2, is_signed
使用变量: _Nm, __n, __p, __c, _S_local_capacity, __lc, __coshift, data
关键位置: 否
日志评分: 0
代码:
            return HandleSendAppSpawnUninstallDebugHapMsg(data);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:225:5
复杂度: 0
定义变量: __ret, __new_n0
使用变量: , __ptr, __r, __p, __first, __last, __d, __comp, __pos, __size, __clength, _Fnv_hash_bytes, __dnew, __found_dec, __found_sci, ERR_CODE_NOT_EXIST
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return AAFwk::ERR_CODE_NOT_EXIST;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleLoadAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:228:21
复杂度: 4
定义变量: __cmp
使用变量: , __is_constant_evaluated, __builtin_unreachable, __pos, __guard, __time, __dt, __ampm_format, __ampm, __throw_system_error
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleLoadAbility(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::shared_ptr<AbilityInfo> abilityInfo(data.ReadParcelable<AbilityInfo>());
    if (!abilityInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    std::shared_ptr<ApplicationInfo> appInfo(data.ReadParcelable<ApplicationInfo>());
    if (!appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    std::shared_ptr<AAFwk::Want> want(data.ReadParcelable<AAFwk::Want>());
    if (!want) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable want failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }
    std::shared_ptr<AbilityRuntime::LoadParam> loadParam(data.ReadParcelable<AbilityRuntime::LoadParam>());
    if (!loadParam) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable loadParam failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

    LoadAbility(abilityInfo, appInfo, want, loadParam);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:232:5
复杂度: 1
定义变量: 
使用变量: , __first, __secondChild, __testvalid
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!abilityInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:233:9
复杂度: 0
定义变量: __i, __len, __max_ull, __quot_lo, logTag
使用变量: , __max, __r, __x, __b, __p, npos, __new_size, __secondChild, __hi, __lo, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<AbilityInfo> failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:238:5
复杂度: 1
定义变量: 
使用变量: __first, __throw_logic_error
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!appInfo) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:239:9
复杂度: 0
定义变量: __c, min_exponent, logTag
使用变量: , __tmp, __end, __cont, __beg, __rem, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<ApplicationInfo> failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:244:5
复杂度: 1
定义变量: 
使用变量: __n, __p, __pos
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!want) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable want failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:245:9
复杂度: 0
定义变量: __i, __res, logTag
使用变量: , __n, __i, __p, __first, __comp, __c, __len, __count, __s, __new_size, __cxa_init_primary_exception, _Digs, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable want failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:249:5
复杂度: 1
定义变量: 
使用变量: __c, __len
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!loadParam) {
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable loadParam failed");
        return ERR_APPEXECFWK_PARCEL_ERROR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:250:9
复杂度: 0
定义变量: logTag
使用变量: , __first, __e, __res, __count, __pos, __cont, __ex, _Digs, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable loadParam failed");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:255:5
复杂度: 0
定义变量: 
使用变量: , __first, __gthread_mutex_unlock, __cxa_free_exception, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleTerminateAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:258:21
复杂度: 0
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __days
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleTerminateAbility(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    bool clearMissionFlag = data.ReadBool();
    TerminateAbility(token, clearMissionFlag);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:261:33
复杂度: 0
定义变量: 
使用变量: , __a, __args, __capacity, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:264:5
复杂度: 0
定义变量: 
使用变量: , __n, __grouping_tmp, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleUpdateAbilityState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:267:21
复杂度: 0
定义变量: 
使用变量: , __days, __atomic_store
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleUpdateAbilityState(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    int32_t state = data.ReadInt32();
    UpdateAbilityState(token, static_cast<AbilityState>(state));
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:270:33
复杂度: 0
定义变量: has_denorm_loss
使用变量: __x, __mode, _Val, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:273:5
复杂度: 0
定义变量: 
使用变量: __b, __is_constant_evaluated, __builtin_unreachable, __ret, __low, __get_type_info, __sep_pos, memory_order_consume, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleUpdateExtensionState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:276:21
复杂度: 0
定义变量: 
使用变量: , __n, __is_constant_evaluated, __builtin_unreachable, __days, __atomic_store
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleUpdateExtensionState(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    int32_t state = data.ReadInt32();
    UpdateExtensionState(token, static_cast<ExtensionState>(state));
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:278:33
复杂度: 0
定义变量: 
使用变量: , data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: UpdateExtensionState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:280:5
复杂度: 0
定义变量: 
使用变量: __count, __hi, __lo, __gthread_active_p, __pcvt, _Digs, token, state
关键位置: 否
日志评分: 0
代码:
    UpdateExtensionState(token, static_cast<ExtensionState>(state));

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:281:5
复杂度: 0
定义变量: __tmp
使用变量: , __b, __comp, __one, __two, __end, __capacity, __beg, __rsize, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleRegisterAppStateCallback
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:284:21
复杂度: 1
定义变量: 
使用变量: __sv, __months, __atomic_load
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleRegisterAppStateCallback(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IAppStateCallback> callback = nullptr;
    if (data.ReadBool()) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        callback = iface_cast<IAppStateCallback>(obj);
    }
    RegisterAppStateCallback(callback);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:288:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Conditional Block (if) 缺少日志: 得分 -2
代码:
    if (data.ReadBool()) {
        sptr<IRemoteObject> obj = data.ReadRemoteObject();
        callback = iface_cast<IAppStateCallback>(obj);
    }

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:289:35
复杂度: 0
定义变量: 
使用变量: __ptr, data
关键位置: 否
日志评分: 0
代码:
        sptr<IRemoteObject> obj = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:293:5
复杂度: 0
定义变量: __ret, __ptr, __e
使用变量: __rsize, __state, __new_result, __gthread_recursive_mutex_lock, __throw_concurrence_wait_error, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillProcessByAbilityToken
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:296:21
复杂度: 0
定义变量: 
使用变量: __pos, __months, __atomic_exchange, __throw_system_error
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleKillProcessByAbilityToken(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();

    KillProcessByAbilityToken(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:299:33
复杂度: 0
定义变量: _15, round_style
使用变量: __last, __e, __comp, generic_category, __lc, memory_order_seq_cst, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:302:5
复杂度: 0
定义变量: __tmp, __ptr
使用变量: , __i, _Rb_tree_decrement, __h, __il, __beg, __sign, __gthread_cond_wait_recursive, _Lp, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillProcessesByUserId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:305:21
复杂度: 0
定义变量: 
使用变量: __pos, __months
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleKillProcessesByUserId(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    int32_t userId = data.ReadInt32();

    KillProcessesByUserId(userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:311:5
复杂度: 0
定义变量: __tmp
使用变量: , __tmp, __pred, __res, __sv_check, __found_mantissa, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillProcessesByPids
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:314:21
复杂度: 2
定义变量: 
使用变量: __is_constant_evaluated, __builtin_unreachable, __f, __is_valid_cmpexch_failure_order, __atomic_exchange
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleKillProcessesByPids(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto size = data.ReadUint32();
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }
    std::vector<int32_t> pids;
    for (uint32_t i = 0; i < size; i++) {
        pids.emplace_back(data.ReadInt32());
    }

    KillProcessesByPids(pids);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:318:5
复杂度: 1
定义变量: __ret
使用变量: , __ret
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:319:9
复杂度: 0
定义变量: __tmp, __rlen, __can_fill, logTag
使用变量: , __x, __a, __p, __y, __str, __found_grouping, __found_dec, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:328:5
复杂度: 0
定义变量: __r, __plus
使用变量: , __i, __first, __last, __s, __scaling, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleAttachPidToParent
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:331:21
复杂度: 0
定义变量: 
使用变量: __is_constant_evaluated, __builtin_unreachable, __f, __is_valid_cmpexch_failure_order
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleAttachPidToParent(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    sptr<IRemoteObject> callerToken = data.ReadRemoteObject();
    AttachPidToParent(token, callerToken);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:334:33
复杂度: 0
定义变量: 
使用变量: __str, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:335:39
复杂度: 0
定义变量: 
使用变量: __value, __rresult, _Lp, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> callerToken = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:337:5
复杂度: 0
定义变量: __to_destroy
使用变量: __result, __testvalid, __atomic_compare_exchange, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillProcessWithAccount
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:340:21
复杂度: 0
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __result, __f, __c1, __throw_range_error, __is_valid_cmpexch_failure_order
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleKillProcessWithAccount(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

    HITRACE_METER(HITRACE_TAG_APP);

    std::string bundleName = data.ReadString();
    int accountId = data.ReadInt32();
    bool clearPageStack = data.ReadBool();
    auto appIndex = data.ReadInt32();

    TAG_LOGI(AAFwkTag::APPMGR,
        "bundleName = %{public}s, accountId = %{public}d, clearPageStack = %{public}d",
        bundleName.c_str(), accountId, clearPageStack);

    int32_t result = KillProcessWithAccount(bundleName, accountId, clearPageStack, appIndex);
    reply.WriteInt32(result);

    TAG_LOGI(AAFwkTag::APPMGR, "end");

    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:342:5
复杂度: 0
定义变量: __next, logTag
使用变量: __it, __first, __last, __w, operator|=, failbit, __success, __failure, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:351:5
复杂度: 0
定义变量: __n, __len, __parent, __uerngrange, dec, logTag
使用变量: , __it, __r, __x, __tmp, __n, __i, __first, __last, __e, __result, __len, __alloc, __nh, __pos, __position, __m, __w, __how_much, __cur, __urng, __urngrange, __urange, __uerngrange, _S_dec, memory_order_seq_cst, __cmpexch_failure_order, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR,
        "bundleName = %{public}s, accountId = %{public}d, clearPageStack = %{public}d",
        bundleName.c_str(), accountId, clearPageStack);

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:358:5
复杂度: 0
定义变量: __num, hex, logTag
使用变量: , __x, __in, __last, __c2, __parent, __hi, __lo, __found_dec, __found_sci, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:360:5
复杂度: 0
定义变量: 
使用变量: __first, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillProcessesInBatch
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:363:21
复杂度: 2
定义变量: 
使用变量: __is_constant_evaluated, __builtin_unreachable, __result, __f, __throw_range_error, __is_valid_cmpexch_failure_order
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleKillProcessesInBatch(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

    HITRACE_METER(HITRACE_TAG_APP);

    auto size = data.ReadUint32();
    TAG_LOGI(AAFwkTag::APPMGR, "pids.size=%{public}d", size);
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }
    std::vector<int32_t> pids;
    for (uint32_t i = 0; i < size; i++) {
        pids.emplace_back(data.ReadInt32());
    }

    int32_t result = KillProcessesInBatch(pids);
    reply.WriteInt32(result);

    TAG_LOGI(AAFwkTag::APPMGR, "end");

    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:365:5
复杂度: 0
定义变量: logTag
使用变量: , __a, __tmp, __tag, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "enter");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:370:5
复杂度: 0
定义变量: __num, __first, oct, logTag
使用变量: , __first, __last, __c2, _S_oct, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "pids.size=%{public}d", size);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:371:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:372:9
复杂度: 0
定义变量: logTag
使用变量: , __first, __last, __num, __capacity, _S_single, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size");

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:383:5
复杂度: 0
定义变量: __n, __urngmax, __loc, logTag
使用变量: , __tmp, __first, __last, __first1, _Rb_tree_decrement, __urng, __io, __to_destroy, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "end");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:385:5
复杂度: 0
定义变量: __urange, __lit
使用变量: , __result, __atomic_add_fetch, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillApplication
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:388:21
复杂度: 0
定义变量: 
使用变量: __ptr
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleKillApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    bool clearPageStack = data.ReadBool();
    auto appIndex = data.ReadInt32();

    TAG_LOGW(AAFwkTag::APPMGR,
        "KillApplication,callingPid=%{public}d,bundleName=%{public}s,clearPageStack=%{public}d",
        IPCSkeleton::GetCallingPid(), bundleName.c_str(), clearPageStack);

    int32_t result = KillApplication(bundleName, clearPageStack, appIndex);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:395:5
复杂度: 0
定义变量: __len, __testeof, logTag
使用变量: , __it, __ptr, __r, __t, __x, __tmp, __n, _Idx, __p, __y, __result, __len, min, __f, __arg, __ret, __end, __str, __beg, __urng, __urngmin, __tuple, __sb, memory_order_seq_cst, __atomic_sub_fetch, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGW(AAFwkTag::APPMGR,
        "KillApplication,callingPid=%{public}d,bundleName=%{public}s,clearPageStack=%{public}d",
        IPCSkeleton::GetCallingPid(), bundleName.c_str(), clearPageStack);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:401:5
复杂度: 0
定义变量: __tmp
使用变量: , __n, __c, __beg, __atomic_add_fetch, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleForceKillApplication
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:404:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleForceKillApplication(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    int userId = data.ReadInt32();
    int appIndex = data.ReadInt32();

    TAG_LOGI(AAFwkTag::APPMGR, "bundleName = %{public}s,userId=%{public}d,appIndex=%{public}d",
        bundleName.c_str(), userId, appIndex);

    int32_t result = ForceKillApplication(bundleName, userId, appIndex);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:411:5
复杂度: 0
定义变量: __len, __t0, __t1, logTag
使用变量: , __x, __a, __b, __n, __last, __d, __comp, __f, __alloc, __pos, __ret, __off, __builtin_memchr, __testoff, __cur, __param, __scaling, __past, __t0, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "bundleName = %{public}s,userId=%{public}d,appIndex=%{public}d",
        bundleName.c_str(), userId, appIndex);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:416:5
复杂度: 0
定义变量: __found_zero, __last1
使用变量: , __n, __first, __urngrange, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillProcessesByAccessTokenId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:419:21
复杂度: 0
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __pos
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleKillProcessesByAccessTokenId(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    int accessTokenId = data.ReadInt32();

    TAG_LOGI(AAFwkTag::APPMGR, "accessTokenId=%{public}d", accessTokenId);

    int32_t result = KillProcessesByAccessTokenId(accessTokenId);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:424:5
复杂度: 0
定义变量: has_denorm_loss, logTag
使用变量: , __it, __t, __n, __p, __last, __result, __u, __position, __beg, __base, __found_zero, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGI(AAFwkTag::APPMGR, "accessTokenId=%{public}d", accessTokenId);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:428:5
复杂度: 0
定义变量: 
使用变量: , __x, __n, __result, __basefield, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillApplicationByUid
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:431:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleKillApplicationByUid(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    int uid = data.ReadInt32();
    std::string reason = data.ReadString();
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationByUid,callingPid=%{public}d", IPCSkeleton::GetCallingPid());
    int32_t result = KillApplicationByUid(bundleName, uid, reason);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:437:5
复杂度: 0
定义变量: __s, logTag
使用变量: , __i, __d, __k1, __k2, __builtin_expect, __bkt_count, __basefield, _S_putback_length, memory_order_seq_cst, __atomic_xor_fetch, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationByUid,callingPid=%{public}d", IPCSkeleton::GetCallingPid());

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:440:5
复杂度: 0
定义变量: __n, __beg
使用变量: , __x, __y, __ret, __s, __urng, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleKillApplicationSelf
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:443:21
复杂度: 1
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleKillApplicationSelf(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationSelf,callingPid=%{public}d", IPCSkeleton::GetCallingPid());
    bool clearPageStack = data.ReadBool();
    std::string reason = data.ReadString();
    int32_t result = KillApplicationSelf(clearPageStack, reason);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "result write failed.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:446:5
复杂度: 0
定义变量: __sb, tinyness_before, logTag
使用变量: , __t, __x, __n, __y, __first, __lhs, __rhs, __alloc, __constant_iterators, __cur, operator==, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGW(AAFwkTag::APPMGR, "KillApplicationSelf,callingPid=%{public}d", IPCSkeleton::GetCallingPid());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:450:5
复杂度: 1
定义变量: 
使用变量: __p
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "result write failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:451:9
复杂度: 0
定义变量: __n, __comp, __old_finish, logTag
使用变量: , __x, __n, __first, __d, __c, __alloc, __cur, __sb, __atomic_is_lock_free, _S_mutex, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "result write failed.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:454:5
复杂度: 0
定义变量: __p, __prev, __new_finish
使用变量: , __is_constant_evaluated, operator*, __lc, __sign, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleAbilityAttachTimeOut
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:457:21
复杂度: 0
定义变量: 
使用变量: __b, __is_constant_evaluated, __builtin_unreachable, memory_order_acq_rel, memory_order_acquire, memory_order_consume
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleAbilityAttachTimeOut(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    AbilityAttachTimeOut(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:460:33
复杂度: 0
定义变量: 
使用变量: __x, __first2, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:462:5
复杂度: 0
定义变量: __len
使用变量: , __digits, __tmp, __lhs, __first1, __c1, __beg, __sb, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandlePrepareTerminate
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:465:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandlePrepareTerminate(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    bool clearMissionFlag = data.ReadBool();
    PrepareTerminate(token, clearMissionFlag);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:467:33
复杂度: 0
定义变量: 
使用变量: , __x, __n, __first, __c, __pos1, __n2, __g, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:470:5
复杂度: 0
定义变量: __node, __testfail
使用变量: , __x, __tmp, __n, __y, __first1, __c, operator-=, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: UpdateExtensionState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:473:18
复杂度: 0
定义变量: 
使用变量: __b, __is_constant_evaluated, __builtin_unreachable, __first2, memory_order_acq_rel, memory_order_acquire
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
void AmsMgrStub::UpdateExtensionState(const sptr<IRemoteObject> &token, const ExtensionState state)
{}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleGetRunningProcessInfoByToken
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:476:21
复杂度: 1
定义变量: 
使用变量: __b, __is_constant_evaluated, __builtin_unreachable, memory_order_acq_rel, memory_order_release, __atomic_store_n
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleGetRunningProcessInfoByToken(MessageParcel &data, MessageParcel &reply)
{
    RunningProcessInfo processInfo;
    auto token = data.ReadRemoteObject();
    GetRunningProcessInfoByToken(token, processInfo);
    if (reply.WriteParcelable(&processInfo)) {
        TAG_LOGE(AAFwkTag::APPMGR, "process info write failed.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: RunningProcessInfo
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:478:24
复杂度: 0
定义变量: processInfo
使用变量: , _Nm, __rhs, __comp, __arg, __str, operator==
关键位置: 否
日志评分: 0
代码:
    RunningProcessInfo processInfo;

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:479:18
复杂度: 0
定义变量: __lit_zero
使用变量: , _Nm, __rhs, __position, __str, __k1, __k2, _S_relocate, __lit, data
关键位置: 否
日志评分: 0
代码:
    auto token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:481:5
复杂度: 1
定义变量: 
使用变量: __m
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (reply.WriteParcelable(&processInfo)) {
        TAG_LOGE(AAFwkTag::APPMGR, "process info write failed.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:482:9
复杂度: 0
定义变量: __old_size, logTag
使用变量: , __value, __a, __n, __args, __head, __tp, __lc, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "process info write failed.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:485:5
复杂度: 0
定义变量: 
使用变量: , __x, __p, __y, _S_copy, __beg, __new_size, __new_finish, __digit, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleSetAbilityForegroundingFlagToAppRecord
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:488:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleSetAbilityForegroundingFlagToAppRecord(MessageParcel &data, MessageParcel &reply)
{
    RunningProcessInfo processInfo;
    auto pid = static_cast<pid_t>(data.ReadInt32());
    SetAbilityForegroundingFlagToAppRecord(pid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: RunningProcessInfo
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:490:24
复杂度: 0
定义变量: __mid, processInfo
使用变量: , __i, __first, __head
关键位置: 否
日志评分: 0
代码:
    RunningProcessInfo processInfo;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:493:5
复杂度: 0
定义变量: __size
使用变量: , __d, __result, __base, __lc, denorm_absent, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleStartSpecifiedAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:496:21
复杂度: 2
定义变量: 
使用变量: , __b, __is_constant_evaluated, __builtin_unreachable, __c1, memory_order_acq_rel, memory_order_release
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleStartSpecifiedAbility(MessageParcel &data, MessageParcel &reply)
{
    AAFwk::Want *want = data.ReadParcelable<AAFwk::Want>();
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }

    AbilityInfo *abilityInfo = data.ReadParcelable<AbilityInfo>();
    if (abilityInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "abilityInfo is nullptr.");
        delete want;
        return ERR_INVALID_VALUE;
    }
    StartSpecifiedAbility(*want, *abilityInfo, data.ReadInt32());
    delete want;
    delete abilityInfo;
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:499:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (want == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:500:9
复杂度: 0
定义变量: __counter, logTag
使用变量: , __x, __size, __beg, __new_finish, __g, __nn, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "want is nullptr");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:505:5
复杂度: 1
定义变量: 
使用变量: __i, __lhs, __len, __diff
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (abilityInfo == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "abilityInfo is nullptr.");
        delete want;
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:506:9
复杂度: 0
定义变量: logTag
使用变量: , __i, __p, __lhs, __rhs, __len1, __len2, __d2, __m, __how_much, operator==, __atomic_exchange_n, __g2, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "abilityInfo is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:513:5
复杂度: 0
定义变量: __res, __npb
使用变量: _Idx, __is_constant_evaluated, __len2, __node, __sep_pos, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleRegisterStartSpecifiedAbilityResponse
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:516:21
复杂度: 0
定义变量: 
使用变量: __is_constant_evaluated, __builtin_unreachable, __nbytes, __is_valid_cmpexch_failure_order, __m2
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleRegisterStartSpecifiedAbilityResponse(MessageParcel &data, MessageParcel &reply)
{
    sptr<IRemoteObject> obj = data.ReadRemoteObject();
    sptr<IStartSpecifiedAbilityResponse> response = iface_cast<IStartSpecifiedAbilityResponse>(obj);
    RegisterStartSpecifiedAbilityResponse(response);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:518:31
复杂度: 0
定义变量: den
使用变量: , __k, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> obj = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:521:5
复杂度: 0
定义变量: 
使用变量: , __n, __p, __lhs, __s, operator==, __rem, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleGetApplicationInfoByProcessID
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:524:21
复杂度: 3
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __nbytes, __is_valid_cmpexch_failure_order, __m2
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleGetApplicationInfoByProcessID(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    int32_t pid = data.ReadInt32();
    AppExecFwk::ApplicationInfo application;
    bool debug;
    int32_t result = GetApplicationInfoByProcessID(pid, application, debug);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write result error.");
        return ERR_INVALID_VALUE;
    }
    if (!reply.WriteParcelable(&application)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write application info failed");
        return ERR_INVALID_VALUE;
    }
    if (!reply.WriteBool(debug)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write debug info failed");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:531:5
复杂度: 1
定义变量: 
使用变量: , __n, __digit, __carry
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write result error.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:532:9
复杂度: 0
定义变量: __i, __a, logTag
使用变量: , __tmp, __i, __p, __result, min, __len2, __nleft, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write result error.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:535:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteParcelable(&application)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write application info failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:536:9
复杂度: 0
定义变量: __value, __cmp, digits10, logTag
使用变量: , __r, __a, __n, __first, __last, __comp, __pred, __result, __s, find, nothrow, __smax, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write application info failed");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:539:5
复杂度: 1
定义变量: 
使用变量: , __result
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(debug)) {
        TAG_LOGE(AAFwkTag::APPMGR, "write debug info failed");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:540:9
复杂度: 0
定义变量: __value, _Np, logTag
使用变量: , __first, __last, __pred, __result, __base, space, memory_order_seq_cst, __gcd1, __gcd2, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "write debug info failed");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:543:5
复杂度: 0
定义变量: 
使用变量: __f, __ti, __old_finish, __sep_pos, __cmpexch_failure_order, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleNotifyAppMgrRecordExitReason
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:546:21
复杂度: 1
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, _S_copy, __is_valid_cmpexch_failure_order, __m2
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleNotifyAppMgrRecordExitReason(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    int32_t pid = data.ReadInt32();
    int32_t reason = data.ReadInt32();
    std::string exitMsg = Str16ToStr8(data.ReadString16());
    int32_t result = NotifyAppMgrRecordExitReason(pid, reason, exitMsg);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write result failed.");
        return IPC_PROXY_ERR;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:548:5
复杂度: 0
定义变量: __get_buf, __to_destroy, __failed, logTag
使用变量: , __n, __i, __position, __beg, __old_finish, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:551:27
复杂度: 0
定义变量: _S_id_collate
使用变量: , __x, __len, __m, __fill, data
关键位置: 否
日志评分: 0
代码:
    std::string exitMsg = Str16ToStr8(data.ReadString16());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:553:5
复杂度: 1
定义变量: 
使用变量: __n, __found_grouping
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Write result failed.");
        return IPC_PROXY_ERR;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:554:9
复杂度: 0
定义变量: _S_id_messages, __l, max_exponent, logTag
使用变量: , __n, __p, __nbytes, __bnext, __locks, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Write result failed.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:555:9
复杂度: 0
定义变量: 
使用变量: , __p, __first, __pred, __pos, __s, move, IPC_PROXY_ERR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return IPC_PROXY_ERR;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:557:5
复杂度: 0
定义变量: 
使用变量: , __n, __s1, __sign_size, __outbuf, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleUpdateApplicationInfoInstalled
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:560:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleUpdateApplicationInfoInstalled(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    std::string bundleName = data.ReadString();
    int uid = data.ReadInt32();
    int32_t result = UpdateApplicationInfoInstalled(bundleName, uid);
    reply.WriteInt32(result);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:567:5
复杂度: 0
定义变量: 
使用变量: , __result, __f, __alloc, __position, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleSetCurrentUserId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:570:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleSetCurrentUserId(MessageParcel &data, MessageParcel &reply)
{
    int32_t userId = data.ReadInt32();
    SetCurrentUserId(userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:574:5
复杂度: 0
定义变量: __old_start, __dist
使用变量: , __first2, __result, __s, wmemset, __testoverflow, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleSetEnableStartProcessFlagByUserId
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:577:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleSetEnableStartProcessFlagByUserId(MessageParcel &data, MessageParcel &reply)
{
    int32_t userId = data.ReadInt32();
    bool enableStartProcess = data.ReadBool();
    SetEnableStartProcessFlagByUserId(userId, enableStartProcess);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:582:5
复杂度: 0
定义变量: __new_finish
使用变量: NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleGetBundleNameByPid
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:585:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleGetBundleNameByPid(MessageParcel &data, MessageParcel &reply)
{
    int32_t pid = data.ReadInt32();
    std::string bundleName;
    int32_t uid;
    GetBundleNameByPid(pid, bundleName, uid);

    reply.WriteString(bundleName);
    reply.WriteInt32(uid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: basic_string
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:588:17
复杂度: 0
定义变量: bundleName
使用变量: __first, __start
关键位置: 否
日志评分: 0
代码:
    std::string bundleName;

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:594:5
复杂度: 0
定义变量: __outlast
使用变量: __builtin_strcmp, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleRegisterAppDebugListener
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:597:21
复杂度: 2
定义变量: 
使用变量: 
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleRegisterAppDebugListener(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto appDebugLister = iface_cast<IAppDebugListener>(data.ReadRemoteObject());
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is null.");
        return ERR_INVALID_VALUE;
    }

    auto result = RegisterAppDebugListener(appDebugLister);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:599:5
复杂度: 0
定义变量: logTag
使用变量: , __i, __p, __first, __result, __args, __pos, __new_finish, __old_finish, noconv, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:600:57
复杂度: 0
定义变量: 
使用变量: data
关键位置: 否
日志评分: 0
代码:
    auto appDebugLister = iface_cast<IAppDebugListener>(data.ReadRemoteObject());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:601:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is null.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:602:9
复杂度: 0
定义变量: logTag
使用变量: , __x, __a, __i, __first, __result, min, __hint, __cur, __outnext, __outbuf, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is null.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:607:5
复杂度: 1
定义变量: 
使用变量: __next
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:608:9
复杂度: 0
定义变量: __tmp, logTag
使用变量: , __t, __i, __first, __last, __e, __u, hash, __next, __l_bkt_count, __new_start, __new_finish, operator|, in, memory_order_seq_cst, __depth, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:611:5
复杂度: 0
定义变量: 
使用变量: , __v, __first, __next, __typeinfo_result, __convert_from_v, __cmpexch_failure_order, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleUnregisterAppDebugListener
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:614:21
复杂度: 2
定义变量: 
使用变量: __p, __facet
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleUnregisterAppDebugListener(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto appDebugLister = iface_cast<IAppDebugListener>(data.ReadRemoteObject());
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is nullptr.");
        return ERR_INVALID_VALUE;
    }

    auto result = UnregisterAppDebugListener(appDebugLister);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:616:5
复杂度: 0
定义变量: __str, logTag
使用变量: , __a, __i, __d, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:617:57
复杂度: 0
定义变量: 
使用变量: data
关键位置: 否
日志评分: 0
代码:
    auto appDebugLister = iface_cast<IAppDebugListener>(data.ReadRemoteObject());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:618:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (appDebugLister == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is nullptr.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:619:9
复杂度: 0
定义变量: _S_putback_length, logTag
使用变量: , __first, __lhs, __len, _Dummy, __m, __new_start, __cmpexch_failure_order, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "App debug lister is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:624:5
复杂度: 1
定义变量: 
使用变量: __s
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:625:9
复杂度: 0
定义变量: __tmp, __testf, max_exponent, logTag
使用变量: , __digits, __n, __p, __e, _Dummy, __s, hash, __p1, __p2, __io, __fill, __m1, __failed, __depth, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:628:5
复杂度: 0
定义变量: __donet
使用变量: , __x, __s, __lc, __atomic_fetch_sub, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleAttachAppDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:631:21
复杂度: 2
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __pos
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleAttachAppDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = AttachAppDebug(bundleName);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:633:5
复杂度: 0
定义变量: __size, __ptr, logTag
使用变量: , __p, __first, __end, __s, __beg, __intl, __atomic_fetch_sub, __carry, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:635:5
复杂度: 1
定义变量: 
使用变量: __builtin_unreachable, __rv, __testeof
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:636:9
复杂度: 0
定义变量: __len, logTag
使用变量: , __a, __b, __rhs, __m, __fill, __counter, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:641:5
复杂度: 1
定义变量: 
使用变量: __ti, __carry
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:642:9
复杂度: 0
定义变量: logTag
使用变量: , __a, __n, __c, _MoveValue, __rv, __lc, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:645:5
复杂度: 0
定义变量: 
使用变量: __n, __fill, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleDetachAppDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:648:21
复杂度: 2
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __pos
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleDetachAppDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = DetachAppDebug(bundleName);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:650:5
复杂度: 0
定义变量: logTag
使用变量: __end, __s, __donef, __testt, __counter, __ptr_comp, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:652:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:653:9
复杂度: 0
定义变量: __old_finish, _S_synced_with_stdio, is_modulo, _Np, logTag
使用变量: , __t, __x, __n, __i, __y, __last, __result, __u, __m, __testf, __testt, __atomic_fetch_or, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:658:5
复杂度: 1
定义变量: 
使用变量: , __ret, __locks
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:659:9
复杂度: 0
定义变量: __data, logTag
使用变量: , __ptr, __obj, __n, __first, __lc, __testf, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:662:5
复杂度: 0
定义变量: __len, __idx
使用变量: , __n, __first, __testf, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleSetAppWaitingDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:665:21
复杂度: 2
定义变量: 
使用变量: __ptr
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleSetAppWaitingDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }
    auto isPersist = data.ReadBool();
    auto result = SetAppWaitingDebug(bundleName, isPersist);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:667:5
复杂度: 0
定义变量: __ptr, logTag
使用变量: , __n, __first, __c, __len, __idx, _S_word_bit, __new_start, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:669:5
复杂度: 1
定义变量: 
使用变量: , __ret, _S_relocate
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:670:9
复杂度: 0
定义变量: logTag
使用变量: , __t, __n, __last, __result, __u, __ret, __old_start, __old_finish, __lc, __testt, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:675:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:676:9
复杂度: 0
定义变量: logTag
使用变量: operator(), __refs, _S_get_c_locale, __fmtfl, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:679:5
复杂度: 0
定义变量: __i, __assignable
使用变量: , __v, __n, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleCancelAppWaitingDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:682:21
复杂度: 1
定义变量: 
使用变量: __one
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleCancelAppWaitingDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto result = CancelAppWaitingDebug();
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:684:5
复杂度: 0
定义变量: logTag
使用变量: , __a, __first, __last, __two, __f, __source, __str, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:686:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:687:9
复杂度: 0
定义变量: __size, radix, logTag
使用变量: __destroy_from, pthread_self, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:690:5
复杂度: 0
定义变量: __data
使用变量: , __f, __refs, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleGetWaitingDebugApp
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:693:21
复杂度: 4
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __one, __str, __err
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleGetWaitingDebugApp(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    std::vector<std::string> debugInfoList;
    auto result = GetWaitingDebugApp(debugInfoList);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

    int32_t listSize = static_cast<int32_t>(debugInfoList.size());
    if (listSize > MAX_APP_DEBUG_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count is %{public}d.", listSize);
        return ERR_INVALID_VALUE;
    }

    if (!reply.WriteInt32(listSize)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write list size.");
        return ERR_INVALID_VALUE;
    }

    if (!reply.WriteStringVector(debugInfoList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string vector debug info list.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:695:5
复杂度: 0
定义变量: __tp, min_exponent, logTag
使用变量: , __str, __xtrc, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:698:5
复杂度: 1
定义变量: __n
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:699:9
复杂度: 0
定义变量: __tmperr, logTag
使用变量: , __x, __u, __m, __new_start, eofbit, goodbit, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:704:5
复杂度: 1
定义变量: 
使用变量: __builtin_strcmp
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (listSize > MAX_APP_DEBUG_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count is %{public}d.", listSize);
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:705:9
复杂度: 0
定义变量: has_denorm_loss, logTag
使用变量: __first, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Max app debug count is %{public}d.", listSize);

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:709:5
复杂度: 1
定义变量: 
使用变量: __ret
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(listSize)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write list size.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:710:9
复杂度: 0
定义变量: __p, logTag
使用变量: , __x, __n, __p, __c, __pos, __size, __s, __mask, operator&, __fmtfl, operator|=, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write list size.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:714:5
复杂度: 1
定义变量: __n
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteStringVector(debugInfoList)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string vector debug info list.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:715:9
复杂度: 0
定义变量: logTag
使用变量: , __t, __u, __pos, __ret, __beg, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write string vector debug info list.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:718:5
复杂度: 0
定义变量: 
使用变量: , __n, __last, __tp, __cur, __days, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleIsWaitingDebugApp
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:721:21
复杂度: 2
定义变量: 
使用变量: 
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleIsWaitingDebugApp(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = IsWaitingDebugApp(bundleName);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:723:5
复杂度: 0
定义变量: __i, logTag
使用变量: , __first, __last, __alloc, __k, __str, __cur, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:725:5
复杂度: 1
定义变量: 
使用变量: , __pos, __str
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:726:9
复杂度: 0
定义变量: is_always_lock_free, logTag
使用变量: , __ptr, __i, _IsMove, __args, __f, __key, piecewise_construct, __hi, __lo, pthread_setspecific, round_toward_zero, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:731:5
复杂度: 1
定义变量: 
使用变量: __size, __tp, __str
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:732:9
复杂度: 0
定义变量: __months, logTag
使用变量: , __t, __i, __first, __last, __u, __pos, _NotEmpty, __str, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:735:5
复杂度: 0
定义变量: 
使用变量: __a, __pos, __size, __beg, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleSetKeepAliveEnableState
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:738:21
复杂度: 0
定义变量: 
使用变量: __err
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleSetKeepAliveEnableState(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    auto enable = data.ReadBool();
    auto uid = data.ReadInt32();
    SetKeepAliveEnableState(bundleName, enable, uid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:740:5
复杂度: 0
定义变量: __i, _Num, logTag
使用变量: , __first, __last, __k, _Valid, __s, hash, __state, __hi, __lo, pthread_mutex_destroy, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:745:5
复杂度: 0
定义变量: 
使用变量: , __one, __two, __end, __old, __beg, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleSetKeepAliveDkv
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:748:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleSetKeepAliveDkv(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    auto enable = data.ReadBool();
    auto uid = data.ReadInt32();
    SetKeepAliveDkv(bundleName, enable, uid);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:750:5
复杂度: 0
定义变量: __p, logTag
使用变量: , __ite, __cur, __tmperr, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:755:5
复杂度: 0
定义变量: __elems_after
使用变量: __result, __beg, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleClearNonPersistWaitingDebugFlag
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:758:21
复杂度: 0
定义变量: 
使用变量: 
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleClearNonPersistWaitingDebugFlag(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    ClearNonPersistWaitingDebugFlag();
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:760:5
复杂度: 0
定义变量: logTag
使用变量: , __a, __first, __n2, __state, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:762:5
复杂度: 0
定义变量: 
使用变量: , __x, __result, memory_order_seq_cst, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleRegisterAbilityDebugResponse
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:765:21
复杂度: 2
定义变量: 
使用变量: __h, __c1
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleRegisterAbilityDebugResponse(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto response = iface_cast<IAbilityDebugResponse>(data.ReadRemoteObject());
    if (response == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Response is nullptr.");
        return ERR_INVALID_VALUE;
    }

    auto result = RegisterAbilityDebugResponse(response);
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:767:5
复杂度: 0
定义变量: logTag
使用变量: __c2, __beg, __wide, space, __ctype, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:768:55
复杂度: 0
定义变量: 
使用变量: data
关键位置: 否
日志评分: 0
代码:
    auto response = iface_cast<IAbilityDebugResponse>(data.ReadRemoteObject());

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:769:5
复杂度: 1
定义变量: 
使用变量: __size, __beg
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (response == nullptr) {
        TAG_LOGE(AAFwkTag::APPMGR, "Response is nullptr.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:770:9
复杂度: 0
定义变量: logTag
使用变量: , __len, __str, __tmperr, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Response is nullptr.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:775:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteInt32(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:776:9
复杂度: 0
定义变量: __cur, __once_call, logTag
使用变量: __first, __c1, __c2, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:779:5
复杂度: 0
定义变量: 
使用变量: __x, __cur, pthread_mutex_unlock, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleIsAttachDebug
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:782:21
复杂度: 2
定义变量: 
使用变量: __b, __is_constant_evaluated, __builtin_unreachable, memory_order_acq_rel, memory_order_acquire, memory_order_consume, __atomic_store_n, __once_callable, __once_call
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleIsAttachDebug(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = IsAttachDebug(bundleName);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:784:5
复杂度: 0
定义变量: __i, __pos, logTag
使用变量: , __t, __x, __i, __first, __s1, __s2, lt, _S_to_string_view, __cur, __elems_after, __tmperr, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:786:5
复杂度: 1
定义变量: 
使用变量: __i, __beg
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:787:9
复杂度: 0
定义变量: logTag
使用变量: , __value, __n, __lhs, __rhs, __u, __true_hint, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:792:5
复杂度: 1
定义变量: 
使用变量: __i
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:793:9
复杂度: 0
定义变量: logTag
使用变量: , __x, __a, __i, __true_hint, __s, eq, __mem, __tm, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:796:5
复杂度: 0
定义变量: 
使用变量: , NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleClearProcessByToken
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:799:21
复杂度: 0
定义变量: 
使用变量: __b, __is_constant_evaluated, __builtin_unreachable, memory_order_acquire
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int32_t AmsMgrStub::HandleClearProcessByToken(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    ClearProcessByToken(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:802:33
复杂度: 0
定义变量: 
使用变量: __x, _S_minimum, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:804:5
复杂度: 0
定义变量: 
使用变量: , __len, __m, __true_hint, __w, __state, operator&, __cs, __memory_order_mask, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleIsMemorySizeSufficent
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:807:21
复杂度: 1
定义变量: 
使用变量: , __b, __is_constant_evaluated, __builtin_unreachable, memory_order_consume, __atomic_store_n
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleIsMemorySizeSufficent(MessageParcel &data, MessageParcel &reply)
{
    auto result = IsMemorySizeSufficent();
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:810:5
复杂度: 1
定义变量: 
使用变量: __n, __i
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:811:9
复杂度: 0
定义变量: __pos, digits10, logTag
使用变量: , __x, __n, __y, __pair, __c, __true_hint, __s1, __cur, __mutex, __gthread_mutex_lock, __tmperr, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:814:5
复杂度: 0
定义变量: __size
使用变量: __state, __new_finish, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleAttachedToStatusBar
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:817:21
复杂度: 0
定义变量: 
使用变量: , __b, __is_constant_evaluated, __builtin_unreachable, memory_order_acq_rel, memory_order_release
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleAttachedToStatusBar(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    AttachedToStatusBar(token);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:820:33
复杂度: 0
定义变量: 
使用变量: __len, __m, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:822:5
复杂度: 0
定义变量: 
使用变量: __v, __size, size, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleBlockProcessCacheByPids
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:825:21
复杂度: 2
定义变量: 
使用变量: , __b, __is_constant_evaluated, __builtin_unreachable, memory_order_acq_rel, memory_order_release
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleBlockProcessCacheByPids(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto size = data.ReadUint32();
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size.");
        return ERR_INVALID_VALUE;
    }
    std::vector<int32_t> pids;
    for (uint32_t i = 0; i < size; i++) {
        pids.emplace_back(data.ReadInt32());
    }

    BlockProcessCacheByPids(pids);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:829:5
复杂度: 1
定义变量: 
使用变量: __beg
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (size == 0 || size > MAX_KILL_PROCESS_PID_COUNT) {
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:830:9
复杂度: 0
定义变量: has_quiet_NaN, logTag
使用变量: , __n, __pair, __len, _Valid, __s1, __s2, __new_start, __tmperr, other, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Invalid size.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:839:5
复杂度: 0
定义变量: __uppercase
使用变量: __pos, __size, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleIsKilledForUpgradeWeb
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:842:21
复杂度: 2
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __is_valid_cmpexch_failure_order, __m2
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleIsKilledForUpgradeWeb(MessageParcel &data, MessageParcel &reply)
{
    TAG_LOGD(AAFwkTag::APPMGR, "called");
    auto bundleName = data.ReadString();
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

    auto result = IsKilledForUpgradeWeb(bundleName);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:844:5
复杂度: 0
定义变量: __start, logTag
使用变量: , __value, __v, __first, __last, __c, __buf, __lit, __case_offset, __ampm, memory_order_seq_cst, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
    TAG_LOGD(AAFwkTag::APPMGR, "called");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:846:5
复杂度: 1
定义变量: 
使用变量: __beg
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (bundleName.empty()) {
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:847:9
复杂度: 0
定义变量: is_iec559, logTag
使用变量: , __v, __c, eof, npos, __start, __io, __tmperr, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Bundle name is empty.");

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:852:5
复杂度: 1
定义变量: 
使用变量: , __tp, __beg
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:853:9
复杂度: 0
定义变量: __ampm_format, round_style, logTag
使用变量: __x, __args, pthread_cond_broadcast, __cond, round_toward_zero, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:856:5
复杂度: 0
定义变量: 
使用变量: , __i, __pos, __word, __ampm_format, __tm, __atomic_compare_exchange_n, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleCleanAbilityByUserRequest
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:859:21
复杂度: 1
定义变量: 
使用变量: , __r, __is_constant_evaluated, __builtin_unreachable, __is_valid_cmpexch_failure_order, __m2, __throw_system_error
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
ErrCode AmsMgrStub::HandleCleanAbilityByUserRequest(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    auto result = CleanAbilityByUserRequest(token);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "fail to write the result.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:862:33
复杂度: 0
定义变量: 
使用变量: __end, __beg, __io, __tmperr, args, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:864:5
复杂度: 1
定义变量: 
使用变量: __str, res, ptr
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "fail to write the result.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:865:9
复杂度: 0
定义变量: logTag
使用变量: , __t, __x, __n, __str, __mutex, __cond, pthread_cond_wait, ptr, object, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "fail to write the result.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:868:5
复杂度: 0
定义变量: 
使用变量: __m1, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleIsProcessContainsOnlyUIAbility
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:871:21
复杂度: 1
定义变量: 
使用变量: __r, __is_constant_evaluated, __builtin_unreachable, __is_valid_cmpexch_failure_order, __m2
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleIsProcessContainsOnlyUIAbility(MessageParcel &data, MessageParcel &reply)
{
    auto pid = data.ReadUint32();

    auto result = IsProcessContainsOnlyUIAbility(pid);
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result in HandleIsProcessContainsOnlyUIAbility.");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:876:5
复杂度: 1
定义变量: 
使用变量: __i, __cs
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(result)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result in HandleIsProcessContainsOnlyUIAbility.");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:877:9
复杂度: 0
定义变量: __len, __lc, radix, logTag
使用变量: , __x, __first, __last, __n1, __n2, __word, __loc, __uc, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result in HandleIsProcessContainsOnlyUIAbility.");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:880:5
复杂度: 0
定义变量: 
使用变量: __r, __p, __cs, __ctype, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleIsProcessAttached
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:883:21
复杂度: 1
定义变量: 
使用变量: __is_constant_evaluated, __builtin_unreachable, __c1, __is_valid_cmpexch_failure_order, __m2
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleIsProcessAttached(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    sptr<IRemoteObject> token = data.ReadRemoteObject();
    auto isAttached = IsProcessAttached(token);
    if (!reply.WriteBool(isAttached)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadRemoteObject
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:886:33
复杂度: 0
定义变量: 
使用变量: __end, __mem, data
关键位置: 否
日志评分: 0
代码:
    sptr<IRemoteObject> token = data.ReadRemoteObject();

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:888:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(isAttached)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:889:9
复杂度: 0
定义变量: __next, __dec, logTag
使用变量: , __b, __p, __first, __p1, __p2, oct, __basefield, __atomic_compare_exchange_n, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:892:5
复杂度: 0
定义变量: __node_gen
使用变量: , __first, __last, __binary_pred, _MoveValues, __capacity, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleIsCallerKilling
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:895:21
复杂度: 1
定义变量: 
使用变量: __r, __cs
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t AmsMgrStub::HandleIsCallerKilling(MessageParcel &data, MessageParcel &reply)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto callerKey = data.ReadString();
    auto isCallerKilling = IsCallerKilling(callerKey);
    if (!reply.WriteBool(isCallerKilling)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:900:5
复杂度: 1
定义变量: 
使用变量: other
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteBool(isCallerKilling)) {
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:901:9
复杂度: 0
定义变量: logTag
使用变量: __v, __n, __hint, __node_gen, __h, __data, __state, APPMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::APPMGR, "Fail to write result");

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:904:5
复杂度: 0
定义变量: 
使用变量: __result, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleSendAppSpawnUninstallDebugHapMsg
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:907:21
复杂度: 0
定义变量: 
使用变量: __str
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
ErrCode AmsMgrStub::HandleSendAppSpawnUninstallDebugHapMsg(MessageParcel &data)
{
    HITRACE_METER(HITRACE_TAG_APP);
    auto userId = data.ReadInt32();
    SendAppSpawnUninstallDebugHapMsg(userId);
    return NO_ERROR;
}

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ams_mgr_stub.cpp:912:5
复杂度: 0
定义变量: __r
使用变量: __first, __builtin_memcpy, other, NO_ERROR
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
    return NO_ERROR;

--------------------------------------------------------------------------------
