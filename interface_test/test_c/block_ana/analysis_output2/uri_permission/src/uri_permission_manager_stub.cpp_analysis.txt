代码块类型: Method Declaration
块名称: OnRemoteRequest
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:26:31
复杂度: 10
定义变量: 
使用变量: __out
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int UriPermissionManagerStub::OnRemoteRequest(
    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)
{
    if (data.ReadInterfaceToken() != IUriPermissionManager::GetDescriptor()) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "InterfaceToken invalid");
        return ERR_INVALID_VALUE;
    }
    ErrCode errCode = ERR_OK;
    switch (code) {
        case UriPermMgrCmd::ON_GRANT_URI_PERMISSION : {
            return HandleGrantUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_BATCH_GRANT_URI_PERMISSION : {
            return HandleBatchGrantUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_GRANT_URI_PERMISSION_PRIVILEGED : {
            return HandleGrantUriPermissionPrivileged(data, reply);
        }
        case UriPermMgrCmd::ON_REVOKE_ALL_URI_PERMISSION : {
            return HandleRevokeAllUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_REVOKE_URI_PERMISSION_MANUALLY : {
            return HandleRevokeUriPermissionManually(data, reply);
        }
        case UriPermMgrCmd::ON_VERIFY_URI_PERMISSION : {
            return HandleVerifyUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_CHECK_URI_AUTHORIZATION : {
            return HandleCheckUriAuthorization(data, reply);
        }
        case UriPermMgrCmd::ON_CLEAR_PERMISSION_TOKEN_BY_MAP : {
            return HandleClearPermissionTokenByMap(data, reply);
        }
#ifdef ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER
        case UriPermMgrCmd::ON_ACTIVE : {
            return HandleActive(data, reply);
        }
#endif // ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }
    return errCode;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:29:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (data.ReadInterfaceToken() != IUriPermissionManager::GetDescriptor()) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "InterfaceToken invalid");
        return ERR_INVALID_VALUE;
    }

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: ReadInterfaceToken
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:29:9
复杂度: 0
定义变量: __libc_single_threaded
使用变量: data
关键位置: 否
日志评分: 0
代码:
    if (data.ReadInterfaceToken() != IUriPermissionManager::GetDescriptor()) {

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: GetDescriptor
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:29:38
复杂度: 0
定义变量: 
使用变量: GetDescriptor
关键位置: 否
日志评分: 0
代码:
    if (data.ReadInterfaceToken() != IUriPermissionManager::GetDescriptor()) {

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:30:9
复杂度: 0
定义变量: logTag
使用变量: URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "InterfaceToken invalid");

--------------------------------------------------------------------------------
代码块类型: Switch Block
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:34:5
复杂度: 9
定义变量: metaDescriptor_
使用变量: __num, __loc, metaDescriptor_
关键位置: 是
日志评分: -2
  - Switch Block 缺少日志: 得分 -2
代码:
    switch (code) {
        case UriPermMgrCmd::ON_GRANT_URI_PERMISSION : {
            return HandleGrantUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_BATCH_GRANT_URI_PERMISSION : {
            return HandleBatchGrantUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_GRANT_URI_PERMISSION_PRIVILEGED : {
            return HandleGrantUriPermissionPrivileged(data, reply);
        }
        case UriPermMgrCmd::ON_REVOKE_ALL_URI_PERMISSION : {
            return HandleRevokeAllUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_REVOKE_URI_PERMISSION_MANUALLY : {
            return HandleRevokeUriPermissionManually(data, reply);
        }
        case UriPermMgrCmd::ON_VERIFY_URI_PERMISSION : {
            return HandleVerifyUriPermission(data, reply);
        }
        case UriPermMgrCmd::ON_CHECK_URI_AUTHORIZATION : {
            return HandleCheckUriAuthorization(data, reply);
        }
        case UriPermMgrCmd::ON_CLEAR_PERMISSION_TOKEN_BY_MAP : {
            return HandleClearPermissionTokenByMap(data, reply);
        }
#ifdef ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER
        case UriPermMgrCmd::ON_ACTIVE : {
            return HandleActive(data, reply);
        }
#endif // ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:36:13
复杂度: 0
定义变量: 
使用变量: data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleGrantUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleGrantUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:36:20
复杂度: 0
定义变量: 
使用变量: data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleGrantUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:39:13
复杂度: 0
定义变量: 
使用变量: data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleBatchGrantUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleBatchGrantUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:39:20
复杂度: 0
定义变量: 
使用变量: data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleBatchGrantUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:42:13
复杂度: 0
定义变量: 
使用变量: _Intl, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleGrantUriPermissionPrivileged(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleGrantUriPermissionPrivileged
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:42:20
复杂度: 0
定义变量: 
使用变量: _Intl, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleGrantUriPermissionPrivileged(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:45:13
复杂度: 0
定义变量: __i
使用变量: , __it1, __it2, __refs, _S_get_c_locale, _Intl, serialInvokeFlag, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleRevokeAllUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleRevokeAllUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:45:20
复杂度: 0
定义变量: 
使用变量: , __it2, _S_get_c_locale, _Intl, serialInvokeFlag, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleRevokeAllUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:48:13
复杂度: 0
定义变量: __ret
使用变量: data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleRevokeUriPermissionManually(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleRevokeUriPermissionManually
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:48:20
复杂度: 0
定义变量: 
使用变量: data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleRevokeUriPermissionManually(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:51:13
复杂度: 0
定义变量: __put, alpha, __buf_len
使用变量: , __n, __s, __out, __low, _ISalpha, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleVerifyUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleVerifyUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:51:20
复杂度: 0
定义变量: __put, alpha, __buf_len
使用变量: , __n, __s, __out, __low, _ISalpha, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleVerifyUriPermission(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:54:13
复杂度: 0
定义变量: npos, __b3, space, __remaining
使用变量: , __ptr, __a, __n, __s, __ret, __base, __b2, _ISspace, _S_get_c_name, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleCheckUriAuthorization(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleCheckUriAuthorization
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:54:20
复杂度: 0
定义变量: npos, __b3, space, __remaining
使用变量: __ptr, __a, __n, __s, __ret, __base, __b2, _ISspace, _S_get_c_name, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleCheckUriAuthorization(data, reply);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:57:13
复杂度: 0
定义变量: __elem0, cntrl
使用变量: , __i, __last, __len, __str, _Cache, PTHREAD_MUTEX_ERRORCHECK_NP, _IScntrl, current_exception, data, reply
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
            return HandleClearPermissionTokenByMap(data, reply);

--------------------------------------------------------------------------------
代码块类型: Function Call
块名称: HandleClearPermissionTokenByMap
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:57:20
复杂度: 0
定义变量: __elem0, cntrl
使用变量: , __len, __str, _Cache, PTHREAD_MUTEX_ERRORCHECK_NP, _IScntrl, current_exception, data, reply
关键位置: 否
日志评分: 0
代码:
            return HandleClearPermissionTokenByMap(data, reply);

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleRevokeAllUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:70:31
复杂度: 0
定义变量: 
使用变量: , __is_constant_evaluated, __builtin_unreachable, __throw_length_error, rethrow_exception
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int UriPermissionManagerStub::HandleRevokeAllUriPermission(MessageParcel &data, MessageParcel &reply)
{
    auto tokenId = data.ReadUint32();
    int result = RevokeAllUriPermissions(tokenId);
    reply.WriteInt32(result);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleGrantUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:78:31
复杂度: 1
定义变量: 
使用变量: , __location, __ret
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int UriPermissionManagerStub::HandleGrantUriPermission(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<Uri> uri(data.ReadParcelable<Uri>());
    if (!uri) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
        return ERR_DEAD_OBJECT;
    }
    auto flag = data.ReadUint32();
    auto targetBundleName = data.ReadString();
    auto appIndex = data.ReadInt32();
    auto initiatorTokenId = data.ReadUint32();
    int result = GrantUriPermission(*uri, flag, targetBundleName, appIndex, initiatorTokenId);
    reply.WriteInt32(result);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:81:5
复杂度: 1
定义变量: 
使用变量: __tmp
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!uri) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
        return ERR_DEAD_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:82:9
复杂度: 0
定义变量: __min, __ret, __grouping, RPC_QOS_MIN_BW, logTag
使用变量: , __p, __first, __result, __m, __s, __str, __endptr, __child, __parent, __ISwalnum, _S_get_c_name, error, DEFAULT, URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleBatchGrantUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:94:31
复杂度: 3
定义变量: 
使用变量: , __first, __len, __u, __c1, __throw_system_error
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int UriPermissionManagerStub::HandleBatchGrantUriPermission(MessageParcel &data, MessageParcel &reply)
{
    auto size = data.ReadUint32();
    if (size == 0 || size > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }
    std::vector<Uri> uriVec;
    for (uint32_t i = 0; i < size; i++) {
        std::unique_ptr<Uri> uri(data.ReadParcelable<Uri>());
        if (!uri) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
            return ERR_DEAD_OBJECT;
        }
        uriVec.emplace_back(*uri);
    }
    auto flag = data.ReadUint32();
    auto targetBundleName = data.ReadString();
    auto appIndex = data.ReadInt32();
    auto initiatorTokenId = data.ReadUint32();
    int result = GrantUriPermission(uriVec, flag, targetBundleName, appIndex, initiatorTokenId);
    reply.WriteInt32(result);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:97:5
复杂度: 1
定义变量: 
使用变量: 
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (size == 0 || size > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:98:9
复杂度: 0
定义变量: __c, none, logTag
使用变量: , __it, __v, __x, __a, __n, __first, __val, __comp, __s, __out, __left, __a1, __b1, __is_single_threaded, __rtime, URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:99:9
复杂度: 0
定义变量: nothrow, __tmp_capacity, ctype, __g, is_always_lock_free
使用变量: , __b, __n, __i, __val, __result, __c, __s, __out, __w, __mp, __mem, __exchange_and_add_single, __truename, __outchars, _Base, ERR_URI_LIST_OUT_OF_RANGE
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return ERR_URI_LIST_OUT_OF_RANGE;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleGrantUriPermissionPrivileged
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:119:35
复杂度: 3
定义变量: 
使用变量: , __ptr, __is_constant_evaluated, __builtin_unreachable, __u
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t UriPermissionManagerStub::HandleGrantUriPermissionPrivileged(MessageParcel &data, MessageParcel &reply)
{
    auto size = data.ReadUint32();
    if (size == 0 || size > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }
    std::vector<Uri> uriVec;
    for (uint32_t i = 0; i < size; i++) {
        std::unique_ptr<Uri> uri(data.ReadParcelable<Uri>());
        if (!uri) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
            return ERR_DEAD_OBJECT;
        }
        uriVec.emplace_back(*uri);
    }
    auto flag = data.ReadUint32();
    auto targetBundleName = data.ReadString();
    auto appIndex = data.ReadInt32();
    auto initiatorTokenId = data.ReadUint32();
    auto hideSensitiveType = data.ReadInt32();
    int32_t result = GrantUriPermissionPrivileged(uriVec, flag, targetBundleName, appIndex,
        initiatorTokenId, hideSensitiveType);
    reply.WriteInt32(result);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:122:5
复杂度: 1
定义变量: 
使用变量: __x, __size
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (size == 0 || size > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:123:9
复杂度: 0
定义变量: __it, __lo, logTag
使用变量: , __x, __tmp, __first, __c, __args, __pos, __tmp_capacity, __lo1, __lo2, _Base, URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:124:9
复杂度: 0
定义变量: __ct, __stored_locally, __hi
使用变量: , __ptr, __tmp, __n, __first, __comp, __from, __len, __alloc, __position, __size, __state, __from_end, __ws, __grouping, memory_order_seq_cst, __default_lock_policy, offset, tagNames, ERR_URI_LIST_OUT_OF_RANGE
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return ERR_URI_LIST_OUT_OF_RANGE;

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleRevokeUriPermissionManually
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:146:31
复杂度: 1
定义变量: 
使用变量: __builtin_operator_delete, __pos, __nh, __ne_ptr
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int UriPermissionManagerStub::HandleRevokeUriPermissionManually(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<Uri> uri(data.ReadParcelable<Uri>());
    if (!uri) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
        return ERR_DEAD_OBJECT;
    }
    auto bundleName = data.ReadString();
    auto appIndex = data.ReadInt32();
    int result = RevokeUriPermissionManually(*uri, bundleName, appIndex);
    reply.WriteInt32(result);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:149:5
复杂度: 1
定义变量: 
使用变量: __capacity, __throw_concurrence_lock_error
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!uri) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
        return ERR_DEAD_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:150:9
复杂度: 0
定义变量: __lit, __x0y1, tagNames, logTag
使用变量: , __first, __last, __first1, __first2, __last1, __last2, __cont, __i1, __i2, __lc, __m1, _Lp, __x0, __y1, resource_deadlock_would_occur, URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleVerifyUriPermission
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:160:31
复杂度: 1
定义变量: 
使用变量: __pos
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int UriPermissionManagerStub::HandleVerifyUriPermission(MessageParcel &data, MessageParcel &reply)
{
    std::unique_ptr<Uri> uri(data.ReadParcelable<Uri>());
    if (!uri) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
        return ERR_DEAD_OBJECT;
    }
    auto flag = data.ReadUint32();
    auto tokenId = data.ReadUint32();
    bool result = VerifyUriPermission(*uri, flag, tokenId);
    reply.WriteBool(result);
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:163:5
复杂度: 1
定义变量: __n, __last_pos
使用变量: , __throw_system_error
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!uri) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");
        return ERR_DEAD_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:164:9
复杂度: 0
定义变量: __is_signed, offset, logTag
使用变量: , __x, __c, __position, __s, eq_int_type, eof, to_int_type, __testeof, memory_order_seq_cst, tag, GetOffset, WANTAGENT, URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "read uri failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleCheckUriAuthorization
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:174:35
复杂度: 5
定义变量: 
使用变量: , __i, __is_constant_evaluated, __builtin_unreachable, __res, __position, __old
关键位置: 是
日志评分: 5
  - Method Declaration 日志存在: 得分 5
代码:
int32_t UriPermissionManagerStub::HandleCheckUriAuthorization(MessageParcel &data, MessageParcel &reply)
{
    auto size = data.ReadUint32();
    if (size == 0 || size > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }
    std::vector<std::string> uriVec;
    for (uint32_t i = 0; i < size; i++) {
        auto uri = data.ReadString();
        uriVec.emplace_back(uri);
    }
    auto flag = data.ReadUint32();
    auto tokenId = data.ReadUint32();
    auto result = CheckUriAuthorization(uriVec, flag, tokenId);
    if (!reply.WriteUint32(result.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return ERR_DEAD_OBJECT;
    }
    for (auto res: result) {
        if (!reply.WriteBool(res)) {
            TAG_LOGE(AAFwkTag::URIPERMMGR, "Write res failed");
            return ERR_DEAD_OBJECT;
        }
    }
    return ERR_OK;
}

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:177:5
复杂度: 1
定义变量: 
使用变量: __i, __p, __throw_system_error
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (size == 0 || size > MAX_URI_COUNT) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);
        return ERR_URI_LIST_OUT_OF_RANGE;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:178:9
复杂度: 0
定义变量: __value, __i, __m, __ns, logTag
使用变量: , __r, __n, __i, __p, __last, __last2, __args, __l, __position, __pos, __s, __u, __arg, __str, __base, __builtin_strcmp, __cat, operator^, __testvalid, __q1x, __d0, __atime, operation_not_permitted, offset, tagNames, URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "uriVec empty or exceed maxSize %{public}d", MAX_URI_COUNT);

--------------------------------------------------------------------------------
代码块类型: Return Statement
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:179:9
复杂度: 0
定义变量: __r1y
使用变量: __first, __lhs, __first1, __pos, _Base, _Digs, ERR_URI_LIST_OUT_OF_RANGE
关键位置: 是
日志评分: -2
  - Return Statement 缺少日志: 得分 -2
代码:
        return ERR_URI_LIST_OUT_OF_RANGE;

--------------------------------------------------------------------------------
代码块类型: Conditional Block (if)
块名称: 
上下文链: IF_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:189:5
复杂度: 1
定义变量: 
使用变量: __xtrc
关键位置: 是
日志评分: 3
  - Conditional Block (if) 日志存在: 得分 3
代码:
    if (!reply.WriteUint32(result.size())) {
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");
        return ERR_DEAD_OBJECT;
    }

--------------------------------------------------------------------------------
代码块类型: Loop Block (do-while)
块名称: 
上下文链: IF_STMT[] → DO_STMT[]
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:190:9
复杂度: 0
定义变量: __two, __r0y, logTag
使用变量: , __r, __x, __i, __p, __y, __c, __pos, __vec, __other, __hi, __lo, __lo2, __hi2, __found_mantissa, __mandatory_sign, memory_order_seq_cst, _Nd, __n0, __r0x, URIPERMMGR
关键位置: 是
日志评分: 2
  - Loop Block (do-while) 日志存在: 得分 2
代码:
        TAG_LOGE(AAFwkTag::URIPERMMGR, "Write uriVec size failed");

--------------------------------------------------------------------------------
代码块类型: Method Declaration
块名称: HandleClearPermissionTokenByMap
上下文链: 
位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/uri_permission/src/uri_permission_manager_stub.cpp:202:31
复杂度: 0
定义变量: 
使用变量: , __guard
关键位置: 是
日志评分: -2
  - Method Declaration 缺少日志: 得分 -2
代码:
int UriPermissionManagerStub::HandleClearPermissionTokenByMap(MessageParcel &data, MessageParcel &reply)
{
    auto tokenId = data.ReadUint32();
    int result = ClearPermissionTokenByMap(tokenId);
    reply.WriteInt32(result);
    return ERR_OK;
}

--------------------------------------------------------------------------------
