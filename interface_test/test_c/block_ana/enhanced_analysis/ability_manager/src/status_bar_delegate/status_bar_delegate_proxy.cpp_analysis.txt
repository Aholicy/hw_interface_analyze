关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/ability_manager/src/status_bar_delegate/status_bar_delegate_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {



StatusBarDelegateProxy::StatusBarDelegateProxy(const sptr<IRemoteObject> &impl)

    : IRemoteProxy<IStatusBarDelegate>(impl) {}



int32_t StatusBarDelegateProxy::CheckIfStatusBarItemExists(uint32_t accessTokenId, bool& isExist)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option;

    if (!data.WriteInterfaceToken(IStatusBarDelegate::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write token failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteUint32(accessTokenId)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "accessTokenId write failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    auto ret = SendRequest(StatusBarDelegateCmd::CHECK_IF_STATUS_BAR_ITEM_EXISTS, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "Send request error: %{public}d", ret);

        return ret;

    }

    ret = reply.ReadInt32();

    isExist = reply.ReadBool();

    return ret;

}



int32_t StatusBarDelegateProxy::AttachPidToStatusBarItem(uint32_t accessTokenId, int32_t pid,

    const std::string &instanceKey)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option;

    if (!data.WriteInterfaceToken(IStatusBarDelegate::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write token failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteUint32(accessTokenId)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write accessTokenId failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteInt32(pid)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write pid failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteString(instanceKey)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "instanceKey write failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    auto ret = SendRequest(StatusBarDelegateCmd::ATTACH_PID_TO_STATUS_BAR_ITEM, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "Send request error: %{public}d", ret);

        return ret;

    }

    return reply.ReadInt32();

}



int32_t StatusBarDelegateProxy::SendRequest(

    StatusBarDelegateCmd code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "null remote");

        return ERR_NULL_OBJECT;

    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);

}

} // namespace AbilityRuntime

} // namespace OHOS
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/ability_manager/src/status_bar_delegate/status_bar_delegate_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {



StatusBarDelegateProxy::StatusBarDelegateProxy(const sptr<IRemoteObject> &impl)

    : IRemoteProxy<IStatusBarDelegate>(impl) {}



int32_t StatusBarDelegateProxy::CheckIfStatusBarItemExists(uint32_t accessTokenId, bool& isExist)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option;

    if (!data.WriteInterfaceToken(IStatusBarDelegate::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write token failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteUint32(accessTokenId)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "accessTokenId write failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    auto ret = SendRequest(StatusBarDelegateCmd::CHECK_IF_STATUS_BAR_ITEM_EXISTS, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "Send request error: %{public}d", ret);

        return ret;

    }

    ret = reply.ReadInt32();

    isExist = reply.ReadBool();

    return ret;

}



int32_t StatusBarDelegateProxy::AttachPidToStatusBarItem(uint32_t accessTokenId, int32_t pid,

    const std::string &instanceKey)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option;

    if (!data.WriteInterfaceToken(IStatusBarDelegate::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write token failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteUint32(accessTokenId)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write accessTokenId failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteInt32(pid)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write pid failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!data.WriteString(instanceKey)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "instanceKey write failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    auto ret = SendRequest(StatusBarDelegateCmd::ATTACH_PID_TO_STATUS_BAR_ITEM, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "Send request error: %{public}d", ret);

        return ret;

    }

    return reply.ReadInt32();

}



int32_t StatusBarDelegateProxy::SendRequest(

    StatusBarDelegateCmd code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "null remote");

        return ERR_NULL_OBJECT;

    }

    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);

}

} // namespace AbilityRuntime

================================================================================
