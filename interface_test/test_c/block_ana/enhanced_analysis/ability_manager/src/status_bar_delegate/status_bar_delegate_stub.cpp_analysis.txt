关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/ability_manager/src/status_bar_delegate/status_bar_delegate_stub.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {

StatusBarDelegateStub::StatusBarDelegateStub() {}



int32_t StatusBarDelegateStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    std::u16string descriptor = StatusBarDelegateStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "invalid descriptor");

        return ERR_INVALID_STATE;

    }



    if (code < static_cast<uint32_t>(StatusBarDelegateCmd::END)) {

        switch (code) {

            case static_cast<uint32_t>(StatusBarDelegateCmd::CHECK_IF_STATUS_BAR_ITEM_EXISTS):

                return HandleCheckIfStatusBarItemExists(data, reply);

            case static_cast<uint32_t>(StatusBarDelegateCmd::ATTACH_PID_TO_STATUS_BAR_ITEM):

                return HandleAttachPidToStatusBarItem(data, reply);

        }

    }

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int32_t StatusBarDelegateStub::HandleCheckIfStatusBarItemExists(MessageParcel &data, MessageParcel &reply)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    uint32_t accessTokenId = data.ReadUint32();

    bool isExist = false;

    auto result = CheckIfStatusBarItemExists(accessTokenId, isExist);

    if (!reply.WriteBool(result)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write result failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!reply.WriteBool(isExist)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write isExist failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    return NO_ERROR;

}



int32_t StatusBarDelegateStub::HandleAttachPidToStatusBarItem(MessageParcel &data, MessageParcel &reply)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    uint32_t accessTokenId = data.ReadUint32();

    int32_t pid = data.ReadInt32();

    auto instanceKey = data.ReadString();

    auto result = AttachPidToStatusBarItem(accessTokenId, pid, instanceKey);

    if (!reply.WriteInt32(result)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write result failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    return NO_ERROR;

}

} // namespace AbilityRuntime

} // namespace OHOS
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/ability_manager/src/status_bar_delegate/status_bar_delegate_stub.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {

StatusBarDelegateStub::StatusBarDelegateStub() {}



int32_t StatusBarDelegateStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    std::u16string descriptor = StatusBarDelegateStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "invalid descriptor");

        return ERR_INVALID_STATE;

    }



    if (code < static_cast<uint32_t>(StatusBarDelegateCmd::END)) {

        switch (code) {

            case static_cast<uint32_t>(StatusBarDelegateCmd::CHECK_IF_STATUS_BAR_ITEM_EXISTS):

                return HandleCheckIfStatusBarItemExists(data, reply);

            case static_cast<uint32_t>(StatusBarDelegateCmd::ATTACH_PID_TO_STATUS_BAR_ITEM):

                return HandleAttachPidToStatusBarItem(data, reply);

        }

    }

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int32_t StatusBarDelegateStub::HandleCheckIfStatusBarItemExists(MessageParcel &data, MessageParcel &reply)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    uint32_t accessTokenId = data.ReadUint32();

    bool isExist = false;

    auto result = CheckIfStatusBarItemExists(accessTokenId, isExist);

    if (!reply.WriteBool(result)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write result failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    if (!reply.WriteBool(isExist)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write isExist failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    return NO_ERROR;

}



int32_t StatusBarDelegateStub::HandleAttachPidToStatusBarItem(MessageParcel &data, MessageParcel &reply)

{

    TAG_LOGI(AAFwkTag::ABILITYMGR, "call");

    uint32_t accessTokenId = data.ReadUint32();

    int32_t pid = data.ReadInt32();

    auto instanceKey = data.ReadString();

    auto result = AttachPidToStatusBarItem(accessTokenId, pid, instanceKey);

    if (!reply.WriteInt32(result)) {

        TAG_LOGE(AAFwkTag::ABILITYMGR, "write result failed");

        return AAFwk::ERR_NATIVE_IPC_PARCEL_FAILED;

    }

    return NO_ERROR;

}

} // namespace AbilityRuntime

================================================================================
