关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/extension_manager/src/extension_manager_proxy.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS::AAFwk {

bool ExtensionManagerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(ExtensionManagerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::EXTMGR, "write token failed");

        return false;

    }

    return true;

}



int ExtensionManagerProxy::ConnectAbilityCommon(const Want &want, const sptr<IRemoteObject> &connect,

    const sptr<IRemoteObject> &callerToken, AppExecFwk::ExtensionAbilityType extensionType, int32_t userId,

    bool isQueryExtensionOnly)

{

    if (connect == nullptr) {

        TAG_LOGE(AAFwkTag::EXTMGR, "null connect");

        return ERR_INVALID_VALUE;

    }



    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        return INNER_ERR;

    }

    if (!data.WriteParcelable(&want)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "want write failed");

        return ERR_INVALID_VALUE;

    }

    if (!data.WriteBool(true) || !data.WriteRemoteObject(connect)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "flag or connect write failed");

        return ERR_INVALID_VALUE;

    }

    if (callerToken) {

        if (!data.WriteBool(true) || !data.WriteRemoteObject(callerToken)) {

            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");

            return ERR_INVALID_VALUE;

        }

    } else {

        if (!data.WriteBool(false)) {

            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");

            return ERR_INVALID_VALUE;

        }

    }

    if (!data.WriteInt32(userId)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "userId write failed.");

        return INNER_ERR;

    }

    if (!data.WriteInt32(static_cast<int32_t>(extensionType))) {

        TAG_LOGE(AAFwkTag::EXTMGR, "extensionType write failed.");

        return INNER_ERR;

    }

    if (!data.WriteBool(isQueryExtensionOnly)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "isQueryExtensionOnly write failed");

        return INNER_ERR;

    }



    MessageParcel reply;

    MessageOption option;

    int error = SendRequest(AbilityManagerInterfaceCode::CONNECT_ABILITY_WITH_TYPE, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);

        return error;

    }

    return reply.ReadInt32();

}



int ExtensionManagerProxy::DisconnectAbility(const sptr<IRemoteObject> &connect)

{

    if (connect == nullptr) {

        TAG_LOGE(AAFwkTag::EXTMGR, "disconnect ability failed");

        return ERR_INVALID_VALUE;

    }



    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        return INNER_ERR;

    }

    if (!data.WriteRemoteObject(connect)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "connect write failed");

        return ERR_INVALID_VALUE;

    }



    MessageParcel reply;

    MessageOption option;

    auto error = SendRequest(AbilityManagerInterfaceCode::DISCONNECT_ABILITY, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);

        return error;

    }

    return reply.ReadInt32();

}



ErrCode ExtensionManagerProxy::SendRequest(AbilityManagerInterfaceCode code, MessageParcel &data,

    MessageParcel &reply, MessageOption& option)

{

    auto remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::EXTMGR, "null remote");

        return INNER_ERR;

    }



    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);

}

}  // namespace OHOS::AAFwk

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/extension_manager/src/extension_manager_proxy.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS::AAFwk {

bool ExtensionManagerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(ExtensionManagerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::EXTMGR, "write token failed");

        return false;

    }

    return true;

}



int ExtensionManagerProxy::ConnectAbilityCommon(const Want &want, const sptr<IRemoteObject> &connect,

    const sptr<IRemoteObject> &callerToken, AppExecFwk::ExtensionAbilityType extensionType, int32_t userId,

    bool isQueryExtensionOnly)

{

    if (connect == nullptr) {

        TAG_LOGE(AAFwkTag::EXTMGR, "null connect");

        return ERR_INVALID_VALUE;

    }



    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        return INNER_ERR;

    }

    if (!data.WriteParcelable(&want)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "want write failed");

        return ERR_INVALID_VALUE;

    }

    if (!data.WriteBool(true) || !data.WriteRemoteObject(connect)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "flag or connect write failed");

        return ERR_INVALID_VALUE;

    }

    if (callerToken) {

        if (!data.WriteBool(true) || !data.WriteRemoteObject(callerToken)) {

            TAG_LOGE(AAFwkTag::EXTMGR, "flag or callerToken write failed");

            return ERR_INVALID_VALUE;

        }

    } else {

        if (!data.WriteBool(false)) {

            TAG_LOGE(AAFwkTag::EXTMGR, "flag write failed");

            return ERR_INVALID_VALUE;

        }

    }

    if (!data.WriteInt32(userId)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "userId write failed.");

        return INNER_ERR;

    }

    if (!data.WriteInt32(static_cast<int32_t>(extensionType))) {

        TAG_LOGE(AAFwkTag::EXTMGR, "extensionType write failed.");

        return INNER_ERR;

    }

    if (!data.WriteBool(isQueryExtensionOnly)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "isQueryExtensionOnly write failed");

        return INNER_ERR;

    }



    MessageParcel reply;

    MessageOption option;

    int error = SendRequest(AbilityManagerInterfaceCode::CONNECT_ABILITY_WITH_TYPE, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);

        return error;

    }

    return reply.ReadInt32();

}



int ExtensionManagerProxy::DisconnectAbility(const sptr<IRemoteObject> &connect)

{

    if (connect == nullptr) {

        TAG_LOGE(AAFwkTag::EXTMGR, "disconnect ability failed");

        return ERR_INVALID_VALUE;

    }



    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        return INNER_ERR;

    }

    if (!data.WriteRemoteObject(connect)) {

        TAG_LOGE(AAFwkTag::EXTMGR, "connect write failed");

        return ERR_INVALID_VALUE;

    }



    MessageParcel reply;

    MessageOption option;

    auto error = SendRequest(AbilityManagerInterfaceCode::DISCONNECT_ABILITY, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::EXTMGR, "Send request error: %{public}d", error);

        return error;

    }

    return reply.ReadInt32();

}



ErrCode ExtensionManagerProxy::SendRequest(AbilityManagerInterfaceCode code, MessageParcel &data,

    MessageParcel &reply, MessageOption& option)

{

    auto remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::EXTMGR, "null remote");

        return INNER_ERR;

    }



    return remote->SendRequest(static_cast<uint32_t>(code), data, reply, option);

}

}  // namespace OHOS::AAFwk

================================================================================
