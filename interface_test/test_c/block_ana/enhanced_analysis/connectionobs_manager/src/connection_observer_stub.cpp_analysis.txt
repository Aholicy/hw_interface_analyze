关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_observer_stub.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {

ConnectionObserverStub::ConnectionObserverStub() {}



int ConnectionObserverStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    std::u16string descriptor = ConnectionObserverStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGI(AAFwkTag::CONNECTION, "invalid descriptor");

        return ERR_INVALID_STATE;

    }

    if (code < IConnectionObserver::CMD_MAX && code >= 0) {

        switch (code) {

            case ON_EXTENSION_CONNECTED:

                return OnExtensionConnectedInner(data, reply);

            case ON_EXTENSION_DISCONNECTED:

                return OnExtensionDisconnectedInner(data, reply);

#ifdef WITH_DLP

            case ON_DLP_ABILITY_OPENED:

                return OnDlpAbilityOpenedInner(data, reply);

            case ON_DLP_ABILITY_CLOSED:

                return OnDlpAbilityClosedInner(data, reply);

#endif // WITH_DLP

        }

    }

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int ConnectionObserverStub::OnExtensionConnectedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<ConnectionData> connectionData(data.ReadParcelable<ConnectionData>());

    if (!connectionData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error connectionData");

        return ERR_INVALID_VALUE;

    }



    OnExtensionConnected(*connectionData);

    return NO_ERROR;

}



int ConnectionObserverStub::OnExtensionDisconnectedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<ConnectionData> connectionData(data.ReadParcelable<ConnectionData>());

    if (!connectionData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error connectionData");

        return ERR_INVALID_VALUE;

    }



    OnExtensionDisconnected(*connectionData);

    return NO_ERROR;

}



#ifdef WITH_DLP

int ConnectionObserverStub::OnDlpAbilityOpenedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<DlpStateData> dlpData(data.ReadParcelable<DlpStateData>());

    if (!dlpData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error dlpData");

        return ERR_INVALID_VALUE;

    }



    OnDlpAbilityOpened(*dlpData);

    return NO_ERROR;

}



int ConnectionObserverStub::OnDlpAbilityClosedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<DlpStateData> dlpData(data.ReadParcelable<DlpStateData>());

    if (!dlpData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error dlpData");

        return ERR_INVALID_VALUE;

    }



    OnDlpAbilityClosed(*dlpData);

    return NO_ERROR;

}

#endif // WITH_DLP

}  // namespace AbilityRuntime

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_observer_stub.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {

ConnectionObserverStub::ConnectionObserverStub() {}



int ConnectionObserverStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    std::u16string descriptor = ConnectionObserverStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGI(AAFwkTag::CONNECTION, "invalid descriptor");

        return ERR_INVALID_STATE;

    }

    if (code < IConnectionObserver::CMD_MAX && code >= 0) {

        switch (code) {

            case ON_EXTENSION_CONNECTED:

                return OnExtensionConnectedInner(data, reply);

            case ON_EXTENSION_DISCONNECTED:

                return OnExtensionDisconnectedInner(data, reply);

#ifdef WITH_DLP

            case ON_DLP_ABILITY_OPENED:

                return OnDlpAbilityOpenedInner(data, reply);

            case ON_DLP_ABILITY_CLOSED:

                return OnDlpAbilityClosedInner(data, reply);

#endif // WITH_DLP

        }

    }

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int ConnectionObserverStub::OnExtensionConnectedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<ConnectionData> connectionData(data.ReadParcelable<ConnectionData>());

    if (!connectionData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error connectionData");

        return ERR_INVALID_VALUE;

    }



    OnExtensionConnected(*connectionData);

    return NO_ERROR;

}



int ConnectionObserverStub::OnExtensionDisconnectedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<ConnectionData> connectionData(data.ReadParcelable<ConnectionData>());

    if (!connectionData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error connectionData");

        return ERR_INVALID_VALUE;

    }



    OnExtensionDisconnected(*connectionData);

    return NO_ERROR;

}



#ifdef WITH_DLP

int ConnectionObserverStub::OnDlpAbilityOpenedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<DlpStateData> dlpData(data.ReadParcelable<DlpStateData>());

    if (!dlpData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error dlpData");

        return ERR_INVALID_VALUE;

    }



    OnDlpAbilityOpened(*dlpData);

    return NO_ERROR;

}



int ConnectionObserverStub::OnDlpAbilityClosedInner(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<DlpStateData> dlpData(data.ReadParcelable<DlpStateData>());

    if (!dlpData) {

        TAG_LOGE(AAFwkTag::CONNECTION, "error dlpData");

        return ERR_INVALID_VALUE;

    }



    OnDlpAbilityClosed(*dlpData);

    return NO_ERROR;

}

#endif // WITH_DLP

}  // namespace AbilityRuntime

================================================================================
