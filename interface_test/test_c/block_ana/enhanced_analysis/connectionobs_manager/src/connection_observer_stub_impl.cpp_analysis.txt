关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_observer_stub_impl.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {

void ConnectionObserverStubImpl::OnExtensionConnected(const ConnectionData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleExtensionConnected(data);

}



void ConnectionObserverStubImpl::OnExtensionDisconnected(const ConnectionData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleExtensionDisconnected(data);

}



#ifdef WITH_DLP

void ConnectionObserverStubImpl::OnDlpAbilityOpened(const DlpStateData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleDlpAbilityOpened(data);

}



void ConnectionObserverStubImpl::OnDlpAbilityClosed(const DlpStateData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleDlpAbilityClosed(data);

}

#endif // WITH_DLP

}  // namespace AbilityRuntime

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_observer_stub_impl.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {

void ConnectionObserverStubImpl::OnExtensionConnected(const ConnectionData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleExtensionConnected(data);

}



void ConnectionObserverStubImpl::OnExtensionDisconnected(const ConnectionData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleExtensionDisconnected(data);

}



#ifdef WITH_DLP

void ConnectionObserverStubImpl::OnDlpAbilityOpened(const DlpStateData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleDlpAbilityOpened(data);

}



void ConnectionObserverStubImpl::OnDlpAbilityClosed(const DlpStateData &data)

{

    auto owner = owner_.lock();

    if (!owner) {

        return;

    }

    owner->HandleDlpAbilityClosed(data);

}

#endif // WITH_DLP

}  // namespace AbilityRuntime

================================================================================
