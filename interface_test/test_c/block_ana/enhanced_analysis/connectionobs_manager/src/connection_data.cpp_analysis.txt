关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_data.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {

using namespace OHOS::AppExecFwk;

bool ConnectionData::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteInt32(extensionPid)) {

        return false;

    }



    if (!parcel.WriteInt32(extensionUid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(extensionBundleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(extensionModuleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(extensionName))) {

        return false;

    }



    if (!parcel.WriteInt32(static_cast<int32_t>(extensionType))) {

        return false;

    }



    if (!parcel.WriteInt32(callerUid)) {

        return false;

    }



    if (!parcel.WriteInt32(callerPid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(callerName))) {

        return false;

    }



    return true;

}



bool ConnectionData::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(extensionPid)) {

        return false;

    }



    if (!parcel.ReadInt32(extensionUid)) {

        return false;

    }



    std::u16string strValue;

    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    extensionBundleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    extensionModuleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    extensionName = Str16ToStr8(strValue);



    int type = 0;

    if (!parcel.ReadInt32(type)) {

        return false;

    }

    extensionType = static_cast<ExtensionAbilityType>(type);



    if (!parcel.ReadInt32(callerUid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");

        return false;

    }



    if (!parcel.ReadInt32(callerPid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");

        return false;

    }



    if (!parcel.ReadString16(strValue)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");

        return false;

    }

    callerName = Str16ToStr8(strValue);



    return true;

}



ConnectionData *ConnectionData::Unmarshalling(Parcel &parcel)

{

    ConnectionData *data = new ConnectionData();

    if (!data->ReadFromParcel(parcel)) {

        delete data;

        data = nullptr;

    }

    return data;

}

}  // namespace AbilityRuntime

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_data.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {

using namespace OHOS::AppExecFwk;

bool ConnectionData::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteInt32(extensionPid)) {

        return false;

    }



    if (!parcel.WriteInt32(extensionUid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(extensionBundleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(extensionModuleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(extensionName))) {

        return false;

    }



    if (!parcel.WriteInt32(static_cast<int32_t>(extensionType))) {

        return false;

    }



    if (!parcel.WriteInt32(callerUid)) {

        return false;

    }



    if (!parcel.WriteInt32(callerPid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(callerName))) {

        return false;

    }



    return true;

}



bool ConnectionData::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(extensionPid)) {

        return false;

    }



    if (!parcel.ReadInt32(extensionUid)) {

        return false;

    }



    std::u16string strValue;

    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    extensionBundleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    extensionModuleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    extensionName = Str16ToStr8(strValue);



    int type = 0;

    if (!parcel.ReadInt32(type)) {

        return false;

    }

    extensionType = static_cast<ExtensionAbilityType>(type);



    if (!parcel.ReadInt32(callerUid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");

        return false;

    }



    if (!parcel.ReadInt32(callerPid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");

        return false;

    }



    if (!parcel.ReadString16(strValue)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");

        return false;

    }

    callerName = Str16ToStr8(strValue);



    return true;

}



ConnectionData *ConnectionData::Unmarshalling(Parcel &parcel)

{

    ConnectionData *data = new ConnectionData();

    if (!data->ReadFromParcel(parcel)) {

        delete data;

        data = nullptr;

    }

    return data;

}

}  // namespace AbilityRuntime

================================================================================
