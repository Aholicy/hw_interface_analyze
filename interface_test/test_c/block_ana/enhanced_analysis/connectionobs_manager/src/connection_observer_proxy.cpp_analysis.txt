关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_observer_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {

void ConnectionObserverProxy::OnExtensionConnected(const ConnectionData& connectionData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGD(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&connectionData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write ConnectionData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_EXTENSION_CONNECTED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}



void ConnectionObserverProxy::OnExtensionDisconnected(const ConnectionData& connectionData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGD(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&connectionData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write ConnectionData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_EXTENSION_DISCONNECTED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}



#ifdef WITH_DLP

void ConnectionObserverProxy::OnDlpAbilityOpened(const DlpStateData& dlpData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGI(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&dlpData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write DlpStateData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_DLP_ABILITY_OPENED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}



void ConnectionObserverProxy::OnDlpAbilityClosed(const DlpStateData& dlpData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGI(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&dlpData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write DlpStateData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_DLP_ABILITY_CLOSED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}

#endif // WITH_DLP



int32_t ConnectionObserverProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::CONNECTION, "null remote");

        return ERR_NULL_OBJECT;

    }



    int32_t ret = remote->SendRequest(code, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "SendRequest failed. code: %{public}d, ret: %{public}d.", code, ret);

        return ret;

    }

    return NO_ERROR;

}

}  // namespace AAFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/connection_observer_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {

void ConnectionObserverProxy::OnExtensionConnected(const ConnectionData& connectionData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGD(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&connectionData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write ConnectionData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_EXTENSION_CONNECTED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}



void ConnectionObserverProxy::OnExtensionDisconnected(const ConnectionData& connectionData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGD(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&connectionData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write ConnectionData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_EXTENSION_DISCONNECTED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}



#ifdef WITH_DLP

void ConnectionObserverProxy::OnDlpAbilityOpened(const DlpStateData& dlpData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGI(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&dlpData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write DlpStateData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_DLP_ABILITY_OPENED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}



void ConnectionObserverProxy::OnDlpAbilityClosed(const DlpStateData& dlpData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);



    TAG_LOGI(AAFwkTag::CONNECTION, "called");

    if (!data.WriteInterfaceToken(IConnectionObserver::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write token failed");

        return;

    }



    if (!data.WriteParcelable(&dlpData)) {

        TAG_LOGE(AAFwkTag::CONNECTION, "Write DlpStateData error");

        return;

    }



    int error = SendTransactCmd(IConnectionObserver::ON_DLP_ABILITY_CLOSED, data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "send request error: %{public}d", error);

        return;

    }

}

#endif // WITH_DLP



int32_t ConnectionObserverProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::CONNECTION, "null remote");

        return ERR_NULL_OBJECT;

    }



    int32_t ret = remote->SendRequest(code, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::CONNECTION, "SendRequest failed. code: %{public}d, ret: %{public}d.", code, ret);

        return ret;

    }

    return NO_ERROR;

}

}  // namespace AAFwk

================================================================================
