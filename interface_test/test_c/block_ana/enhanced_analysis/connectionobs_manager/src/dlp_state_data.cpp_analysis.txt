关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/dlp_state_data.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {

bool DlpStateData::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteInt32(targetPid)) {

        return false;

    }



    if (!parcel.WriteInt32(targetUid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(targetBundleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(targetModuleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(targetAbilityName))) {

        return false;

    }



    if (!parcel.WriteInt32(callerUid)) {

        return false;

    }



    if (!parcel.WriteInt32(callerPid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(callerName))) {

        return false;

    }



    TAG_LOGD(AAFwkTag::CONNECTION, "end");

    return true;

}



bool DlpStateData::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(targetPid)) {

        return false;

    }



    if (!parcel.ReadInt32(targetUid)) {

        return false;

    }



    std::u16string strValue;

    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    targetBundleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    targetModuleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    targetAbilityName = Str16ToStr8(strValue);



    if (!parcel.ReadInt32(callerUid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");

        return false;

    }



    if (!parcel.ReadInt32(callerPid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");

        return false;

    }



    if (!parcel.ReadString16(strValue)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");

        return false;

    }

    callerName = Str16ToStr8(strValue);



    return true;

}



DlpStateData *DlpStateData::Unmarshalling(Parcel &parcel)

{

    DlpStateData *data = new DlpStateData();

    if (!data->ReadFromParcel(parcel)) {

        delete data;

        data = nullptr;

    }

    return data;

}

}  // namespace AbilityRuntime

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/connectionobs_manager/src/dlp_state_data.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {

bool DlpStateData::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteInt32(targetPid)) {

        return false;

    }



    if (!parcel.WriteInt32(targetUid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(targetBundleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(targetModuleName))) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(targetAbilityName))) {

        return false;

    }



    if (!parcel.WriteInt32(callerUid)) {

        return false;

    }



    if (!parcel.WriteInt32(callerPid)) {

        return false;

    }



    if (!parcel.WriteString16(Str8ToStr16(callerName))) {

        return false;

    }



    TAG_LOGD(AAFwkTag::CONNECTION, "end");

    return true;

}



bool DlpStateData::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(targetPid)) {

        return false;

    }



    if (!parcel.ReadInt32(targetUid)) {

        return false;

    }



    std::u16string strValue;

    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    targetBundleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    targetModuleName = Str16ToStr8(strValue);



    if (!parcel.ReadString16(strValue)) {

        return false;

    }

    targetAbilityName = Str16ToStr8(strValue);



    if (!parcel.ReadInt32(callerUid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerUid failed");

        return false;

    }



    if (!parcel.ReadInt32(callerPid)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read callerPid failed");

        return false;

    }



    if (!parcel.ReadString16(strValue)) {

        TAG_LOGW(AAFwkTag::CONNECTION, "read strValue failed");

        return false;

    }

    callerName = Str16ToStr8(strValue);



    return true;

}



DlpStateData *DlpStateData::Unmarshalling(Parcel &parcel)

{

    DlpStateData *data = new DlpStateData();

    if (!data->ReadFromParcel(parcel)) {

        delete data;

        data = nullptr;

    }

    return data;

}

}  // namespace AbilityRuntime

================================================================================
