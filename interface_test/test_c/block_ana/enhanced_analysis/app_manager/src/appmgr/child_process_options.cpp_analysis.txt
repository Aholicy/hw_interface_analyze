关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/child_process_options.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

bool ChildProcessOptions::ReadFromParcel(Parcel &parcel)

{

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);

    return true;

}



ChildProcessOptions *ChildProcessOptions::Unmarshalling(Parcel &parcel)

{

    ChildProcessOptions *obj = new (std::nothrow) ChildProcessOptions();

    if (obj && !obj->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");

        delete obj;

        obj = nullptr;

    }

    return obj;

}



bool ChildProcessOptions::Marshalling(Parcel &parcel) const

{

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);

    return true;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/child_process_options.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

bool ChildProcessOptions::ReadFromParcel(Parcel &parcel)

{

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);

    return true;

}



ChildProcessOptions *ChildProcessOptions::Unmarshalling(Parcel &parcel)

{

    ChildProcessOptions *obj = new (std::nothrow) ChildProcessOptions();

    if (obj && !obj->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");

        delete obj;

        obj = nullptr;

    }

    return obj;

}



bool ChildProcessOptions::Marshalling(Parcel &parcel) const

{

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isolationMode);

    return true;

}

}  // namespace AppExecFwk

================================================================================
