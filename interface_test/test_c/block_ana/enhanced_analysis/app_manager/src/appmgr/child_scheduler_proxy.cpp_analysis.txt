关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/child_scheduler_proxy.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

ChildSchedulerProxy::ChildSchedulerProxy(const sptr<IRemoteObject> &impl) : IRemoteProxy<IChildScheduler>(impl)

{}



bool ChildSchedulerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(ChildSchedulerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



bool ChildSchedulerProxy::ScheduleLoadChild()

{

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleLoadChild start");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return false;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

        return false;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_LOAD_JS), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

        return false;

    }

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleLoadChild end");

    return true;

}



bool ChildSchedulerProxy::ScheduleExitProcessSafely()

{

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleExitProcessSafely start.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return false;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL.");

        return false;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_EXIT_PROCESS_SAFELY), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);

        return false;

    }

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleExitProcessSafely end.");

    return true;

}



bool ChildSchedulerProxy::ScheduleRunNativeProc(const sptr<IRemoteObject> &mainProcessCb)

{

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleRunNativeProc start.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return false;

    }



    if (!data.WriteRemoteObject(mainProcessCb)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write main process callback ipc object failed.");

        return false;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is null.");

        return false;

    }



    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_RUN_NATIVE_PROC), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);

        return false;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleRunNativeProc end.");

    return true;

}



}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/child_scheduler_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

ChildSchedulerProxy::ChildSchedulerProxy(const sptr<IRemoteObject> &impl) : IRemoteProxy<IChildScheduler>(impl)

{}



bool ChildSchedulerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(ChildSchedulerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



bool ChildSchedulerProxy::ScheduleLoadChild()

{

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleLoadChild start");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return false;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

        return false;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_LOAD_JS), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

        return false;

    }

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleLoadChild end");

    return true;

}



bool ChildSchedulerProxy::ScheduleExitProcessSafely()

{

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleExitProcessSafely start.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return false;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL.");

        return false;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_EXIT_PROCESS_SAFELY), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);

        return false;

    }

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleExitProcessSafely end.");

    return true;

}



bool ChildSchedulerProxy::ScheduleRunNativeProc(const sptr<IRemoteObject> &mainProcessCb)

{

    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleRunNativeProc start.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return false;

    }



    if (!data.WriteRemoteObject(mainProcessCb)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write main process callback ipc object failed.");

        return false;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is null.");

        return false;

    }



    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_RUN_NATIVE_PROC), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);

        return false;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "ScheduleRunNativeProc end.");

    return true;

}



}  // namespace AppExecFwk

================================================================================
