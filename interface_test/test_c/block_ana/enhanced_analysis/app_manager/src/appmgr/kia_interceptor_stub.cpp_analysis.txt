关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/kia_interceptor_stub.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

KiaInterceptorStub::KiaInterceptorStub() {}



KiaInterceptorStub::~KiaInterceptorStub() {}



int KiaInterceptorStub::OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "cmd=%d,flags=%d", code, option.GetFlags());

    std::u16string descriptor = KiaInterceptorStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGI(AAFwkTag::APPMGR, "local descriptor is not equal to remote");

        return ERR_INVALID_STATE;

    }



    if (code == KIA_INTERCEPTOR_ON_INTERCEPT) {

        return OnInterceptInner(data, reply);

    }

    TAG_LOGW(AAFwkTag::APPMGR, "KiaInterceptorStub::OnRemoteRequest, default case, need check.");

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int KiaInterceptorStub::OnInterceptInner(MessageParcel &data, MessageParcel &reply)

{

    sptr<AAFwk::Want> want = data.ReadParcelable<AAFwk::Want>();

    int resultCode = OnIntercept(*want);

    if (!reply.WriteInt32(resultCode)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write resultCode failed.");

        return ERR_INVALID_VALUE;

    }

    if (!reply.WriteParcelable(want)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write want failed.");

        return ERR_INVALID_VALUE;

    }



    return NO_ERROR;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/kia_interceptor_stub.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

KiaInterceptorStub::KiaInterceptorStub() {}



KiaInterceptorStub::~KiaInterceptorStub() {}



int KiaInterceptorStub::OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "cmd=%d,flags=%d", code, option.GetFlags());

    std::u16string descriptor = KiaInterceptorStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGI(AAFwkTag::APPMGR, "local descriptor is not equal to remote");

        return ERR_INVALID_STATE;

    }



    if (code == KIA_INTERCEPTOR_ON_INTERCEPT) {

        return OnInterceptInner(data, reply);

    }

    TAG_LOGW(AAFwkTag::APPMGR, "KiaInterceptorStub::OnRemoteRequest, default case, need check.");

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int KiaInterceptorStub::OnInterceptInner(MessageParcel &data, MessageParcel &reply)

{

    sptr<AAFwk::Want> want = data.ReadParcelable<AAFwk::Want>();

    int resultCode = OnIntercept(*want);

    if (!reply.WriteInt32(resultCode)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write resultCode failed.");

        return ERR_INVALID_VALUE;

    }

    if (!reply.WriteParcelable(want)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write want failed.");

        return ERR_INVALID_VALUE;

    }



    return NO_ERROR;

}

}  // namespace AppExecFwk

================================================================================
