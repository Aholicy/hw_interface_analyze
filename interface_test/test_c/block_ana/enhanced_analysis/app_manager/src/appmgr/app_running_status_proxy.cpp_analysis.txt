关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_running_status_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AbilityRuntime {

AppRunningStatusProxy::AppRunningStatusProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<AppRunningStatusListenerInterface>(impl)

{}



void AppRunningStatusProxy::NotifyAppRunningStatus(const std::string &bundle, int32_t uid, RunningStatus runningStatus)

{

    MessageParcel data;

    if (!data.WriteInterfaceToken(AppRunningStatusProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return;

    }

    if (!data.WriteString(bundle) || !data.WriteInt32(uid) || !data.WriteInt32(static_cast<int32_t>(runningStatus))) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return;

    }



    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(AppRunningStatusListenerInterface::MessageCode::APP_RUNNING_STATUS), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

        return;

    }

}

} // namespace AbilityRuntime

} // namespace OHOS
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_running_status_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AbilityRuntime {

AppRunningStatusProxy::AppRunningStatusProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<AppRunningStatusListenerInterface>(impl)

{}



void AppRunningStatusProxy::NotifyAppRunningStatus(const std::string &bundle, int32_t uid, RunningStatus runningStatus)

{

    MessageParcel data;

    if (!data.WriteInterfaceToken(AppRunningStatusProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return;

    }

    if (!data.WriteString(bundle) || !data.WriteInt32(uid) || !data.WriteInt32(static_cast<int32_t>(runningStatus))) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return;

    }



    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(AppRunningStatusListenerInterface::MessageCode::APP_RUNNING_STATUS), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

        return;

    }

}

} // namespace AbilityRuntime

================================================================================
