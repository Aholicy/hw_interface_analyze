关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_proxy.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

namespace {

constexpr int32_t CYCLE_LIMIT_MIN = 0;

constexpr int32_t CYCLE_LIMIT_MAX = 1000;

}

AbilityDebugResponseProxy::AbilityDebugResponseProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IAbilityDebugResponse>(impl)

{}



bool AbilityDebugResponseProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(AbilityDebugResponseProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

        return false;

    }

    return true;

}



void AbilityDebugResponseProxy::OnAbilitysDebugStarted(const std::vector<sptr<IRemoteObject>> &tokens)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    SendRequest(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STARTED, tokens);

}



void AbilityDebugResponseProxy::OnAbilitysDebugStoped(const std::vector<sptr<IRemoteObject>> &tokens)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    SendRequest(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STOPED, tokens);

}



void AbilityDebugResponseProxy::OnAbilitysAssertDebugChange(

    const std::vector<sptr<IRemoteObject>> &tokens, bool isAssertDebug)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

        return;

    }



    if (tokens.size() <= CYCLE_LIMIT_MIN || tokens.size() > CYCLE_LIMIT_MAX ||

        !data.WriteInt32(tokens.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data size failed");

        return;

    }



    for (const auto &item : tokens) {

        if (!data.WriteRemoteObject(item)) {

            TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

            return;

        }

    }



    if (!data.WriteBool(isAssertDebug)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write flag failed");

        return;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

        return;

    }



    MessageParcel reply;

    MessageOption option;

    auto ret = remote->SendRequest(static_cast<uint32_t>(Message::ON_ABILITYS_ASSERT_DEBUG), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

    }

}



void AbilityDebugResponseProxy::SendRequest(

    const IAbilityDebugResponse::Message &message, const std::vector<sptr<IRemoteObject>> &tokens)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

        return;

    }



    if (tokens.size() <= CYCLE_LIMIT_MIN || tokens.size() > CYCLE_LIMIT_MAX ||

        !data.WriteInt32(tokens.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data size failed");

        return;

    }



    for (auto iter = tokens.begin(); iter != tokens.end(); iter++) {

        if (!data.WriteRemoteObject(iter->GetRefPtr())) {

            TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

            return;

        }

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

        return;

    }



    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    auto ret = remote->SendRequest(static_cast<uint32_t>(message), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

    }

}

} // namespace AppExecFwk

} // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

namespace {

constexpr int32_t CYCLE_LIMIT_MIN = 0;

constexpr int32_t CYCLE_LIMIT_MAX = 1000;

}

AbilityDebugResponseProxy::AbilityDebugResponseProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IAbilityDebugResponse>(impl)

{}



bool AbilityDebugResponseProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(AbilityDebugResponseProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

        return false;

    }

    return true;

}



void AbilityDebugResponseProxy::OnAbilitysDebugStarted(const std::vector<sptr<IRemoteObject>> &tokens)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    SendRequest(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STARTED, tokens);

}



void AbilityDebugResponseProxy::OnAbilitysDebugStoped(const std::vector<sptr<IRemoteObject>> &tokens)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    SendRequest(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STOPED, tokens);

}



void AbilityDebugResponseProxy::OnAbilitysAssertDebugChange(

    const std::vector<sptr<IRemoteObject>> &tokens, bool isAssertDebug)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

        return;

    }



    if (tokens.size() <= CYCLE_LIMIT_MIN || tokens.size() > CYCLE_LIMIT_MAX ||

        !data.WriteInt32(tokens.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data size failed");

        return;

    }



    for (const auto &item : tokens) {

        if (!data.WriteRemoteObject(item)) {

            TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

            return;

        }

    }



    if (!data.WriteBool(isAssertDebug)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write flag failed");

        return;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

        return;

    }



    MessageParcel reply;

    MessageOption option;

    auto ret = remote->SendRequest(static_cast<uint32_t>(Message::ON_ABILITYS_ASSERT_DEBUG), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

    }

}



void AbilityDebugResponseProxy::SendRequest(

    const IAbilityDebugResponse::Message &message, const std::vector<sptr<IRemoteObject>> &tokens)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    MessageParcel data;

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

        return;

    }



    if (tokens.size() <= CYCLE_LIMIT_MIN || tokens.size() > CYCLE_LIMIT_MAX ||

        !data.WriteInt32(tokens.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data size failed");

        return;

    }



    for (auto iter = tokens.begin(); iter != tokens.end(); iter++) {

        if (!data.WriteRemoteObject(iter->GetRefPtr())) {

            TAG_LOGE(AAFwkTag::APPMGR, "Write token failed");

            return;

        }

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

        return;

    }



    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    auto ret = remote->SendRequest(static_cast<uint32_t>(message), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

    }

}

} // namespace AppExecFwk

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace {

constexpr int32_t CYCLE_LIMIT_MIN = 0;

constexpr int32_t CYCLE_LIMIT_MAX = 1000;

}

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_proxy.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
constexpr int32_t CYCLE_LIMIT_MIN = 0;

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_proxy.cpp:25
重要性权重: 1
综合评分: 0
代码片段:
constexpr int32_t CYCLE_LIMIT_MAX = 1000;

================================================================================
