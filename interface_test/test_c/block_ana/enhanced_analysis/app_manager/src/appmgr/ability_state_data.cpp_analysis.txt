关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_state_data.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

bool AbilityStateData::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteString(moduleName)) {

        return false;

    }

    if (!parcel.WriteString(bundleName)) {

        return false;

    }

    if (!parcel.WriteString(abilityName)) {

        return false;

    }

    if (!parcel.WriteInt32(abilityState)) {

        return false;

    }

    if (!parcel.WriteInt32(pid)) {

        return false;

    }

    if (!parcel.WriteInt32(uid)) {

        return false;

    }

    if (token == nullptr) {

        if (!parcel.WriteBool(false)) {

            return false;

        }

    } else {

        if (!parcel.WriteBool(true)) {

            return false;

        }

        if (!parcel.WriteRemoteObject(token)) {

            return false;

        }

    }

    if (!MarshallingOne(parcel)) {

        return false;

    }

    return true;

}



bool AbilityStateData::MarshallingOne(Parcel &parcel) const

{

    if (!parcel.WriteInt32(abilityType)) {

        return false;

    }

    if (!parcel.WriteBool(isFocused)) {

        return false;

    }

    if (!parcel.WriteString(callerBundleName)) {

        return false;

    }

    if (!parcel.WriteString(callerAbilityName)) {

        return false;

    }

    if (!parcel.WriteBool(isAtomicService) || !parcel.WriteInt32(abilityRecordId)) {

        return false;

    }

    if (!parcel.WriteInt32(appCloneIndex)) {

        return false;

    }

    if (!parcel.WriteInt32(extensionAbilityType)) {

        return false;

    }

    if (!parcel.WriteInt32(processType)) {

        return false;

    }

    return true;

}



bool AbilityStateData::ReadFromParcel(Parcel &parcel)

{

    moduleName = parcel.ReadString();



    bundleName = parcel.ReadString();



    abilityName = parcel.ReadString();



    abilityState = parcel.ReadInt32();



    pid = parcel.ReadInt32();



    uid = parcel.ReadInt32();



    if (parcel.ReadBool()) {

        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();

    }



    abilityType = parcel.ReadInt32();



    isFocused = parcel.ReadBool();



    callerBundleName = parcel.ReadString();



    callerAbilityName = parcel.ReadString();

    isAtomicService = parcel.ReadBool();

    abilityRecordId = parcel.ReadInt32();

    appCloneIndex = parcel.ReadInt32();

    extensionAbilityType = parcel.ReadInt32();

    processType = parcel.ReadInt32();

    return true;

}



AbilityStateData *AbilityStateData::Unmarshalling(Parcel &parcel)

{

    AbilityStateData *abilityStateData = new (std::nothrow) AbilityStateData();

    if (abilityStateData && !abilityStateData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "ReadFromParcel failed");

        delete abilityStateData;

        abilityStateData = nullptr;

    }

    return abilityStateData;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_state_data.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

bool AbilityStateData::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteString(moduleName)) {

        return false;

    }

    if (!parcel.WriteString(bundleName)) {

        return false;

    }

    if (!parcel.WriteString(abilityName)) {

        return false;

    }

    if (!parcel.WriteInt32(abilityState)) {

        return false;

    }

    if (!parcel.WriteInt32(pid)) {

        return false;

    }

    if (!parcel.WriteInt32(uid)) {

        return false;

    }

    if (token == nullptr) {

        if (!parcel.WriteBool(false)) {

            return false;

        }

    } else {

        if (!parcel.WriteBool(true)) {

            return false;

        }

        if (!parcel.WriteRemoteObject(token)) {

            return false;

        }

    }

    if (!MarshallingOne(parcel)) {

        return false;

    }

    return true;

}



bool AbilityStateData::MarshallingOne(Parcel &parcel) const

{

    if (!parcel.WriteInt32(abilityType)) {

        return false;

    }

    if (!parcel.WriteBool(isFocused)) {

        return false;

    }

    if (!parcel.WriteString(callerBundleName)) {

        return false;

    }

    if (!parcel.WriteString(callerAbilityName)) {

        return false;

    }

    if (!parcel.WriteBool(isAtomicService) || !parcel.WriteInt32(abilityRecordId)) {

        return false;

    }

    if (!parcel.WriteInt32(appCloneIndex)) {

        return false;

    }

    if (!parcel.WriteInt32(extensionAbilityType)) {

        return false;

    }

    if (!parcel.WriteInt32(processType)) {

        return false;

    }

    return true;

}



bool AbilityStateData::ReadFromParcel(Parcel &parcel)

{

    moduleName = parcel.ReadString();



    bundleName = parcel.ReadString();



    abilityName = parcel.ReadString();



    abilityState = parcel.ReadInt32();



    pid = parcel.ReadInt32();



    uid = parcel.ReadInt32();



    if (parcel.ReadBool()) {

        token = (static_cast<MessageParcel*>(&parcel))->ReadRemoteObject();

    }



    abilityType = parcel.ReadInt32();



    isFocused = parcel.ReadBool();



    callerBundleName = parcel.ReadString();



    callerAbilityName = parcel.ReadString();

    isAtomicService = parcel.ReadBool();

    abilityRecordId = parcel.ReadInt32();

    appCloneIndex = parcel.ReadInt32();

    extensionAbilityType = parcel.ReadInt32();

    processType = parcel.ReadInt32();

    return true;

}



AbilityStateData *AbilityStateData::Unmarshalling(Parcel &parcel)

{

    AbilityStateData *abilityStateData = new (std::nothrow) AbilityStateData();

    if (abilityStateData && !abilityStateData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "ReadFromParcel failed");

        delete abilityStateData;

        abilityStateData = nullptr;

    }

    return abilityStateData;

}

}  // namespace AppExecFwk

================================================================================
