关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/memory_level_info.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

namespace {

constexpr int MAX_PARCEL_SIZE = 100000;

}



MemoryLevelInfo::MemoryLevelInfo(const std::map<pid_t, MemoryLevel> &procLevelMap) : procLevelMap_(procLevelMap)

{

}



bool MemoryLevelInfo::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteUint32(procLevelMap_.size())) {

        return false;

    }

    for (auto it = procLevelMap_.begin(); it != procLevelMap_.end(); ++it) {

        if (!parcel.WriteInt32(it->first)) {

            return false;

        }

        if (!parcel.WriteInt32(it->second)) {

            return false;

        }

    }

    return true;

}



MemoryLevelInfo *MemoryLevelInfo::Unmarshalling(Parcel &parcel)

{

    MemoryLevelInfo *object = new (std::nothrow) MemoryLevelInfo();

    if ((object != nullptr) && !object->ReadFromParcel(parcel)) {

        delete object;

        object = nullptr;

    }



    return object;

}



const std::map<pid_t, MemoryLevel> &MemoryLevelInfo::GetProcLevelMap() const

{

    return procLevelMap_;

}





bool MemoryLevelInfo::ReadFromParcel(Parcel &parcel)

{

    uint32_t count = parcel.ReadUint32();

    if (count < 0 || count > MAX_PARCEL_SIZE) {

        count = 0;

        return false;

    }



    for (uint32_t i = 0; i < count; ++i) {

        pid_t pid = parcel.ReadInt32();

        int32_t tempLevel = parcel.ReadInt32();

        MemoryLevel level = MEMORY_LEVEL_MODERATE;

        switch (tempLevel) {

            case MEMORY_LEVEL_MODERATE:

            case MEMORY_LEVEL_LOW:

            case MEMORY_LEVEL_CRITICAL:

                level = static_cast<MemoryLevel>(tempLevel);

                break;

            default:

                TAG_LOGE(AAFwkTag::APPMGR, "temp memory level=%{public}d is not valid.", tempLevel);

                continue;

        }

        procLevelMap_[pid] = level;

    }

    return true;

}



} // namespace AppExecFwk

} // namespace OHOS
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/memory_level_info.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

namespace {

constexpr int MAX_PARCEL_SIZE = 100000;

}



MemoryLevelInfo::MemoryLevelInfo(const std::map<pid_t, MemoryLevel> &procLevelMap) : procLevelMap_(procLevelMap)

{

}



bool MemoryLevelInfo::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteUint32(procLevelMap_.size())) {

        return false;

    }

    for (auto it = procLevelMap_.begin(); it != procLevelMap_.end(); ++it) {

        if (!parcel.WriteInt32(it->first)) {

            return false;

        }

        if (!parcel.WriteInt32(it->second)) {

            return false;

        }

    }

    return true;

}



MemoryLevelInfo *MemoryLevelInfo::Unmarshalling(Parcel &parcel)

{

    MemoryLevelInfo *object = new (std::nothrow) MemoryLevelInfo();

    if ((object != nullptr) && !object->ReadFromParcel(parcel)) {

        delete object;

        object = nullptr;

    }



    return object;

}



const std::map<pid_t, MemoryLevel> &MemoryLevelInfo::GetProcLevelMap() const

{

    return procLevelMap_;

}





bool MemoryLevelInfo::ReadFromParcel(Parcel &parcel)

{

    uint32_t count = parcel.ReadUint32();

    if (count < 0 || count > MAX_PARCEL_SIZE) {

        count = 0;

        return false;

    }



    for (uint32_t i = 0; i < count; ++i) {

        pid_t pid = parcel.ReadInt32();

        int32_t tempLevel = parcel.ReadInt32();

        MemoryLevel level = MEMORY_LEVEL_MODERATE;

        switch (tempLevel) {

            case MEMORY_LEVEL_MODERATE:

            case MEMORY_LEVEL_LOW:

            case MEMORY_LEVEL_CRITICAL:

                level = static_cast<MemoryLevel>(tempLevel);

                break;

            default:

                TAG_LOGE(AAFwkTag::APPMGR, "temp memory level=%{public}d is not valid.", tempLevel);

                continue;

        }

        procLevelMap_[pid] = level;

    }

    return true;

}



} // namespace AppExecFwk

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/memory_level_info.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace {

constexpr int MAX_PARCEL_SIZE = 100000;

}

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/memory_level_info.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
constexpr int MAX_PARCEL_SIZE = 100000;

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/memory_level_info.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
constexpr int MAX_PARCEL_SIZE = 100000;

================================================================================
