关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/native_child_notify_stub.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {



int NativeChildNotifyStub::OnRemoteRequest(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest, code=%{public}u, flags=%{public}d.",

        code, option.GetFlags());

    std::u16string descriptor = NativeChildNotifyStub::GetDescriptor();

    std::u16string remoteDesc = data.ReadInterfaceToken();

    if (descriptor != remoteDesc) {

        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");

        return ERR_INVALID_STATE;

    }



    int32_t ret;

    switch (code) {

        case INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED:

            ret = HandleOnNativeChildStarted(data, reply);

            break;



        case INativeChildNotify::IPC_ID_ON_ERROR:

            ret = HandleOnError(data, reply);

            break;

        

        default:

            TAG_LOGW(AAFwkTag::APPMGR, "NativeChildNotifyStub Unknow ipc call(%{public}u)", code);

            ret = IPCObjectStub::OnRemoteRequest(code, data, reply, option);

            break;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest end");

    return ret;

}



int32_t NativeChildNotifyStub::HandleOnNativeChildStarted(MessageParcel &data, MessageParcel &reply)

{

    sptr<IRemoteObject> cb = data.ReadRemoteObject();

    OnNativeChildStarted(cb);

    return ERR_NONE;

}



int32_t NativeChildNotifyStub::HandleOnError(MessageParcel &data, MessageParcel &reply)

{

    int32_t err = data.ReadInt32();

    OnError(err);

    return ERR_NONE;

}



} // OHOS

} // AppExecFwk

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/native_child_notify_stub.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {



int NativeChildNotifyStub::OnRemoteRequest(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest, code=%{public}u, flags=%{public}d.",

        code, option.GetFlags());

    std::u16string descriptor = NativeChildNotifyStub::GetDescriptor();

    std::u16string remoteDesc = data.ReadInterfaceToken();

    if (descriptor != remoteDesc) {

        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");

        return ERR_INVALID_STATE;

    }



    int32_t ret;

    switch (code) {

        case INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED:

            ret = HandleOnNativeChildStarted(data, reply);

            break;



        case INativeChildNotify::IPC_ID_ON_ERROR:

            ret = HandleOnError(data, reply);

            break;

        

        default:

            TAG_LOGW(AAFwkTag::APPMGR, "NativeChildNotifyStub Unknow ipc call(%{public}u)", code);

            ret = IPCObjectStub::OnRemoteRequest(code, data, reply, option);

            break;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyStub::OnRemoteRequest end");

    return ret;

}



int32_t NativeChildNotifyStub::HandleOnNativeChildStarted(MessageParcel &data, MessageParcel &reply)

{

    sptr<IRemoteObject> cb = data.ReadRemoteObject();

    OnNativeChildStarted(cb);

    return ERR_NONE;

}



int32_t NativeChildNotifyStub::HandleOnError(MessageParcel &data, MessageParcel &reply)

{

    int32_t err = data.ReadInt32();

    OnError(err);

    return ERR_NONE;

}



} // OHOS

================================================================================
