关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_foreground_state_observer_stub.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

AppForegroundStateObserverStub::AppForegroundStateObserverStub() {}



AppForegroundStateObserverStub::~AppForegroundStateObserverStub() {}



int32_t AppForegroundStateObserverStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    std::u16string descriptor = AppForegroundStateObserverStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");

        return ERR_INVALID_STATE;

    }



    if (code == static_cast<uint32_t>(IAppForegroundStateObserver::Message::ON_APP_STATE_CHANGED)) {

        return HandleOnAppStateChanged(data, reply);

    }



    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int32_t AppForegroundStateObserverStub::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<AppStateData> processData(data.ReadParcelable<AppStateData>());

    if (processData == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "ProcessData is null.");

        return ERR_APPEXECFWK_PARCEL_ERROR;

    }



    OnAppStateChanged(*processData);

    return NO_ERROR;

}



AppForegroundStateObserverRecipient::AppForegroundStateObserverRecipient(RemoteDiedHandler handler) : handler_(handler)

{}



void AppForegroundStateObserverRecipient::OnRemoteDied(const wptr<IRemoteObject> &__attribute__((unused)) remote)

{

    TAG_LOGE(AAFwkTag::APPMGR, "Remote died.");

    if (handler_) {

        handler_(remote);

    }

}

} // namespace AppExecFwk

} // namespace OHOS
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_foreground_state_observer_stub.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

AppForegroundStateObserverStub::AppForegroundStateObserverStub() {}



AppForegroundStateObserverStub::~AppForegroundStateObserverStub() {}



int32_t AppForegroundStateObserverStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");

    std::u16string descriptor = AppForegroundStateObserverStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "Local descriptor is not equal to remote.");

        return ERR_INVALID_STATE;

    }



    if (code == static_cast<uint32_t>(IAppForegroundStateObserver::Message::ON_APP_STATE_CHANGED)) {

        return HandleOnAppStateChanged(data, reply);

    }



    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int32_t AppForegroundStateObserverStub::HandleOnAppStateChanged(MessageParcel &data, MessageParcel &reply)

{

    std::unique_ptr<AppStateData> processData(data.ReadParcelable<AppStateData>());

    if (processData == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "ProcessData is null.");

        return ERR_APPEXECFWK_PARCEL_ERROR;

    }



    OnAppStateChanged(*processData);

    return NO_ERROR;

}



AppForegroundStateObserverRecipient::AppForegroundStateObserverRecipient(RemoteDiedHandler handler) : handler_(handler)

{}



void AppForegroundStateObserverRecipient::OnRemoteDied(const wptr<IRemoteObject> &__attribute__((unused)) remote)

{

    TAG_LOGE(AAFwkTag::APPMGR, "Remote died.");

    if (handler_) {

        handler_(remote);

    }

}

} // namespace AppExecFwk

================================================================================
