关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/priority_object.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

pid_t PriorityObject::GetPid() const

{

    return pid_;

}



int32_t PriorityObject::GetMaxAdj() const

{

    return maxAdj_;

}



int32_t PriorityObject::GetCurAdj() const

{

    return curAdj_;

}



int32_t PriorityObject::GetCurCgroup() const

{

    return curCgroup_;

}



int32_t PriorityObject::GetTimeLevel() const

{

    return timeLevel_;

}



bool PriorityObject::GetVisibleStatus() const

{

    return visibleStatus_;

}



bool PriorityObject::GetPerceptibleStatus() const

{

    return perceptibleStatus_;

}



void PriorityObject::SetPid(const pid_t pid)

{

    pid_ = pid;

}



void PriorityObject::SetMaxAdj(const int32_t maxAdj)

{

    maxAdj_ = maxAdj;

}



void PriorityObject::SetCurAdj(const int32_t curAdj)

{

    curAdj_ = curAdj;

}



void PriorityObject::SetCurCgroup(const int32_t curCgroup)

{

    curCgroup_ = curCgroup;

}



void PriorityObject::SetTimeLevel(const int32_t timeLevel)

{

    timeLevel_ = timeLevel;

}



void PriorityObject::SetVisibleStatus(bool status)

{

    visibleStatus_ = status;

}



void PriorityObject::SetPerceptibleStatus(bool status)

{

    perceptibleStatus_ = status;

}



bool PriorityObject::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteInt32(pid_)) {

        return false;

    }

    if (!parcel.WriteInt32(maxAdj_)) {

        return false;

    }

    if (!parcel.WriteInt32(curAdj_)) {

        return false;

    }

    if (!parcel.WriteInt32(curCgroup_)) {

        return false;

    }

    if (!parcel.WriteInt32(timeLevel_)) {

        return false;

    }

    return true;

}



bool PriorityObject::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(pid_)) {

        return false;

    }

    if (!parcel.ReadInt32(maxAdj_)) {

        return false;

    }

    if (!parcel.ReadInt32(curAdj_)) {

        return false;

    }

    if (!parcel.ReadInt32(curCgroup_)) {

        return false;

    }

    if (!parcel.ReadInt32(timeLevel_)) {

        return false;

    }

    return true;

}



PriorityObject *PriorityObject::Unmarshalling(Parcel &parcel)

{

    PriorityObject *priorityObject = new (std::nothrow) PriorityObject();

    if (priorityObject && !priorityObject->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

        delete priorityObject;

        priorityObject = nullptr;

    }

    return priorityObject;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/priority_object.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

pid_t PriorityObject::GetPid() const

{

    return pid_;

}



int32_t PriorityObject::GetMaxAdj() const

{

    return maxAdj_;

}



int32_t PriorityObject::GetCurAdj() const

{

    return curAdj_;

}



int32_t PriorityObject::GetCurCgroup() const

{

    return curCgroup_;

}



int32_t PriorityObject::GetTimeLevel() const

{

    return timeLevel_;

}



bool PriorityObject::GetVisibleStatus() const

{

    return visibleStatus_;

}



bool PriorityObject::GetPerceptibleStatus() const

{

    return perceptibleStatus_;

}



void PriorityObject::SetPid(const pid_t pid)

{

    pid_ = pid;

}



void PriorityObject::SetMaxAdj(const int32_t maxAdj)

{

    maxAdj_ = maxAdj;

}



void PriorityObject::SetCurAdj(const int32_t curAdj)

{

    curAdj_ = curAdj;

}



void PriorityObject::SetCurCgroup(const int32_t curCgroup)

{

    curCgroup_ = curCgroup;

}



void PriorityObject::SetTimeLevel(const int32_t timeLevel)

{

    timeLevel_ = timeLevel;

}



void PriorityObject::SetVisibleStatus(bool status)

{

    visibleStatus_ = status;

}



void PriorityObject::SetPerceptibleStatus(bool status)

{

    perceptibleStatus_ = status;

}



bool PriorityObject::Marshalling(Parcel &parcel) const

{

    if (!parcel.WriteInt32(pid_)) {

        return false;

    }

    if (!parcel.WriteInt32(maxAdj_)) {

        return false;

    }

    if (!parcel.WriteInt32(curAdj_)) {

        return false;

    }

    if (!parcel.WriteInt32(curCgroup_)) {

        return false;

    }

    if (!parcel.WriteInt32(timeLevel_)) {

        return false;

    }

    return true;

}



bool PriorityObject::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(pid_)) {

        return false;

    }

    if (!parcel.ReadInt32(maxAdj_)) {

        return false;

    }

    if (!parcel.ReadInt32(curAdj_)) {

        return false;

    }

    if (!parcel.ReadInt32(curCgroup_)) {

        return false;

    }

    if (!parcel.ReadInt32(timeLevel_)) {

        return false;

    }

    return true;

}



PriorityObject *PriorityObject::Unmarshalling(Parcel &parcel)

{

    PriorityObject *priorityObject = new (std::nothrow) PriorityObject();

    if (priorityObject && !priorityObject->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

        delete priorityObject;

        priorityObject = nullptr;

    }

    return priorityObject;

}

}  // namespace AppExecFwk

================================================================================
