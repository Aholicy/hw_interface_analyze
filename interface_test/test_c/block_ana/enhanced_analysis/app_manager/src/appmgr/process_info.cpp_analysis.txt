关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/process_info.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

ProcessInfo::ProcessInfo(const std::string &name, const pid_t &pid) : processName_(name), pid_(pid)

{}



/**

 * @brief read this Sequenceable object from a Parcel.

 *

 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.

 * @return Returns true if read successed; returns false otherwise.

 */

bool ProcessInfo::ReadFromParcel(Parcel &parcel)

{

    processName_ = Str16ToStr8(parcel.ReadString16());

    pid_ = parcel.ReadInt32();

    processType_ = ProcessType(parcel.ReadInt32());

    return true;

}



/**

 * @brief Unmarshals this Sequenceable object from a Parcel.

 *

 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.

 */

ProcessInfo *ProcessInfo::Unmarshalling(Parcel &parcel)

{

    ProcessInfo *processInfo = new (std::nothrow) ProcessInfo();

    if (processInfo && !processInfo->ReadFromParcel(parcel)) {

        TAG_LOGE(AAFwkTag::APPMGR, "ProcessInfo::Unmarshalling ReadFromParcel failed");

        delete processInfo;

        processInfo = nullptr;

    }

    return processInfo;

}



/**

 * @brief Marshals this Sequenceable object into a Parcel.

 *

 * @param outParcel Indicates the Parcel object to which the Sequenceable object will be marshaled.

 */

bool ProcessInfo::Marshalling(Parcel &parcel) const

{

    return (parcel.WriteString16(Str8ToStr16(processName_)) && parcel.WriteInt32(pid_)

        && parcel.WriteInt32(static_cast<int32_t>(processType_)));

}



void ProcessInfo::SetProcessType(const ProcessType &processType)

{

    processType_ = processType;

}



ProcessType ProcessInfo::GetProcessType() const

{

    return processType_;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/process_info.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

ProcessInfo::ProcessInfo(const std::string &name, const pid_t &pid) : processName_(name), pid_(pid)

{}



/**

 * @brief read this Sequenceable object from a Parcel.

 *

 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.

 * @return Returns true if read successed; returns false otherwise.

 */

bool ProcessInfo::ReadFromParcel(Parcel &parcel)

{

    processName_ = Str16ToStr8(parcel.ReadString16());

    pid_ = parcel.ReadInt32();

    processType_ = ProcessType(parcel.ReadInt32());

    return true;

}



/**

 * @brief Unmarshals this Sequenceable object from a Parcel.

 *

 * @param inParcel Indicates the Parcel object into which the Sequenceable object has been marshaled.

 */

ProcessInfo *ProcessInfo::Unmarshalling(Parcel &parcel)

{

    ProcessInfo *processInfo = new (std::nothrow) ProcessInfo();

    if (processInfo && !processInfo->ReadFromParcel(parcel)) {

        TAG_LOGE(AAFwkTag::APPMGR, "ProcessInfo::Unmarshalling ReadFromParcel failed");

        delete processInfo;

        processInfo = nullptr;

    }

    return processInfo;

}



/**

 * @brief Marshals this Sequenceable object into a Parcel.

 *

 * @param outParcel Indicates the Parcel object to which the Sequenceable object will be marshaled.

 */

bool ProcessInfo::Marshalling(Parcel &parcel) const

{

    return (parcel.WriteString16(Str8ToStr16(processName_)) && parcel.WriteInt32(pid_)

        && parcel.WriteInt32(static_cast<int32_t>(processType_)));

}



void ProcessInfo::SetProcessType(const ProcessType &processType)

{

    processType_ = processType;

}



ProcessType ProcessInfo::GetProcessType() const

{

    return processType_;

}

}  // namespace AppExecFwk

================================================================================
