关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/application_state_observer_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

namespace {

const int32_t ERR_INVALID_STUB = 32;

}

ApplicationStateObserverProxy::ApplicationStateObserverProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IApplicationStateObserver>(impl)

{}



bool ApplicationStateObserverProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(ApplicationStateObserverProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void ApplicationStateObserverProxy::OnForegroundApplicationChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_FOREGROUND_APPLICATION_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAbilityStateChanged(const AbilityStateData &abilityStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&abilityStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_ABILITY_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName: %{public}s.",

            ret, abilityStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnExtensionStateChanged(const AbilityStateData &abilityStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&abilityStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_EXTENSION_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, abilityStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessCreated(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_CREATED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessReused(const ProcessData &processData)

{

    TAG_LOGD(AAFwkTag::APPMGR, "start");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_REUSED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessStateChanged(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

    TAG_LOGD(AAFwkTag::APPMGR, "end");

}



void ApplicationStateObserverProxy::OnWindowShow(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_SHOW),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnWindowHidden(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_HIDDEN),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessDied(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_DIED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnApplicationStateChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APPLICATION_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppStateChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, , bundleName: %{public}s",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppStarted(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STARTED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppStopped(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "OnAppStopped, WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STOPPED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnPageShow(const PageStateData &pageStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&pageStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_SHOW),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",

            ret, pageStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnPageHide(const PageStateData &pageStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&pageStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_HIDE),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",

            ret, pageStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppCacheStateChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_CACHE_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



int32_t ApplicationStateObserverProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return ERR_NULL_OBJECT;

    }



    return remote->SendRequest(code, data, reply, option);

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/application_state_observer_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

namespace {

const int32_t ERR_INVALID_STUB = 32;

}

ApplicationStateObserverProxy::ApplicationStateObserverProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IApplicationStateObserver>(impl)

{}



bool ApplicationStateObserverProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(ApplicationStateObserverProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void ApplicationStateObserverProxy::OnForegroundApplicationChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_FOREGROUND_APPLICATION_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAbilityStateChanged(const AbilityStateData &abilityStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&abilityStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_ABILITY_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName: %{public}s.",

            ret, abilityStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnExtensionStateChanged(const AbilityStateData &abilityStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&abilityStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_EXTENSION_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, abilityStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessCreated(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_CREATED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessReused(const ProcessData &processData)

{

    TAG_LOGD(AAFwkTag::APPMGR, "start");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_REUSED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessStateChanged(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

    TAG_LOGD(AAFwkTag::APPMGR, "end");

}



void ApplicationStateObserverProxy::OnWindowShow(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_SHOW),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnWindowHidden(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_WINDOW_HIDDEN),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnProcessDied(const ProcessData &processData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&processData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PROCESS_DIED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is wrong, error code: %{public}d, bundleName:%{public}s.",

            ret, processData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnApplicationStateChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APPLICATION_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppStateChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, , bundleName: %{public}s",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppStarted(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STARTED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppStopped(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "OnAppStopped, WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_STOPPED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnPageShow(const PageStateData &pageStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&pageStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_SHOW),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",

            ret, pageStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnPageHide(const PageStateData &pageStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&pageStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_PAGE_HIDE),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s",

            ret, pageStateData.bundleName.c_str());

    }

}



void ApplicationStateObserverProxy::OnAppCacheStateChanged(const AppStateData &appStateData)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }

    data.WriteParcelable(&appStateData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IApplicationStateObserver::Message::TRANSACT_ON_APP_CACHE_STATE_CHANGED),

        data, reply, option);

    if (ret != NO_ERROR && ret != ERR_INVALID_STUB) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d, bundleName: %{public}s.",

            ret, appStateData.bundleName.c_str());

    }

}



int32_t ApplicationStateObserverProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return ERR_NULL_OBJECT;

    }



    return remote->SendRequest(code, data, reply, option);

}

}  // namespace AppExecFwk

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/application_state_observer_proxy.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace {

const int32_t ERR_INVALID_STUB = 32;

}

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/application_state_observer_proxy.cpp:25
重要性权重: 1
综合评分: 0
代码片段:
const int32_t ERR_INVALID_STUB = 32;

================================================================================
