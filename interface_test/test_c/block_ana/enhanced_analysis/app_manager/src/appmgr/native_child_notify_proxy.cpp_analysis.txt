关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/native_child_notify_proxy.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {



NativeChildNotifyProxy::NativeChildNotifyProxy(const sptr<IRemoteObject> &impl)

    : IRemoteProxy<INativeChildNotify>(impl)

{

}



bool NativeChildNotifyProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(NativeChildNotifyProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write interface token failed");

        return false;

    }



    return true;

}



int32_t NativeChildNotifyProxy::SendRequest(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption& option)

{

    sptr<IRemoteObject> remote = Remote();

    if (!remote) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy get remote object failed");

        return ERR_NULL_OBJECT;

    }



    int32_t ret = remote->SendRequest(code, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy SendRequest failed(%{public}d)", ret);

        return ret;

    }



    return NO_ERROR;

}



void NativeChildNotifyProxy::OnNativeChildStarted(const sptr<IRemoteObject> &nativeChild)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnNativeChildStarted");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (!data.WriteRemoteObject(nativeChild)) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write native child ipc object failed.");

        return;

    }



    SendRequest(INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED, data, reply, option);

}



void NativeChildNotifyProxy::OnError(int32_t errCode)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnError(%{public}d)", errCode);

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (!data.WriteInt32(errCode)) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write error code failed.");

        return;

    }



    SendRequest(INativeChildNotify::IPC_ID_ON_ERROR, data, reply, option);

}



} // OHOS

} // AppExecFwk
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/native_child_notify_proxy.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {



NativeChildNotifyProxy::NativeChildNotifyProxy(const sptr<IRemoteObject> &impl)

    : IRemoteProxy<INativeChildNotify>(impl)

{

}



bool NativeChildNotifyProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(NativeChildNotifyProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write interface token failed");

        return false;

    }



    return true;

}



int32_t NativeChildNotifyProxy::SendRequest(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption& option)

{

    sptr<IRemoteObject> remote = Remote();

    if (!remote) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy get remote object failed");

        return ERR_NULL_OBJECT;

    }



    int32_t ret = remote->SendRequest(code, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy SendRequest failed(%{public}d)", ret);

        return ret;

    }



    return NO_ERROR;

}



void NativeChildNotifyProxy::OnNativeChildStarted(const sptr<IRemoteObject> &nativeChild)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnNativeChildStarted");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (!data.WriteRemoteObject(nativeChild)) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write native child ipc object failed.");

        return;

    }



    SendRequest(INativeChildNotify::IPC_ID_ON_NATIVE_CHILD_STARTED, data, reply, option);

}



void NativeChildNotifyProxy::OnError(int32_t errCode)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NativeChildNotifyProxy OnError(%{public}d)", errCode);

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (!data.WriteInt32(errCode)) {

        TAG_LOGE(AAFwkTag::APPMGR, "NativeChildNotifyProxy write error code failed.");

        return;

    }



    SendRequest(INativeChildNotify::IPC_ID_ON_ERROR, data, reply, option);

}



} // OHOS

================================================================================
