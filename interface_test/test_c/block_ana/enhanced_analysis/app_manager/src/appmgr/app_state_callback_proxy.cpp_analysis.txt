关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_state_callback_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

AppStateCallbackProxy::AppStateCallbackProxy(const sptr<IRemoteObject> &impl) : IRemoteProxy<IAppStateCallback>(impl)

{}



bool AppStateCallbackProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(AppStateCallbackProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void AppStateCallbackProxy::OnAbilityRequestDone(const sptr<IRemoteObject> &token, const AbilityState state)

{

    TAG_LOGD(AAFwkTag::APPMGR, "begin");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (token) {

        if (!data.WriteBool(true) || !data.WriteRemoteObject(token.GetRefPtr())) {

            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag and token");

            return;

        }

    } else {

        if (!data.WriteBool(false)) {

            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");

            return;

        }

    }



    int32_t abilityState = static_cast<int32_t>(state);

    data.WriteInt32(abilityState);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_ABILITY_REQUEST_DONE), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

    TAG_LOGD(AAFwkTag::APPMGR, "end");

}



void AppStateCallbackProxy::OnAppStateChanged(const AppProcessData &appProcessData)

{

    TAG_LOGD(AAFwkTag::APPMGR, "begin");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&appProcessData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_STATE_CHANGED), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

    TAG_LOGD(AAFwkTag::APPMGR, "end");

}



void AppStateCallbackProxy::NotifyConfigurationChange(const AppExecFwk::Configuration &config, int32_t userId)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return;

    }

    if (!data.WriteParcelable(&config)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write config failed.");

        return;

    }

    if (!data.WriteInt32(userId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write usr failed.");

        return;

    }

    auto error = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_CONFIG_CHANGE), data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "Send config error: %{public}d", error);

    }

}



void AppStateCallbackProxy::NotifyStartResidentProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(bundleInfos.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");

        return;

    }



    for (auto &bundleInfo : bundleInfos) {

        if (!data.WriteParcelable(&bundleInfo)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write bundle info failed");

            return;

        }

    }

    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_RESIDENT_PROCESS),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void AppStateCallbackProxy::NotifyStartKeepAliveProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(bundleInfos.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");

        return;

    }



    for (auto &bundleInfo : bundleInfos) {

        if (!data.WriteParcelable(&bundleInfo)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write bundle info failed");

            return;

        }

    }

    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_KEEP_ALIVE_PROCESS),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void AppStateCallbackProxy::OnAppRemoteDied(const std::vector<sptr<IRemoteObject>> &abilityTokens)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(abilityTokens.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write token size failed.");

        return;

    }



    for (auto &token : abilityTokens) {

        if (!data.WriteRemoteObject(token.GetRefPtr())) {

            TAG_LOGE(AAFwkTag::APPMGR, "write token failed");

            return;

        }

    }

    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_REMOTE_DIED),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void AppStateCallbackProxy::NotifyAppPreCache(int32_t pid, int32_t userId)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(pid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");

        return;

    }



    if (!data.WriteInt32(userId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write userId failed.");

        return;

    }



    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_PRE_CACHE),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



int32_t AppStateCallbackProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return ERR_NULL_OBJECT;

    }



    auto ret = remote->SendRequest(code, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code: %{public}d", ret);

        return ret;

    }

    return ret;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_state_callback_proxy.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

AppStateCallbackProxy::AppStateCallbackProxy(const sptr<IRemoteObject> &impl) : IRemoteProxy<IAppStateCallback>(impl)

{}



bool AppStateCallbackProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(AppStateCallbackProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void AppStateCallbackProxy::OnAbilityRequestDone(const sptr<IRemoteObject> &token, const AbilityState state)

{

    TAG_LOGD(AAFwkTag::APPMGR, "begin");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (token) {

        if (!data.WriteBool(true) || !data.WriteRemoteObject(token.GetRefPtr())) {

            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag and token");

            return;

        }

    } else {

        if (!data.WriteBool(false)) {

            TAG_LOGE(AAFwkTag::APPMGR, "Failed to write flag");

            return;

        }

    }



    int32_t abilityState = static_cast<int32_t>(state);

    data.WriteInt32(abilityState);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_ABILITY_REQUEST_DONE), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

    TAG_LOGD(AAFwkTag::APPMGR, "end");

}



void AppStateCallbackProxy::OnAppStateChanged(const AppProcessData &appProcessData)

{

    TAG_LOGD(AAFwkTag::APPMGR, "begin");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    data.WriteParcelable(&appProcessData);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_STATE_CHANGED), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

    TAG_LOGD(AAFwkTag::APPMGR, "end");

}



void AppStateCallbackProxy::NotifyConfigurationChange(const AppExecFwk::Configuration &config, int32_t userId)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write interface token failed.");

        return;

    }

    if (!data.WriteParcelable(&config)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write config failed.");

        return;

    }

    if (!data.WriteInt32(userId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write usr failed.");

        return;

    }

    auto error = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_CONFIG_CHANGE), data, reply, option);

    if (error != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "Send config error: %{public}d", error);

    }

}



void AppStateCallbackProxy::NotifyStartResidentProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(bundleInfos.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");

        return;

    }



    for (auto &bundleInfo : bundleInfos) {

        if (!data.WriteParcelable(&bundleInfo)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write bundle info failed");

            return;

        }

    }

    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_RESIDENT_PROCESS),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void AppStateCallbackProxy::NotifyStartKeepAliveProcess(std::vector<AppExecFwk::BundleInfo> &bundleInfos)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(bundleInfos.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write bundle info size failed.");

        return;

    }



    for (auto &bundleInfo : bundleInfos) {

        if (!data.WriteParcelable(&bundleInfo)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write bundle info failed");

            return;

        }

    }

    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_NOTIFY_START_KEEP_ALIVE_PROCESS),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void AppStateCallbackProxy::OnAppRemoteDied(const std::vector<sptr<IRemoteObject>> &abilityTokens)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(abilityTokens.size())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write token size failed.");

        return;

    }



    for (auto &token : abilityTokens) {

        if (!data.WriteRemoteObject(token.GetRefPtr())) {

            TAG_LOGE(AAFwkTag::APPMGR, "write token failed");

            return;

        }

    }

    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_REMOTE_DIED),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void AppStateCallbackProxy::NotifyAppPreCache(int32_t pid, int32_t userId)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        TAG_LOGE(AAFwkTag::APPMGR, "WriteInterfaceToken failed");

        return;

    }



    if (!data.WriteInt32(pid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write pid failed.");

        return;

    }



    if (!data.WriteInt32(userId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write userId failed.");

        return;

    }



    auto ret = SendTransactCmd(

        static_cast<uint32_t>(IAppStateCallback::Message::TRANSACT_ON_APP_PRE_CACHE),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



int32_t AppStateCallbackProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return ERR_NULL_OBJECT;

    }



    auto ret = remote->SendRequest(code, data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error code: %{public}d", ret);

        return ret;

    }

    return ret;

}

}  // namespace AppExecFwk

================================================================================
