关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_controller_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

AbilityControllerProxy::AbilityControllerProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IAbilityController>(impl)

{}



bool AbilityControllerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(AbilityControllerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");

        return false;

    }

    return true;

}



bool AbilityControllerProxy::AllowAbilityStart(const Want &want, const std::string &bundleName)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return true;

    }

    data.WriteParcelable(&want);

    data.WriteString(bundleName);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAbilityController::Message::TRANSACT_ON_ALLOW_ABILITY_START),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

        return true;

    }

    return reply.ReadBool();

}



bool AbilityControllerProxy::AllowAbilityBackground(const std::string &bundleName)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return true;

    }

    data.WriteString(bundleName);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAbilityController::Message::TRANSACT_ON_ALLOW_ABILITY_BACKGROUND),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

        return true;

    }

    return reply.ReadBool();

}



int32_t AbilityControllerProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

        return ERR_NULL_OBJECT;

    }



    return remote->SendRequest(code, data, reply, option);

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_controller_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

AbilityControllerProxy::AbilityControllerProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IAbilityController>(impl)

{}



bool AbilityControllerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(AbilityControllerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write token failed");

        return false;

    }

    return true;

}



bool AbilityControllerProxy::AllowAbilityStart(const Want &want, const std::string &bundleName)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return true;

    }

    data.WriteParcelable(&want);

    data.WriteString(bundleName);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAbilityController::Message::TRANSACT_ON_ALLOW_ABILITY_START),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

        return true;

    }

    return reply.ReadBool();

}



bool AbilityControllerProxy::AllowAbilityBackground(const std::string &bundleName)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return true;

    }

    data.WriteString(bundleName);

    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IAbilityController::Message::TRANSACT_ON_ALLOW_ABILITY_BACKGROUND),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest err: %{public}d", ret);

        return true;

    }

    return reply.ReadBool();

}



int32_t AbilityControllerProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "null remote");

        return ERR_NULL_OBJECT;

    }



    return remote->SendRequest(code, data, reply, option);

}

}  // namespace AppExecFwk

================================================================================
