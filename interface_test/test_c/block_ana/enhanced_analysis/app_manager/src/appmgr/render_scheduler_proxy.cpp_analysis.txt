关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/render_scheduler_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

RenderSchedulerProxy::RenderSchedulerProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IRenderScheduler>(impl)

{}



bool RenderSchedulerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(RenderSchedulerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void RenderSchedulerProxy::NotifyBrowserFd(int32_t ipcFd, int32_t sharedFd,

                                           int32_t crashFd, sptr<IRemoteObject> browser)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NotifyBrowserFd start");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (!data.WriteFileDescriptor(ipcFd) || !data.WriteFileDescriptor(sharedFd) ||

        !data.WriteFileDescriptor(crashFd)) {

        TAG_LOGE(AAFwkTag::APPMGR, "want fd failed, ipcFd:%{public}d, sharedFd:%{public}d, "

            "crashFd:%{public}d", ipcFd, sharedFd, crashFd);

        return;

    }



    if (!data.WriteRemoteObject(browser)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write browser failed!");

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

        return;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IRenderScheduler::Message::NOTIFY_BROWSER_FD), data,

        reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

    TAG_LOGD(AAFwkTag::APPMGR, "NotifyBrowserFd end");

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/render_scheduler_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

RenderSchedulerProxy::RenderSchedulerProxy(

    const sptr<IRemoteObject> &impl) : IRemoteProxy<IRenderScheduler>(impl)

{}



bool RenderSchedulerProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(RenderSchedulerProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void RenderSchedulerProxy::NotifyBrowserFd(int32_t ipcFd, int32_t sharedFd,

                                           int32_t crashFd, sptr<IRemoteObject> browser)

{

    TAG_LOGD(AAFwkTag::APPMGR, "NotifyBrowserFd start");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_ASYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }



    if (!data.WriteFileDescriptor(ipcFd) || !data.WriteFileDescriptor(sharedFd) ||

        !data.WriteFileDescriptor(crashFd)) {

        TAG_LOGE(AAFwkTag::APPMGR, "want fd failed, ipcFd:%{public}d, sharedFd:%{public}d, "

            "crashFd:%{public}d", ipcFd, sharedFd, crashFd);

        return;

    }



    if (!data.WriteRemoteObject(browser)) {

        TAG_LOGE(AAFwkTag::APPMGR, "write browser failed!");

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

        return;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IRenderScheduler::Message::NOTIFY_BROWSER_FD), data,

        reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

    TAG_LOGD(AAFwkTag::APPMGR, "NotifyBrowserFd end");

}

}  // namespace AppExecFwk

================================================================================
