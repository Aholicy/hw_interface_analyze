关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/child_scheduler_stub.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

ChildSchedulerStub::ChildSchedulerStub() {}



ChildSchedulerStub::~ChildSchedulerStub() {}



int32_t ChildSchedulerStub::OnRemoteRequest(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnReceived, code = %{public}u, flags= %{public}d.", code,

        option.GetFlags());

    std::u16string descriptor = ChildSchedulerStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");

        return ERR_INVALID_STATE;

    }



    switch (code) {

        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_LOAD_JS):

            return HandleScheduleLoadChild(data, reply);

        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_EXIT_PROCESS_SAFELY):

            return HandleScheduleExitProcessSafely(data, reply);

        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_RUN_NATIVE_PROC):

            return HandleScheduleRunNativeProc(data, reply);

    }

    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnRemoteRequest end");

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int32_t ChildSchedulerStub::HandleScheduleLoadChild(MessageParcel &data, MessageParcel &reply)

{

    ScheduleLoadChild();

    return ERR_NONE;

}



int32_t ChildSchedulerStub::HandleScheduleExitProcessSafely(MessageParcel &data, MessageParcel &reply)

{

    ScheduleExitProcessSafely();

    return ERR_NONE;

}



int32_t ChildSchedulerStub::HandleScheduleRunNativeProc(MessageParcel &data, MessageParcel &reply)

{

    sptr<IRemoteObject> cb = data.ReadRemoteObject();

    ScheduleRunNativeProc(cb);

    return ERR_NONE;

}



}  // namespace AppExecFwk

}  // namespace OHOS
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/child_scheduler_stub.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

ChildSchedulerStub::ChildSchedulerStub() {}



ChildSchedulerStub::~ChildSchedulerStub() {}



int32_t ChildSchedulerStub::OnRemoteRequest(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnReceived, code = %{public}u, flags= %{public}d.", code,

        option.GetFlags());

    std::u16string descriptor = ChildSchedulerStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "A local descriptor is not equivalent to a remote");

        return ERR_INVALID_STATE;

    }



    switch (code) {

        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_LOAD_JS):

            return HandleScheduleLoadChild(data, reply);

        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_EXIT_PROCESS_SAFELY):

            return HandleScheduleExitProcessSafely(data, reply);

        case static_cast<uint32_t>(IChildScheduler::Message::SCHEDULE_RUN_NATIVE_PROC):

            return HandleScheduleRunNativeProc(data, reply);

    }

    TAG_LOGI(AAFwkTag::APPMGR, "ChildSchedulerStub::OnRemoteRequest end");

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



int32_t ChildSchedulerStub::HandleScheduleLoadChild(MessageParcel &data, MessageParcel &reply)

{

    ScheduleLoadChild();

    return ERR_NONE;

}



int32_t ChildSchedulerStub::HandleScheduleExitProcessSafely(MessageParcel &data, MessageParcel &reply)

{

    ScheduleExitProcessSafely();

    return ERR_NONE;

}



int32_t ChildSchedulerStub::HandleScheduleRunNativeProc(MessageParcel &data, MessageParcel &reply)

{

    sptr<IRemoteObject> cb = data.ReadRemoteObject();

    ScheduleRunNativeProc(cb);

    return ERR_NONE;

}



}  // namespace AppExecFwk

================================================================================
