关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/kia_interceptor_proxy.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

bool KiaInterceptorProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(KiaInterceptorProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



int KiaInterceptorProxy::OnIntercept(AAFwk::Want &want)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return ERR_INVALID_VALUE;

    }

    data.WriteParcelable(&want);

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

        return ERR_INVALID_VALUE;

    }

    int32_t ret = remote->SendRequest(static_cast<uint32_t>(IKiaInterceptor::KIA_INTERCEPTOR_ON_INTERCEPT),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);

        return ret;

    }

    int resultCode = reply.ReadInt32();

    if (resultCode != ERR_OK) {

        TAG_LOGE(AAFwkTag::APPMGR, "OnIntercept failed, resultCode=%{public}d.", resultCode);

        return resultCode;

    }

    sptr<AAFwk::Want> resultWant = reply.ReadParcelable<AAFwk::Want>();

    if (resultWant == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "resultWant is nullptr.");

        return ERR_INVALID_VALUE;

    }

    want = *resultWant;

    return resultCode;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/kia_interceptor_proxy.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

bool KiaInterceptorProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(KiaInterceptorProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



int KiaInterceptorProxy::OnIntercept(AAFwk::Want &want)

{

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return ERR_INVALID_VALUE;

    }

    data.WriteParcelable(&want);

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote() is NULL");

        return ERR_INVALID_VALUE;

    }

    int32_t ret = remote->SendRequest(static_cast<uint32_t>(IKiaInterceptor::KIA_INTERCEPTOR_ON_INTERCEPT),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGE(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d.", ret);

        return ret;

    }

    int resultCode = reply.ReadInt32();

    if (resultCode != ERR_OK) {

        TAG_LOGE(AAFwkTag::APPMGR, "OnIntercept failed, resultCode=%{public}d.", resultCode);

        return resultCode;

    }

    sptr<AAFwk::Want> resultWant = reply.ReadParcelable<AAFwk::Want>();

    if (resultWant == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "resultWant is nullptr.");

        return ERR_INVALID_VALUE;

    }

    want = *resultWant;

    return resultCode;

}

}  // namespace AppExecFwk

================================================================================
