关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/running_multi_info.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

bool RunningMultiAppInfo::ReadFromParcel(Parcel &parcel)

{

    bundleName = Str16ToStr8(parcel.ReadString16());

    mode = parcel.ReadInt32();

    int32_t runningAppClonesSize;

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningAppClonesSize);

    if (runningAppClonesSize > MAX_CLONE_APP_NUM) {

        return false;

    }

    for (auto i = 0; i < runningAppClonesSize; i++) {

        RunningAppClone clone;

        clone.appCloneIndex = parcel.ReadInt32();

        clone.uid = parcel.ReadInt32();

        parcel.ReadInt32Vector(&clone.pids);

        runningAppClones.emplace_back(clone);

    }



    int32_t runningMultiIntanceInfosSize;

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningMultiIntanceInfosSize);

    if (runningMultiIntanceInfosSize > MAX_INSTANCE_NUM) {

        return false;

    }

    for (auto i = 0; i < runningMultiIntanceInfosSize; i++) {

        RunningMultiInstanceInfo instanceInfo;

        instanceInfo.instanceKey = Str16ToStr8(parcel.ReadString16());

        instanceInfo.uid = parcel.ReadInt32();

        parcel.ReadInt32Vector(&instanceInfo.pids);

        runningMultiIntanceInfos.emplace_back(instanceInfo);

    }

    return true;

}



RunningMultiAppInfo *RunningMultiAppInfo::Unmarshalling(Parcel &parcel)

{

    RunningMultiAppInfo *info = new (std::nothrow) RunningMultiAppInfo();

    if (info && !info->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");

        delete info;

        info = nullptr;

    }

    return info;

}



bool RunningMultiAppInfo::Marshalling(Parcel &parcel) const

{

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(bundleName));

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, mode);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningAppClones.size());

    if (runningAppClones.size() > MAX_CLONE_APP_NUM) {

        return false;

    }

    for (auto &clone : runningAppClones) {

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, clone.appCloneIndex);

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, clone.uid);

        if (!parcel.WriteInt32Vector(clone.pids)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write runningAppClones failed.");

            return false;

        }

    }

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningMultiIntanceInfos.size());

    if (runningMultiIntanceInfos.size() > MAX_INSTANCE_NUM) {

        return false;

    }

    for (auto &instanceInfo : runningMultiIntanceInfos) {

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(instanceInfo.instanceKey));

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, instanceInfo.uid);

        if (!parcel.WriteInt32Vector(instanceInfo.pids)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write runningMultiIntanceInfos failed.");

            return false;

        }

    }

    return true;

}

}  // namespace AppExecFwk

}  // namespace OHOS
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/running_multi_info.cpp:25
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

bool RunningMultiAppInfo::ReadFromParcel(Parcel &parcel)

{

    bundleName = Str16ToStr8(parcel.ReadString16());

    mode = parcel.ReadInt32();

    int32_t runningAppClonesSize;

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningAppClonesSize);

    if (runningAppClonesSize > MAX_CLONE_APP_NUM) {

        return false;

    }

    for (auto i = 0; i < runningAppClonesSize; i++) {

        RunningAppClone clone;

        clone.appCloneIndex = parcel.ReadInt32();

        clone.uid = parcel.ReadInt32();

        parcel.ReadInt32Vector(&clone.pids);

        runningAppClones.emplace_back(clone);

    }



    int32_t runningMultiIntanceInfosSize;

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningMultiIntanceInfosSize);

    if (runningMultiIntanceInfosSize > MAX_INSTANCE_NUM) {

        return false;

    }

    for (auto i = 0; i < runningMultiIntanceInfosSize; i++) {

        RunningMultiInstanceInfo instanceInfo;

        instanceInfo.instanceKey = Str16ToStr8(parcel.ReadString16());

        instanceInfo.uid = parcel.ReadInt32();

        parcel.ReadInt32Vector(&instanceInfo.pids);

        runningMultiIntanceInfos.emplace_back(instanceInfo);

    }

    return true;

}



RunningMultiAppInfo *RunningMultiAppInfo::Unmarshalling(Parcel &parcel)

{

    RunningMultiAppInfo *info = new (std::nothrow) RunningMultiAppInfo();

    if (info && !info->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "read from parcel failed");

        delete info;

        info = nullptr;

    }

    return info;

}



bool RunningMultiAppInfo::Marshalling(Parcel &parcel) const

{

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(bundleName));

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, mode);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningAppClones.size());

    if (runningAppClones.size() > MAX_CLONE_APP_NUM) {

        return false;

    }

    for (auto &clone : runningAppClones) {

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, clone.appCloneIndex);

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, clone.uid);

        if (!parcel.WriteInt32Vector(clone.pids)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write runningAppClones failed.");

            return false;

        }

    }

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, runningMultiIntanceInfos.size());

    if (runningMultiIntanceInfos.size() > MAX_INSTANCE_NUM) {

        return false;

    }

    for (auto &instanceInfo : runningMultiIntanceInfos) {

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(instanceInfo.instanceKey));

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, instanceInfo.uid);

        if (!parcel.WriteInt32Vector(instanceInfo.pids)) {

            TAG_LOGE(AAFwkTag::APPMGR, "write runningMultiIntanceInfos failed.");

            return false;

        }

    }

    return true;

}

}  // namespace AppExecFwk

================================================================================
