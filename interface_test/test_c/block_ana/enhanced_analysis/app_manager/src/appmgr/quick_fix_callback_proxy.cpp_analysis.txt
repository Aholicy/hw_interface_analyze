关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/quick_fix_callback_proxy.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

void QuickFixCallbackProxy::OnLoadPatchDone(int32_t resultCode, int32_t recordId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");



    MessageParcel data;

    MessageParcel reply;

    WRITE_PARCEL_AND_RETURN(InterfaceToken, data, QuickFixCallbackProxy::GetDescriptor());

    WRITE_PARCEL_AND_RETURN(Int32, data, resultCode);

    WRITE_PARCEL_AND_RETURN(Int32, data, recordId);

    if (!SendRequestWithCmd(IQuickFixCallback::QuickFixCallbackCmd::ON_NOTIFY_LOAD_PATCH, data, reply)) {

        return;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "function finished.");

    return;

}



void QuickFixCallbackProxy::OnUnloadPatchDone(int32_t resultCode, int32_t recordId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");



    MessageParcel data;

    MessageParcel reply;

    WRITE_PARCEL_AND_RETURN(InterfaceToken, data, QuickFixCallbackProxy::GetDescriptor());

    WRITE_PARCEL_AND_RETURN(Int32, data, resultCode);

    WRITE_PARCEL_AND_RETURN(Int32, data, recordId);

    if (!SendRequestWithCmd(IQuickFixCallback::QuickFixCallbackCmd::ON_NOTIFY_UNLOAD_PATCH, data, reply)) {

        return;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "function finished.");

    return;

}



void QuickFixCallbackProxy::OnReloadPageDone(int32_t resultCode, int32_t recordId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");



    MessageParcel data;

    MessageParcel reply;

    WRITE_PARCEL_AND_RETURN(InterfaceToken, data, QuickFixCallbackProxy::GetDescriptor());

    WRITE_PARCEL_AND_RETURN(Int32, data, resultCode);

    WRITE_PARCEL_AND_RETURN(Int32, data, recordId);

    if (!SendRequestWithCmd(IQuickFixCallback::QuickFixCallbackCmd::ON_NOTIFY_RELOAD_PAGE, data, reply)) {

        return;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "function finished.");

    return;

}



bool QuickFixCallbackProxy::SendRequestWithCmd(uint32_t code, MessageParcel &data, MessageParcel &reply)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return false;

    }



    MessageOption option(MessageOption::TF_SYNC);

    auto ret = remote->SendRequest(code, data, reply, option);

    if (ret != 0) {

        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error %{public}d.", ret);

        return false;

    }



    return true;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/quick_fix_callback_proxy.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

void QuickFixCallbackProxy::OnLoadPatchDone(int32_t resultCode, int32_t recordId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");



    MessageParcel data;

    MessageParcel reply;

    WRITE_PARCEL_AND_RETURN(InterfaceToken, data, QuickFixCallbackProxy::GetDescriptor());

    WRITE_PARCEL_AND_RETURN(Int32, data, resultCode);

    WRITE_PARCEL_AND_RETURN(Int32, data, recordId);

    if (!SendRequestWithCmd(IQuickFixCallback::QuickFixCallbackCmd::ON_NOTIFY_LOAD_PATCH, data, reply)) {

        return;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "function finished.");

    return;

}



void QuickFixCallbackProxy::OnUnloadPatchDone(int32_t resultCode, int32_t recordId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");



    MessageParcel data;

    MessageParcel reply;

    WRITE_PARCEL_AND_RETURN(InterfaceToken, data, QuickFixCallbackProxy::GetDescriptor());

    WRITE_PARCEL_AND_RETURN(Int32, data, resultCode);

    WRITE_PARCEL_AND_RETURN(Int32, data, recordId);

    if (!SendRequestWithCmd(IQuickFixCallback::QuickFixCallbackCmd::ON_NOTIFY_UNLOAD_PATCH, data, reply)) {

        return;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "function finished.");

    return;

}



void QuickFixCallbackProxy::OnReloadPageDone(int32_t resultCode, int32_t recordId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "called");



    MessageParcel data;

    MessageParcel reply;

    WRITE_PARCEL_AND_RETURN(InterfaceToken, data, QuickFixCallbackProxy::GetDescriptor());

    WRITE_PARCEL_AND_RETURN(Int32, data, resultCode);

    WRITE_PARCEL_AND_RETURN(Int32, data, recordId);

    if (!SendRequestWithCmd(IQuickFixCallback::QuickFixCallbackCmd::ON_NOTIFY_RELOAD_PAGE, data, reply)) {

        return;

    }



    TAG_LOGD(AAFwkTag::APPMGR, "function finished.");

    return;

}



bool QuickFixCallbackProxy::SendRequestWithCmd(uint32_t code, MessageParcel &data, MessageParcel &reply)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return false;

    }



    MessageOption option(MessageOption::TF_SYNC);

    auto ret = remote->SendRequest(code, data, reply, option);

    if (ret != 0) {

        TAG_LOGE(AAFwkTag::APPMGR, "Send request failed with error %{public}d.", ret);

        return false;

    }



    return true;

}

}  // namespace AppExecFwk

================================================================================
