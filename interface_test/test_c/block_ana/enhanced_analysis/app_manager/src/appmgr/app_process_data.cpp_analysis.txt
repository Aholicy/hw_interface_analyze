关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_process_data.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

namespace {

constexpr int32_t CYCLE_LIMIT = 1000;

bool ReadFromParcelAppData(std::vector<AppData> &appDatas, Parcel &parcel)

{

    int32_t appDataSize;

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appDataSize);

    if (appDataSize > CYCLE_LIMIT) {

        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

        return false;

    }

    for (auto i = 0; i < appDataSize; i++) {

        AppData appDataInfo;

        std::string appName = Str16ToStr8(parcel.ReadString16());

        int32_t uid = parcel.ReadInt32();

        appDataInfo.appName = appName;

        appDataInfo.uid = uid;

        appDatas.emplace_back(appDataInfo);

    }

    return true;

}

}  // namespace



bool AppProcessData::Marshalling(Parcel &parcel) const

{

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(processName));



    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(appState));



    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, pid);



    const auto appDataSize = static_cast<int32_t>(appDatas.size());

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appDataSize);

    for (auto i = 0; i < appDataSize; i++) {

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(appDatas[i].appName));

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appDatas[i].uid);

    }



    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isFocused);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32Vector, parcel, renderPids);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appIndex);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(instanceKey));

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(bundleName));



    return true;

}



bool AppProcessData::ReadFromParcel(Parcel &parcel)

{

    processName = Str16ToStr8(parcel.ReadString16());



    appState = static_cast<ApplicationState>(parcel.ReadInt32());



    pid = parcel.ReadInt32();



    ReadFromParcelAppData(appDatas, parcel);



    isFocused = parcel.ReadBool();

    parcel.ReadInt32Vector(&renderPids);

    appIndex = parcel.ReadInt32();

    instanceKey = Str16ToStr8(parcel.ReadString16());

    bundleName = Str16ToStr8(parcel.ReadString16());



    return true;

}



AppProcessData *AppProcessData::Unmarshalling(Parcel &parcel)

{

    AppProcessData *appProcessData = new (std::nothrow) AppProcessData();

    if (appProcessData && !appProcessData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

        delete appProcessData;

        appProcessData = nullptr;

    }

    return appProcessData;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_process_data.cpp:25
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

namespace {

constexpr int32_t CYCLE_LIMIT = 1000;

bool ReadFromParcelAppData(std::vector<AppData> &appDatas, Parcel &parcel)

{

    int32_t appDataSize;

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appDataSize);

    if (appDataSize > CYCLE_LIMIT) {

        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

        return false;

    }

    for (auto i = 0; i < appDataSize; i++) {

        AppData appDataInfo;

        std::string appName = Str16ToStr8(parcel.ReadString16());

        int32_t uid = parcel.ReadInt32();

        appDataInfo.appName = appName;

        appDataInfo.uid = uid;

        appDatas.emplace_back(appDataInfo);

    }

    return true;

}

}  // namespace



bool AppProcessData::Marshalling(Parcel &parcel) const

{

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(processName));



    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, static_cast<int32_t>(appState));



    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, pid);



    const auto appDataSize = static_cast<int32_t>(appDatas.size());

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appDataSize);

    for (auto i = 0; i < appDataSize; i++) {

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(appDatas[i].appName));

        WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appDatas[i].uid);

    }



    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Bool, parcel, isFocused);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32Vector, parcel, renderPids);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appIndex);

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(instanceKey));

    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String16, parcel, Str8ToStr16(bundleName));



    return true;

}



bool AppProcessData::ReadFromParcel(Parcel &parcel)

{

    processName = Str16ToStr8(parcel.ReadString16());



    appState = static_cast<ApplicationState>(parcel.ReadInt32());



    pid = parcel.ReadInt32();



    ReadFromParcelAppData(appDatas, parcel);



    isFocused = parcel.ReadBool();

    parcel.ReadInt32Vector(&renderPids);

    appIndex = parcel.ReadInt32();

    instanceKey = Str16ToStr8(parcel.ReadString16());

    bundleName = Str16ToStr8(parcel.ReadString16());



    return true;

}



AppProcessData *AppProcessData::Unmarshalling(Parcel &parcel)

{

    AppProcessData *appProcessData = new (std::nothrow) AppProcessData();

    if (appProcessData && !appProcessData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

        delete appProcessData;

        appProcessData = nullptr;

    }

    return appProcessData;

}

}  // namespace AppExecFwk

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_process_data.cpp:26
重要性权重: 1
综合评分: 0
代码片段:
namespace {

constexpr int32_t CYCLE_LIMIT = 1000;

bool ReadFromParcelAppData(std::vector<AppData> &appDatas, Parcel &parcel)

{

    int32_t appDataSize;

    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, parcel, appDataSize);

    if (appDataSize > CYCLE_LIMIT) {

        TAG_LOGE(AAFwkTag::APPMGR, "infoSize is too large");

        return false;

    }

    for (auto i = 0; i < appDataSize; i++) {

        AppData appDataInfo;

        std::string appName = Str16ToStr8(parcel.ReadString16());

        int32_t uid = parcel.ReadInt32();

        appDataInfo.appName = appName;

        appDataInfo.uid = uid;

        appDatas.emplace_back(appDataInfo);

    }

    return true;

}

}  // namespace

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_process_data.cpp:27
重要性权重: 1
综合评分: 0
代码片段:
constexpr int32_t CYCLE_LIMIT = 1000;

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/app_process_data.cpp:28
重要性权重: 1
综合评分: 0
代码片段:
bool ReadFromParcelAppData(std::vector<AppData> &appDatas, Parcel &parcel)

================================================================================
