关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_info_callback_stub.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

AbilityInfoCallbackStub::AbilityInfoCallbackStub() {}



AbilityInfoCallbackStub::~AbilityInfoCallbackStub() {}



int AbilityInfoCallbackStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGI(AAFwkTag::APPMGR, "code: %{public}u, flags: %{public}d", code,

        option.GetFlags());

    std::u16string descriptor = AbilityInfoCallbackStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");

        return ERR_INVALID_STATE;

    }



    if (code == static_cast<uint32_t>(IAbilityInfoCallback::Notify_ABILITY_TOKEN)) {

        return HandleNotifyAbilityToken(data, reply);

    }



    TAG_LOGI(AAFwkTag::APPMGR, "end");

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



void AbilityInfoCallbackStub::NotifyAbilityToken(const sptr<IRemoteObject> token, const Want &want)

{

}



int32_t AbilityInfoCallbackStub::HandleNotifyAbilityToken(MessageParcel &data, MessageParcel &reply)

{

    TAG_LOGI(AAFwkTag::APPMGR, "called");

    sptr<IRemoteObject> token = data.ReadRemoteObject();

    Want *want = data.ReadParcelable<Want>();



    if (!want) {

        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Want> failed");

        return ERR_APPEXECFWK_PARCEL_ERROR;

    }

    NotifyAbilityToken(token, *want);

    delete want;

    return NO_ERROR;

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_info_callback_stub.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

AbilityInfoCallbackStub::AbilityInfoCallbackStub() {}



AbilityInfoCallbackStub::~AbilityInfoCallbackStub() {}



int AbilityInfoCallbackStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGI(AAFwkTag::APPMGR, "code: %{public}u, flags: %{public}d", code,

        option.GetFlags());

    std::u16string descriptor = AbilityInfoCallbackStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");

        return ERR_INVALID_STATE;

    }



    if (code == static_cast<uint32_t>(IAbilityInfoCallback::Notify_ABILITY_TOKEN)) {

        return HandleNotifyAbilityToken(data, reply);

    }



    TAG_LOGI(AAFwkTag::APPMGR, "end");

    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}



void AbilityInfoCallbackStub::NotifyAbilityToken(const sptr<IRemoteObject> token, const Want &want)

{

}



int32_t AbilityInfoCallbackStub::HandleNotifyAbilityToken(MessageParcel &data, MessageParcel &reply)

{

    TAG_LOGI(AAFwkTag::APPMGR, "called");

    sptr<IRemoteObject> token = data.ReadRemoteObject();

    Want *want = data.ReadParcelable<Want>();



    if (!want) {

        TAG_LOGE(AAFwkTag::APPMGR, "ReadParcelable<Want> failed");

        return ERR_APPEXECFWK_PARCEL_ERROR;

    }

    NotifyAbilityToken(token, *want);

    delete want;

    return NO_ERROR;

}

}  // namespace AppExecFwk

================================================================================
