关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/start_specified_ability_response_proxy.cpp:20
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

StartSpecifiedAbilityResponseProxy::StartSpecifiedAbilityResponseProxy(const sptr<IRemoteObject> &impl)

    : IRemoteProxy<IStartSpecifiedAbilityResponse>(impl)

{}



bool StartSpecifiedAbilityResponseProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(StartSpecifiedAbilityResponseProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void StartSpecifiedAbilityResponseProxy::OnAcceptWantResponse(

    const AAFwk::Want &want, const std::string &flag, int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On accept want by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || !data.WriteString(flag) ||

        !data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IStartSpecifiedAbilityResponse::Message::ON_ACCEPT_WANT_RESPONSE), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void StartSpecifiedAbilityResponseProxy::OnTimeoutResponse(const AAFwk::Want &want, int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On timeout response by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || !data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    int32_t ret = SendTransactCmd(static_cast<uint32_t>(

        IStartSpecifiedAbilityResponse::Message::ON_TIMEOUT_RESPONSE), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



int32_t StartSpecifiedAbilityResponseProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return ERR_NULL_OBJECT;

    }



    return remote->SendRequest(code, data, reply, option);

}



void StartSpecifiedAbilityResponseProxy::OnNewProcessRequestResponse(const AAFwk::Want &want, const std::string &flag,

    int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On satrt specified process response by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || !data.WriteString(flag) ||

        !data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IStartSpecifiedAbilityResponse::Message::ON_NEW_PROCESS_REQUEST_RESPONSE),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void StartSpecifiedAbilityResponseProxy::OnNewProcessRequestTimeoutResponse(const AAFwk::Want &want,

    int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On start specified process timeout response by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return;

    }

    int32_t ret = remote->SendRequest(static_cast<uint32_t>(

        IStartSpecifiedAbilityResponse::Message::ON_NEW_PROCESS_REQUEST_TIMEOUT_RESPONSE),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}

}  // namespace AppExecFwk

}  // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/start_specified_ability_response_proxy.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

StartSpecifiedAbilityResponseProxy::StartSpecifiedAbilityResponseProxy(const sptr<IRemoteObject> &impl)

    : IRemoteProxy<IStartSpecifiedAbilityResponse>(impl)

{}



bool StartSpecifiedAbilityResponseProxy::WriteInterfaceToken(MessageParcel &data)

{

    if (!data.WriteInterfaceToken(StartSpecifiedAbilityResponseProxy::GetDescriptor())) {

        TAG_LOGE(AAFwkTag::APPMGR, "write interface token failed");

        return false;

    }

    return true;

}



void StartSpecifiedAbilityResponseProxy::OnAcceptWantResponse(

    const AAFwk::Want &want, const std::string &flag, int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On accept want by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || !data.WriteString(flag) ||

        !data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    int32_t ret = SendTransactCmd(

        static_cast<uint32_t>(IStartSpecifiedAbilityResponse::Message::ON_ACCEPT_WANT_RESPONSE), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void StartSpecifiedAbilityResponseProxy::OnTimeoutResponse(const AAFwk::Want &want, int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On timeout response by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || !data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    int32_t ret = SendTransactCmd(static_cast<uint32_t>(

        IStartSpecifiedAbilityResponse::Message::ON_TIMEOUT_RESPONSE), data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



int32_t StartSpecifiedAbilityResponseProxy::SendTransactCmd(uint32_t code, MessageParcel &data,

    MessageParcel &reply, MessageOption &option)

{

    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return ERR_NULL_OBJECT;

    }



    return remote->SendRequest(code, data, reply, option);

}



void StartSpecifiedAbilityResponseProxy::OnNewProcessRequestResponse(const AAFwk::Want &want, const std::string &flag,

    int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On satrt specified process response by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || !data.WriteString(flag) ||

        !data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return;

    }

    int32_t ret = remote->SendRequest(

        static_cast<uint32_t>(IStartSpecifiedAbilityResponse::Message::ON_NEW_PROCESS_REQUEST_RESPONSE),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}



void StartSpecifiedAbilityResponseProxy::OnNewProcessRequestTimeoutResponse(const AAFwk::Want &want,

    int32_t requestId)

{

    TAG_LOGD(AAFwkTag::APPMGR, "On start specified process timeout response by proxy.");

    MessageParcel data;

    MessageParcel reply;

    MessageOption option(MessageOption::TF_SYNC);

    if (!WriteInterfaceToken(data)) {

        return;

    }

    if (!data.WriteParcelable(&want) || data.WriteInt32(requestId)) {

        TAG_LOGE(AAFwkTag::APPMGR, "Write data failed.");

        return;

    }



    sptr<IRemoteObject> remote = Remote();

    if (remote == nullptr) {

        TAG_LOGE(AAFwkTag::APPMGR, "Remote is nullptr.");

        return;

    }

    int32_t ret = remote->SendRequest(static_cast<uint32_t>(

        IStartSpecifiedAbilityResponse::Message::ON_NEW_PROCESS_REQUEST_TIMEOUT_RESPONSE),

        data, reply, option);

    if (ret != NO_ERROR) {

        TAG_LOGW(AAFwkTag::APPMGR, "SendRequest is failed, error code: %{public}d", ret);

    }

}

}  // namespace AppExecFwk

================================================================================
