关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/page_state_data.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

bool PageStateData::ReadFromParcel(Parcel &parcel)

{

    bundleName = parcel.ReadString();

    moduleName = parcel.ReadString();

    abilityName = parcel.ReadString();

    pageName = parcel.ReadString();

    targetBundleName = parcel.ReadString();

    targetModuleName = parcel.ReadString();



    return true;

}



bool PageStateData::Marshalling(Parcel &parcel) const

{

    return (parcel.WriteString(bundleName) &&

        parcel.WriteString(moduleName) &&

        parcel.WriteString(abilityName) &&

        parcel.WriteString(pageName) &&

        parcel.WriteString(targetBundleName) &&

        parcel.WriteString(targetModuleName));

}



PageStateData *PageStateData::Unmarshalling(Parcel &parcel)

{

    PageStateData *pageStateData = new (std::nothrow) PageStateData();

    if (pageStateData && !pageStateData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

        delete pageStateData;

        pageStateData = nullptr;

    }

    return pageStateData;

}

}

}
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/page_state_data.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

bool PageStateData::ReadFromParcel(Parcel &parcel)

{

    bundleName = parcel.ReadString();

    moduleName = parcel.ReadString();

    abilityName = parcel.ReadString();

    pageName = parcel.ReadString();

    targetBundleName = parcel.ReadString();

    targetModuleName = parcel.ReadString();



    return true;

}



bool PageStateData::Marshalling(Parcel &parcel) const

{

    return (parcel.WriteString(bundleName) &&

        parcel.WriteString(moduleName) &&

        parcel.WriteString(abilityName) &&

        parcel.WriteString(pageName) &&

        parcel.WriteString(targetBundleName) &&

        parcel.WriteString(targetModuleName));

}



PageStateData *PageStateData::Unmarshalling(Parcel &parcel)

{

    PageStateData *pageStateData = new (std::nothrow) PageStateData();

    if (pageStateData && !pageStateData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "failed, because ReadFromParcel failed");

        delete pageStateData;

        pageStateData = nullptr;

    }

    return pageStateData;

}

}

================================================================================
