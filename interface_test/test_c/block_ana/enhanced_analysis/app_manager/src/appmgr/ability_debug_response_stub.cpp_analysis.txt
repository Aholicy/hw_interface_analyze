关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_stub.cpp:23
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

namespace {

constexpr int32_t CYCLE_LIMIT_MIN = 0;

constexpr int32_t CYCLE_LIMIT_MAX = 1000;

}

AbilityDebugResponseStub::AbilityDebugResponseStub() {}



AbilityDebugResponseStub::~AbilityDebugResponseStub() {}



int32_t AbilityDebugResponseStub::HandleOnAbilitysDebugStarted(MessageParcel &data, MessageParcel &reply)

{

    auto tokenSize = data.ReadInt32();

    if (tokenSize <= CYCLE_LIMIT_MIN || tokenSize > CYCLE_LIMIT_MAX) {

        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit");

        return ERR_INVALID_DATA;

    }



    std::vector<sptr<IRemoteObject>> tokens;

    for (int32_t index = 0; index < tokenSize; index++) {

        auto token = data.ReadRemoteObject();

        if (token == nullptr) {

            TAG_LOGE(AAFwkTag::APPMGR, "null token");

            return ERR_INVALID_DATA;

        }

        tokens.push_back(token);

    }

    OnAbilitysDebugStarted(tokens);

    return NO_ERROR;

}



int32_t AbilityDebugResponseStub::HandleOnAbilitysDebugStoped(MessageParcel &data, MessageParcel &reply)

{

    auto tokenSize = data.ReadInt32();

    if (tokenSize <= CYCLE_LIMIT_MIN || tokenSize > CYCLE_LIMIT_MAX) {

        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit");

        return ERR_INVALID_DATA;

    }



    std::vector<sptr<IRemoteObject>> tokens;

    for (int32_t index = 0; index < tokenSize; index++) {

        auto token = data.ReadRemoteObject();

        if (token == nullptr) {

            TAG_LOGE(AAFwkTag::APPMGR, "null token");

            return ERR_INVALID_DATA;

        }

        tokens.push_back(token);

    }

    OnAbilitysDebugStoped(tokens);

    return NO_ERROR;

}



int32_t AbilityDebugResponseStub::HandleOnAbilitysAssertDebugChange(MessageParcel &data, MessageParcel &reply)

{

    auto tokenSize = data.ReadInt32();

    if (tokenSize <= CYCLE_LIMIT_MIN || tokenSize > CYCLE_LIMIT_MAX) {

        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit");

        return ERR_INVALID_DATA;

    }



    std::vector<sptr<IRemoteObject>> tokens;

    for (int32_t index = 0; index < tokenSize; index++) {

        auto token = data.ReadRemoteObject();

        if (token == nullptr) {

            TAG_LOGE(AAFwkTag::APPMGR, "null token");

            return ERR_INVALID_DATA;

        }

        tokens.push_back(token);

    }

    auto isAssertDebug = data.ReadBool();

    OnAbilitysAssertDebugChange(tokens, isAssertDebug);

    return NO_ERROR;

}



int AbilityDebugResponseStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "code: %{public}u, flags: %{public}d", code, option.GetFlags());

    std::u16string descriptor = AbilityDebugResponseStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");

        return ERR_INVALID_STATE;

    }



    switch (code) {

        case static_cast<uint32_t>(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STARTED):

            return HandleOnAbilitysDebugStarted(data, reply);

        case static_cast<uint32_t>(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STOPED):

            return HandleOnAbilitysDebugStoped(data, reply);

    }



    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}

} // namespace AppExecFwk

} // namespace OHOS

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_stub.cpp:24
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

namespace {

constexpr int32_t CYCLE_LIMIT_MIN = 0;

constexpr int32_t CYCLE_LIMIT_MAX = 1000;

}

AbilityDebugResponseStub::AbilityDebugResponseStub() {}



AbilityDebugResponseStub::~AbilityDebugResponseStub() {}



int32_t AbilityDebugResponseStub::HandleOnAbilitysDebugStarted(MessageParcel &data, MessageParcel &reply)

{

    auto tokenSize = data.ReadInt32();

    if (tokenSize <= CYCLE_LIMIT_MIN || tokenSize > CYCLE_LIMIT_MAX) {

        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit");

        return ERR_INVALID_DATA;

    }



    std::vector<sptr<IRemoteObject>> tokens;

    for (int32_t index = 0; index < tokenSize; index++) {

        auto token = data.ReadRemoteObject();

        if (token == nullptr) {

            TAG_LOGE(AAFwkTag::APPMGR, "null token");

            return ERR_INVALID_DATA;

        }

        tokens.push_back(token);

    }

    OnAbilitysDebugStarted(tokens);

    return NO_ERROR;

}



int32_t AbilityDebugResponseStub::HandleOnAbilitysDebugStoped(MessageParcel &data, MessageParcel &reply)

{

    auto tokenSize = data.ReadInt32();

    if (tokenSize <= CYCLE_LIMIT_MIN || tokenSize > CYCLE_LIMIT_MAX) {

        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit");

        return ERR_INVALID_DATA;

    }



    std::vector<sptr<IRemoteObject>> tokens;

    for (int32_t index = 0; index < tokenSize; index++) {

        auto token = data.ReadRemoteObject();

        if (token == nullptr) {

            TAG_LOGE(AAFwkTag::APPMGR, "null token");

            return ERR_INVALID_DATA;

        }

        tokens.push_back(token);

    }

    OnAbilitysDebugStoped(tokens);

    return NO_ERROR;

}



int32_t AbilityDebugResponseStub::HandleOnAbilitysAssertDebugChange(MessageParcel &data, MessageParcel &reply)

{

    auto tokenSize = data.ReadInt32();

    if (tokenSize <= CYCLE_LIMIT_MIN || tokenSize > CYCLE_LIMIT_MAX) {

        TAG_LOGE(AAFwkTag::APPMGR, "Token size exceeds limit");

        return ERR_INVALID_DATA;

    }



    std::vector<sptr<IRemoteObject>> tokens;

    for (int32_t index = 0; index < tokenSize; index++) {

        auto token = data.ReadRemoteObject();

        if (token == nullptr) {

            TAG_LOGE(AAFwkTag::APPMGR, "null token");

            return ERR_INVALID_DATA;

        }

        tokens.push_back(token);

    }

    auto isAssertDebug = data.ReadBool();

    OnAbilitysAssertDebugChange(tokens, isAssertDebug);

    return NO_ERROR;

}



int AbilityDebugResponseStub::OnRemoteRequest(

    uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option)

{

    TAG_LOGD(AAFwkTag::APPMGR, "code: %{public}u, flags: %{public}d", code, option.GetFlags());

    std::u16string descriptor = AbilityDebugResponseStub::GetDescriptor();

    std::u16string remoteDescriptor = data.ReadInterfaceToken();

    if (descriptor != remoteDescriptor) {

        TAG_LOGE(AAFwkTag::APPMGR, "invalid descriptor");

        return ERR_INVALID_STATE;

    }



    switch (code) {

        case static_cast<uint32_t>(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STARTED):

            return HandleOnAbilitysDebugStarted(data, reply);

        case static_cast<uint32_t>(IAbilityDebugResponse::Message::ON_ABILITYS_DEBUG_STOPED):

            return HandleOnAbilitysDebugStoped(data, reply);

    }



    return IPCObjectStub::OnRemoteRequest(code, data, reply, option);

}

} // namespace AppExecFwk

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_stub.cpp:25
重要性权重: 1
综合评分: 0
代码片段:
namespace {

constexpr int32_t CYCLE_LIMIT_MIN = 0;

constexpr int32_t CYCLE_LIMIT_MAX = 1000;

}

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_stub.cpp:26
重要性权重: 1
综合评分: 0
代码片段:
constexpr int32_t CYCLE_LIMIT_MIN = 0;

================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/ability_debug_response_stub.cpp:27
重要性权重: 1
综合评分: 0
代码片段:
constexpr int32_t CYCLE_LIMIT_MAX = 1000;

================================================================================
