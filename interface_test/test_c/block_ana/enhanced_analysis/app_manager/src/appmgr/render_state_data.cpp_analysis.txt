关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/render_state_data.cpp:21
重要性权重: 1
综合评分: 0
代码片段:
namespace OHOS {

namespace AppExecFwk {

bool RenderStateData::Marshalling(Parcel &parcel) const

{

    return (parcel.WriteInt32(pid) && parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) &&

        parcel.WriteInt32(hostUid) && parcel.WriteInt32(state));

}



bool RenderStateData::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(pid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "pid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(uid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "uid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(hostPid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "hostPid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(hostUid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "hostUid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(state)) {

        TAG_LOGE(AAFwkTag::APPMGR, "state read failed.");

        return false;

    }

    return true;

};



RenderStateData *RenderStateData::Unmarshalling(Parcel &parcel)

{

    RenderStateData *renderStateData = new (std::nothrow) RenderStateData();

    if (renderStateData && !renderStateData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "renderStateData failed, because ReadFromParcel failed");

        delete renderStateData;

        renderStateData = nullptr;

    }

    return renderStateData;

}

}

}
================================================================================
关键点类型: 常规代码
代码位置: /home/user/yzb/hw_interface_analyze/interface_test/test_c/ability_ability_runtime/interfaces/inner_api/app_manager/src/appmgr/render_state_data.cpp:22
重要性权重: 1
综合评分: 0
代码片段:
namespace AppExecFwk {

bool RenderStateData::Marshalling(Parcel &parcel) const

{

    return (parcel.WriteInt32(pid) && parcel.WriteInt32(uid) && parcel.WriteInt32(hostPid) &&

        parcel.WriteInt32(hostUid) && parcel.WriteInt32(state));

}



bool RenderStateData::ReadFromParcel(Parcel &parcel)

{

    if (!parcel.ReadInt32(pid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "pid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(uid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "uid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(hostPid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "hostPid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(hostUid)) {

        TAG_LOGE(AAFwkTag::APPMGR, "hostUid read failed.");

        return false;

    }

    if (!parcel.ReadInt32(state)) {

        TAG_LOGE(AAFwkTag::APPMGR, "state read failed.");

        return false;

    }

    return true;

};



RenderStateData *RenderStateData::Unmarshalling(Parcel &parcel)

{

    RenderStateData *renderStateData = new (std::nothrow) RenderStateData();

    if (renderStateData && !renderStateData->ReadFromParcel(parcel)) {

        TAG_LOGW(AAFwkTag::APPMGR, "renderStateData failed, because ReadFromParcel failed");

        delete renderStateData;

        renderStateData = nullptr;

    }

    return renderStateData;

}

}

================================================================================
